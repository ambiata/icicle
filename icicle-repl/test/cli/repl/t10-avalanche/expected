welcome to iREPL
ok, loaded 38 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core-simp is now on
ok, avalanche is now on
> > -- A rather complicated feature to convert to Avalanche
> - Avalanche (simplified):
conv/3 = TIME
conv/4 = MAX_MAP_SIZE
init acc/c/conv/11@{(Sum Error Int)} = Right 0@{(Sum Error Int)};
init acc/conv/26@{Buf 3 (Sum Error Int)} = Buf []@{Buf 3 (Sum Error Int)};
load_resumable@{Buf 3 (Sum Error Int)} acc/conv/26;
load_resumable@{(Sum Error Int)} acc/c/conv/11;
for_facts (conv/2@{Time}, conv/1@{FactIdentifier}, conv/0@{((Sum Error Int), Time)}) in new
{
  let anf/0 = fst#@{(Sum Error Int), Time} conv/0;
  let anf/1 = Sum_fold#@{(Error,Int)}@{(Sum Error Bool)} 
    (\reify/0/conv/5@{Error} left#@{Error, Bool} reify/0/conv/5) 
    (\reify/1/conv/6@{Int} right#@{Error, Bool} (gt#@{Int} reify/1/conv/6 (10@{Int}))) anf/0;
  if (Sum_fold#@{(Error,Bool)}@{Bool} 
    (\reify/2/conv/8@{Error} True@{Bool}) 
    (\reify/3/conv/9@{Bool} reify/3/conv/9) anf/1)
  {
    read c/conv/11/aval/0 = acc/c/conv/11 [(Sum Error Int)];
    write acc/c/conv/11 = Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
      (\reify/6/conv/12@{Error} left#@{Error, Int} reify/6/conv/12) 
      (\reify/7/conv/13@{Int} Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
        (\reify/8/conv/17@{Error} left#@{Error, Int} reify/8/conv/17) 
        (\reify/9/conv/18@{Int} right#@{Error, Int} reify/9/conv/18) (Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
        (\reify/4/conv/14@{Error} left#@{Error, Int} reify/4/conv/14) 
        (\reify/5/conv/15@{Int} right#@{Error, Int} (add#@{Int} reify/5/conv/15 (1@{Int}))) c/conv/11/aval/0)) anf/0;
  }
  read conv/26/aval/1 = acc/conv/26 [Buf 3 (Sum Error Int)];
  let anf/3 = anf/0;
  write acc/conv/26 = Latest_push#@{Buf 3 (Sum Error Int)} conv/26/aval/1 conv/1 anf/3;
}
save_resumable@{Buf 3 (Sum Error Int)} acc/conv/26;
save_resumable@{(Sum Error Int)} acc/c/conv/11;
read conv/26 = acc/conv/26 [Buf 3 (Sum Error Int)];
read c/conv/11 = acc/c/conv/11 [(Sum Error Int)];
let conv/31 = Sum_fold#@{(Error,Int)}@{(Sum Error (Int, Array (Sum Error Int)))} 
  (\reify/10/conv/21@{Error} 
    let conv/22 = left#@{Error, (Int, Array (Sum Error Int))} reify/10/conv/21
     in conv/22) 
  (\reify/11/conv/23@{Int} 
    let conv/27 = Latest_read#@{Array (Sum Error Int)} conv/26
    let conv/28 = pair#@{Int, Array (Sum Error Int)} reify/11/conv/23 conv/27
    let conv/29 = right#@{Error, (Int, Array (Sum Error Int))} conv/28
     in conv/29) c/conv/11;
output@{(Sum Error (Int, Array (Sum Error Int)))} repl:output (conv/31@{(Sum Error (Int, Array (Sum Error Int)))});

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Avalanche (simplified):
conv/3 = TIME
conv/4 = MAX_MAP_SIZE
init acc/conv/37@{(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))} = Right Map []@{(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))};
load_resumable@{(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))} acc/conv/37;

for_facts (conv/2@{Time}, conv/1@{FactIdentifier}, conv/0@{((Sum Error Int), Time)}) in new
{
  read conv/37/aval/0 = acc/conv/37 [(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))];
  write acc/conv/37 = Sum_fold#@{(Error,Map Time (Buf 2 ((Sum Error Int), Time)))}@{(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))} 
    (\conv/30@{Error} left#@{Error, Map Time (Buf 2 ((Sum Error Int), Time))} conv/30) 
    (\conv/27@{Map Time (Buf 2 ((Sum Error Int), Time))} 
      let conv/26 = snd#@{(Sum Error Int), Time} conv/0
      let conv/32 = Map_insertOrUpdate#@{(Time,Buf 2 ((Sum Error Int), Time))} 
        (\conv/31@{Buf 2 ((Sum Error Int), Time)} Latest_push#@{Buf 2 ((Sum Error Int), Time)} conv/31 conv/1 conv/0) (Latest_push#@{Buf 2 ((Sum Error Int), Time)} (Buf []@{Buf 2 ((Sum Error Int), Time)}) conv/1 conv/0) conv/26 conv/27
       in if#@{(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))} 
        (\conv/33@{Unit} right#@{Error, Map Time (Buf 2 ((Sum Error Int), Time))} conv/32) 
        (\conv/33@{Unit} Left ExceptCannotCompute@{(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))}) (lt#@{Int} (length#@{Array Time} (keys#@{Map Time (Buf 2 ((Sum Error Int), Time))} conv/32)) conv/4)) conv/37/aval/0;
}
save_resumable@{(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))} acc/conv/37;

read conv/37 = acc/conv/37 [(Sum Error (Map Time (Buf 2 ((Sum Error Int), Time))))];
let conv/38 = Sum_fold#@{(Error,Map Time (Buf 2 ((Sum Error Int), Time)))}@{(Sum Error (Map Time Int))} 
  (\conv/30@{Error} left#@{Error, Map Time Int} conv/30) 
  (\conv/27@{Map Time (Buf 2 ((Sum Error Int), Time))} Map_fold#@{(Time,Buf 2 ((Sum Error Int), Time))}@{(Sum Error (Map Time Int))} 
    (\conv/24@{(Sum Error (Map Time Int))} \conv/26@{Time} \conv/28@{Buf 2 ((Sum Error Int), Time)} Sum_fold#@{(Error,Map Time Int)}@{(Sum Error (Map Time Int))} 
      (\conv/30@{Error} left#@{Error, Map Time Int} conv/30) 
      (\conv/25@{Map Time Int} Sum_fold#@{(Error,Int)}@{(Sum Error (Map Time Int))} 
        (\conv/30@{Error} left#@{Error, Map Time Int} conv/30) 
        (\conv/29@{Int} 
          let conv/35 = Map_insertOrUpdate#@{(Time,Int)} 
            (\conv/34@{Int} conv/29) conv/29 conv/26 conv/25
           in if#@{(Sum Error (Map Time Int))} 
            (\conv/36@{Unit} right#@{Error, Map Time Int} conv/35) 
            (\conv/36@{Unit} Left ExceptCannotCompute@{(Sum Error (Map Time Int))}) (lt#@{Int} (length#@{Array Time} (keys#@{Map Time Int} conv/35)) conv/4)) (
        let conv/10 = 
          let conv/5 = Latest_read#@{Array ((Sum Error Int), Time)} conv/28
           in Array_fold#@{((Sum Error Int), Time)}@{(Sum Error Int)} 
            (\conv/9@{(Sum Error Int)} \conv/8@{((Sum Error Int), Time)} 
              let s/conv/19 = Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
                (\reify/0/conv/12@{Error} left#@{Error, Int} reify/0/conv/12) 
                (\reify/1/conv/13@{Int} Sum_fold#@{(Error,Int)}@{(Sum Error Int)} 
                  (\reify/2/conv/14@{Error} left#@{Error, Int} reify/2/conv/14) 
                  (\reify/3/conv/15@{Int} right#@{Error, Int} (add#@{Int} reify/1/conv/13 reify/3/conv/15)) conv/9) (fst#@{(Sum Error Int), Time} conv/8)
               in s/conv/19) (Right 0@{(Sum Error Int)}) conv/5
         in conv/10)) conv/24) (Right Map []@{(Sum Error (Map Time Int))}) conv/27) conv/37;
output@{(Sum Error (Map Time Int))} repl:output (conv/38@{(Sum Error (Map Time Int))});

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > 