welcome to iREPL
ok, loaded 20 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, flatten is now on
ok, c is now on
> > -- Enable C evaluation
> ok, c evaluation now on
                   _________-----_____
        _____------           __      ----_
 ___----             ___------              \
    ----________        ----                 \
                -----__    |             _____)
                     __-                /     \
         _______-----    ___--          \    /)\
   ------_______      ---____            \__/  /
                -----__    \ --    _          /\
                       --__--__     \_____/   \_/\
                               ----|   /          |
                                   |  |___________|
                                   |  | ((_(_)| )_)
                                   |  \_((_(_)|/(_)
                                   \             (
                                    \_____________)
> > -- Oldest
> - Flattened:
gen$date = DATE
{
  init acc$s$reify$2$conv$5$simp$0@{Mutable Bool} = False@{Bool};
  init acc$s$reify$2$conv$5$simp$1@{Mutable Error} = ExceptFold1NoValue@{Error};
  init acc$s$reify$2$conv$5$simp$2@{Mutable Int} = 0@{Int};
  load_resumable@{Bool} acc$s$reify$2$conv$5$simp$0;
  load_resumable@{Error} acc$s$reify$2$conv$5$simp$1;
  load_resumable@{Int} acc$s$reify$2$conv$5$simp$2;
  for_facts (gen$fact$simp$21$simp$23@{Bool},
             gen$fact$simp$21$simp$24@{Error},
             gen$fact$simp$21$simp$25@{Int},
             gen$fact$simp$22@{DateTime}) in new {
    read@{Mutable Bool} acc$s$reify$2$conv$5$simp$3 = acc$s$reify$2$conv$5$simp$0;
    read@{Mutable Error} acc$s$reify$2$conv$5$simp$4 = acc$s$reify$2$conv$5$simp$1;
    read@{Mutable Int} acc$s$reify$2$conv$5$simp$5 = acc$s$reify$2$conv$5$simp$2;
    init flat$0$simp$6@{Mutable Bool} = False@{Bool};
    init flat$0$simp$7@{Mutable Error} = ExceptTombstone@{Error};
    init flat$0$simp$8@{Mutable Int} = 0@{Int};
    if (acc$s$reify$2$conv$5$simp$3) {
      write flat$0$simp$6 = acc$s$reify$2$conv$5$simp$3;
      write flat$0$simp$7 = acc$s$reify$2$conv$5$simp$4;
      write flat$0$simp$8 = acc$s$reify$2$conv$5$simp$5;
    } else {
      init flat$3$simp$9@{Mutable Bool} = False@{Bool};
      init flat$3$simp$10@{Mutable Error} = ExceptTombstone@{Error};
      init flat$3$simp$11@{Mutable Int} = 0@{Int};
      if (eq#@{Error} (ExceptFold1NoValue@{Error})
          acc$s$reify$2$conv$5$simp$4) {
        write flat$3$simp$9 = gen$fact$simp$21$simp$23;
        write flat$3$simp$10 = gen$fact$simp$21$simp$24;
        write flat$3$simp$11 = gen$fact$simp$21$simp$25;
      } else {
        write flat$3$simp$9 = False@{Bool};
        write flat$3$simp$10 = acc$s$reify$2$conv$5$simp$4;
        write flat$3$simp$11 = 0@{Int};
      }
      read@{Mutable Bool} flat$3$simp$12 = flat$3$simp$9;
      read@{Mutable Error} flat$3$simp$13 = flat$3$simp$10;
      read@{Mutable Int} flat$3$simp$14 = flat$3$simp$11;
      write flat$0$simp$6 = flat$3$simp$12;
      write flat$0$simp$7 = flat$3$simp$13;
      write flat$0$simp$8 = flat$3$simp$14;
    }
    read@{Mutable Bool} flat$0$simp$15 = flat$0$simp$6;
    read@{Mutable Error} flat$0$simp$16 = flat$0$simp$7;
    read@{Mutable Int} flat$0$simp$17 = flat$0$simp$8;
    write acc$s$reify$2$conv$5$simp$0 = flat$0$simp$15;
    write acc$s$reify$2$conv$5$simp$1 = flat$0$simp$16;
    write acc$s$reify$2$conv$5$simp$2 = flat$0$simp$17;
  }
  save_resumable@{Bool} acc$s$reify$2$conv$5$simp$0;
  save_resumable@{Error} acc$s$reify$2$conv$5$simp$1;
  save_resumable@{Int} acc$s$reify$2$conv$5$simp$2;
  read@{Mutable Bool} s$reify$2$conv$5$simp$18 = acc$s$reify$2$conv$5$simp$0;
  read@{Mutable Error} s$reify$2$conv$5$simp$19 = acc$s$reify$2$conv$5$simp$1;
  read@{Mutable Int} s$reify$2$conv$5$simp$20 = acc$s$reify$2$conv$5$simp$2;
  output@{(Sum Error Int)} repl (s$reify$2$conv$5$simp$18@{Bool},
               s$reify$2$conv$5$simp$19@{Error},
               s$reify$2$conv$5$simp$20@{Int});
}

- C:
// 01-includes.h
#line 1 "01-includes.h"
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

typedef uint64_t ierror_t;
typedef uint64_t iunit_t;
typedef uint64_t ibool_t;
typedef  int64_t iint_t;
typedef   double idouble_t;
typedef  int64_t idate_t;

typedef const char *istring_t;

static const ierror_t ierror_tombstone              = 0;
static const ierror_t ierror_fold1_no_value         = 1;
static const ierror_t ierror_variable_not_available = 2;

static const iunit_t iunit  = 0x13013;
static const ibool_t ifalse = 0;
static const ibool_t itrue  = 1;

#define INLINE __attribute__((always_inline))

// 02-numbers.h
#line 1 "02-numbers.h"
#define MK_SIMPLE_CMPS(t,pre)                                                   \
    static ibool_t   INLINE pre##eq   (t x, t y) { return x == y; }             \
    static ibool_t   INLINE pre##ne   (t x, t y) { return x != y; }             \
    static ibool_t   INLINE pre##gt   (t x, t y) { return x >  y; }             \
    static ibool_t   INLINE pre##ge   (t x, t y) { return x >= y; }             \
    static ibool_t   INLINE pre##lt   (t x, t y) { return x <  y; }             \
    static ibool_t   INLINE pre##le   (t x, t y) { return x <= y; }             \

MK_SIMPLE_CMPS(ierror_t, ierror_)
MK_SIMPLE_CMPS(ibool_t,  ibool_)
MK_SIMPLE_CMPS(idate_t,  idate_)
MK_SIMPLE_CMPS(iunit_t,  iunit_)

static idouble_t INLINE iint_extend   (iint_t    x)              { return x; }
static iint_t    INLINE iint_add      (iint_t    x, iint_t    y) { return x +  y; }
static iint_t    INLINE iint_sub      (iint_t    x, iint_t    y) { return x -  y; }
static iint_t    INLINE iint_mul      (iint_t    x, iint_t    y) { return x *  y; }

MK_SIMPLE_CMPS(iint_t, iint_)

static iint_t    INLINE idouble_trunc (idouble_t x)              { return (iint_t)x; }
static idouble_t INLINE idouble_add   (idouble_t x, idouble_t y) { return x + y; }
static idouble_t INLINE idouble_sub   (idouble_t x, idouble_t y) { return x - y; }
static idouble_t INLINE idouble_mul   (idouble_t x, idouble_t y) { return x * y; }
static idouble_t INLINE idouble_pow   (idouble_t x, idouble_t y) { return pow(x, y); }
static idouble_t INLINE idouble_div   (idouble_t x, idouble_t y) { return x / y; }
static idouble_t INLINE idouble_log   (idouble_t x)              { return log(x); }
static idouble_t INLINE idouble_exp   (idouble_t x)              { return exp(x); }

MK_SIMPLE_CMPS(idouble_t, idouble_)

static ibool_t   INLINE istring_gt    (istring_t x, istring_t y) { return strcmp(x, y) >  0; }
static ibool_t   INLINE istring_ge    (istring_t x, istring_t y) { return strcmp(x, y) >= 0; }
static ibool_t   INLINE istring_lt    (istring_t x, istring_t y) { return strcmp(x, y) <  0; }
static ibool_t   INLINE istring_le    (istring_t x, istring_t y) { return strcmp(x, y) <= 0; }
static ibool_t   INLINE istring_eq    (istring_t x, istring_t y) { return strcmp(x, y) == 0; }
static ibool_t   INLINE istring_ne    (istring_t x, istring_t y) { return strcmp(x, y) != 0; }

// 03-array.h
#line 1 "03-array.h"
typedef struct
{
    iint_t count;
} iarray_struct;
// payload goes straight after

#define ARRAY_OF(t) iarray_t__##t
#define ARRAY_FUN(f,pre) iarray__##pre##f

// I'm not certain there's a point having a different one for each type.
// It makes it look a little better, but I don't think it's any safer.
#define MK_ARRAY_STRUCT(t) typedef iarray_struct* ARRAY_OF(t);

// get payload by advancing pointer by size of struct
// (which should be equivalent to straight after struct fields)
// then casting to t*
#define ARRAY_PAYLOAD(x,t) ((t*)(x+1))


#define MK_ARRAY_LENGTH(t,pre)                                                  \
    static iint_t INLINE ARRAY_FUN(length,pre) (ARRAY_OF(t) arr)                \
    { return arr->count; }

#define MK_ARRAY_EQ(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(eq,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        if (x->count != y->count) return ifalse;                                \
        for (iint_t ix = 0; ix != x->count; ++ix) {                             \
            if (!pre##eq(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        return itrue;                                                           \
    }

#define MK_ARRAY_LT(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(lt,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        iint_t min = (x->count < y->count) ? x->count : y->count;               \
        for (iint_t ix = 0; ix != min; ++ix) {                                  \
            if (!pre##lt(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        if (x->count < y->count)                                                \
            return itrue;                                                       \
        else                                                                    \
            return ifalse;                                                      \
    }

#define MK_ARRAY_CMP(t,pre,op,ret)                                              \
    static ibool_t INLINE ARRAY_FUN(op,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    { return ret ; }                                                            \

#define MK_ARRAY_CMPS(t,pre)                                                    \
    MK_ARRAY_EQ(t,pre)                                                          \
    MK_ARRAY_LT(t,pre)                                                          \
    MK_ARRAY_CMP(t,pre,ne, !ARRAY_FUN(eq,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,le,  ARRAY_FUN(lt,pre) (x,y) || ARRAY_FUN(eq,pre) (x,y)) \
    MK_ARRAY_CMP(t,pre,ge, !ARRAY_FUN(lt,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,gt, !ARRAY_FUN(le,pre) (x,y))                            \



#define MK_ARRAY_INDEX(t,pre)                                                   \
    static t       INLINE ARRAY_FUN(index,pre) (ARRAY_OF(t) x, iint_t ix)       \
    { return ARRAY_PAYLOAD(x,t)[ix]; }                                          \


#define MK_ARRAY_CREATE(t,pre)                                                  \
    static ARRAY_OF(t)  INLINE ARRAY_FUN(create,pre)                            \
                                        (iallocate_t alloc, iint_t sz)          \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(iarray_struct);      \
        ARRAY_OF(t)  ret = (ARRAY_OF(t))allocate(alloc, bytes);                 \
        ret->count = sz;                                                        \
        return ret;                                                             \
    }                                                                           \

#define MK_ARRAY_PUT(t,pre)                                                     \
    static iunit_t INLINE ARRAY_FUN(put,pre)   (ARRAY_OF(t) x, iint_t ix, t v)  \
    {                                                                           \
        ARRAY_PAYLOAD(x,t)[ix] = v;                                             \
        return iunit;                                                           \
    }                                                                           \

                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \



#define MAKE_ARRAY(t,pre)                                                       \
    MK_ARRAY_STRUCT (t)                                                         \
    MK_ARRAY_LENGTH (t,pre)                                                     \
    MK_ARRAY_CMPS   (t,pre)                                                     \
    MK_ARRAY_INDEX  (t,pre)                                                     \
    MK_ARRAY_CREATE (t,pre)                                                     \
    MK_ARRAY_PUT    (t,pre)                                                     \
    // MK_ARRAY_ZIP    (t,pre)                                                     \

// TEMPORARY
typedef void* iallocate_t;
void* allocate(iallocate_t t, iint_t sz);

MAKE_ARRAY(idouble_t,   idouble_)
MAKE_ARRAY(iint_t,      iint_)
MAKE_ARRAY(ierror_t,    ierror_)
MAKE_ARRAY(ibool_t,     ibool_)
MAKE_ARRAY(idate_t,     idate_)
MAKE_ARRAY(iunit_t,     iunit_)

// 04-buffer.h
#line 1 "04-buffer.h"
typedef struct
{
    iint_t max_size;
    iint_t cur_size;
    iint_t head;
} ibuf_struct;
/*
 Invariants
  0 <= cur_size <= max_size
  0 <= head     <  max_size

  read = ARRAY[ head..(head+cur_size) % max_size )

*/

#define BUF_OF(t)   ibuf_t__##t
#define BUF_FUN(f,pre) ibuf__##pre##f

#define MK_BUF_STRUCT(t) typedef ibuf_struct* BUF_OF(t);

#define BUF_PAYLOAD(x,t) ((t*)(x+1))

/*
Make
 Pre
  0 <= sz

 Post
  cur_size' = 0
  head'     = 0
  max_size' = sz
  ARRAY'    = [??...]

  read'     = ARRAY'[head'..head'+cur_size')
            = ARRAY'[0..0)
            = []

  (invariants hold)

*/
#define MK_BUF_MAKE(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(make,pre)                                   \
                     (iallocate_t alloc, iint_t sz)                             \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(ibuf_struct);                \
        BUF_OF(t) ret    = (BUF_OF(t))allocate(alloc, bytes);                   \
        ret->max_size = sz;                                                     \
        ret->cur_size = 0;                                                      \
        ret->head     = 0;                                                      \
        return ret;                                                             \
    }

/*
Push(buf, val)
 Pre
  (buf invariants hold)
 Post
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]

*/

/*
Push(buf, val)
  {buf invariants hold}
  ...
  {
  head'     = if cur_size < max_size
              then head
              else (head+1) % max_size

  cur_size' = min max_size (cur_size+1)

  ARRAY'    = ARRAY[update]:=val
  read'     = ARRAY[head'..(head'+cur_size') % max_size)
  update    = (head' + cur_size') % max_size
  }
  ==>
  {
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]
  }

*/

#define MK_BUF_PUSH(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(push,pre) (BUF_OF(t) buf, t val)            \
    {                                                                           \
        iint_t head_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->head                                            \
                        : (buf->head+1) % buf->max_size;                        \
                                                                                \
        iint_t size_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->cur_size + 1                                    \
                        :  buf->max_size;                                       \
                                                                                \
        iint_t update   = (head_new + buf->cur_size) % buf->max_size;           \
                                                                                \
        BUF_PAYLOAD(buf,t)[update] = val;                                       \
                                                                                \
        buf->head     = head_new;                                               \
        buf->cur_size = size_new;                                               \
        return buf;                                                             \
    }



                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \


/*
Read(buf)
 Pre
  (buf invariants hold)
 Post
  out       = read
*/

#define MK_BUF_READ(t,pre)                                                      \
    static ARRAY_OF(t) INLINE BUF_FUN(read,pre)                                 \
                       (iallocate_t alloc, BUF_OF(t) buf)                       \
    {                                                                           \
        ARRAY_OF(t) out = ARRAY_FUN(create,pre)(alloc, buf->cur_size);          \
                                                                                \
        for (iint_t ix = 0; ix != buf->cur_size; ++ix)                          \
        {                                                                       \
            iint_t in = (buf->head + ix) % buf->max_size;                       \
            ARRAY_PAYLOAD(out,t)[ix] = BUF_PAYLOAD(buf,t)[in];                  \
        }                                                                       \
                                                                                \
        return out;                                                             \
    }



#define MAKE_BUF(t,pre)                                                         \
    MK_BUF_STRUCT (t)                                                           \
    MK_BUF_MAKE   (t,pre)                                                       \
    MK_BUF_PUSH   (t,pre)                                                       \
    MK_BUF_READ   (t,pre)                                                       \

MAKE_BUF(idouble_t,   idouble_)
MAKE_BUF(iint_t,      iint_)
MAKE_BUF(ierror_t,    ierror_)
MAKE_BUF(ibool_t,     ibool_)
MAKE_BUF(idate_t,     idate_)
MAKE_BUF(iunit_t,     iunit_)

#line 1 "state definition"
typedef struct {
    /* inputs */
    idate_t    gen_date;
    iint_t     new_count;
    ibool_t    *new_gen_fact_simp_21_simp_23;
    ierror_t   *new_gen_fact_simp_21_simp_24;
    iint_t     *new_gen_fact_simp_21_simp_25;
    idate_t    *new_gen_fact_simp_22;

    /* outputs */
    ibool_t    repl_ix_0;
    ierror_t   repl_ix_1;
    iint_t     repl_ix_2;

    /* resumables */
    ibool_t    has_acc_s_reify_2_conv_5_simp_0;
    ibool_t    res_acc_s_reify_2_conv_5_simp_0;
    ibool_t    has_acc_s_reify_2_conv_5_simp_1;
    ierror_t   res_acc_s_reify_2_conv_5_simp_1;
    ibool_t    has_acc_s_reify_2_conv_5_simp_2;
    iint_t     res_acc_s_reify_2_conv_5_simp_2;
} icicle_state_t;

#line 1 "compute function"
void compute(icicle_state_t *s)
{
    ibool_t    acc_s_reify_2_conv_5_simp_0;
    ierror_t   acc_s_reify_2_conv_5_simp_1;
    iint_t     acc_s_reify_2_conv_5_simp_2;
    ibool_t    acc_s_reify_2_conv_5_simp_3;
    ierror_t   acc_s_reify_2_conv_5_simp_4;
    iint_t     acc_s_reify_2_conv_5_simp_5;
    ibool_t    flat_0_simp_15;
    ierror_t   flat_0_simp_16;
    iint_t     flat_0_simp_17;
    ibool_t    flat_0_simp_6;
    ierror_t   flat_0_simp_7;
    iint_t     flat_0_simp_8;
    ierror_t   flat_3_simp_10;
    iint_t     flat_3_simp_11;
    ibool_t    flat_3_simp_12;
    ierror_t   flat_3_simp_13;
    iint_t     flat_3_simp_14;
    ibool_t    flat_3_simp_9;
    ibool_t    s_reify_2_conv_5_simp_18;
    ierror_t   s_reify_2_conv_5_simp_19;
    iint_t     s_reify_2_conv_5_simp_20;

    acc_s_reify_2_conv_5_simp_0          = ifalse;                               /* init */
    acc_s_reify_2_conv_5_simp_1          = ierror_fold1_no_value;                /* init */
    acc_s_reify_2_conv_5_simp_2          = 0;                                    /* init */
    
    if (s->has_acc_s_reify_2_conv_5_simp_0) {
        acc_s_reify_2_conv_5_simp_0      = s->res_acc_s_reify_2_conv_5_simp_0;   /* load */
    }
    
    if (s->has_acc_s_reify_2_conv_5_simp_1) {
        acc_s_reify_2_conv_5_simp_1      = s->res_acc_s_reify_2_conv_5_simp_1;   /* load */
    }
    
    if (s->has_acc_s_reify_2_conv_5_simp_2) {
        acc_s_reify_2_conv_5_simp_2      = s->res_acc_s_reify_2_conv_5_simp_2;   /* load */
    }
    
    const iint_t    new_count            = s->new_count;
    const ibool_t   *const new_gen_fact_simp_21_simp_23 = s->new_gen_fact_simp_21_simp_23;
    const ierror_t  *const new_gen_fact_simp_21_simp_24 = s->new_gen_fact_simp_21_simp_24;
    const iint_t    *const new_gen_fact_simp_21_simp_25 = s->new_gen_fact_simp_21_simp_25;
    const idate_t   *const new_gen_fact_simp_22 = s->new_gen_fact_simp_22;
    
    for (iint_t i = 0; i < new_count; i++) {
        ibool_t    gen_fact_simp_21_simp_23 = new_gen_fact_simp_21_simp_23[i];
        ierror_t   gen_fact_simp_21_simp_24 = new_gen_fact_simp_21_simp_24[i];
        iint_t     gen_fact_simp_21_simp_25 = new_gen_fact_simp_21_simp_25[i];
        idate_t    gen_fact_simp_22      = new_gen_fact_simp_22[i];
        acc_s_reify_2_conv_5_simp_3      = acc_s_reify_2_conv_5_simp_0;          /* read */
        acc_s_reify_2_conv_5_simp_4      = acc_s_reify_2_conv_5_simp_1;          /* read */
        acc_s_reify_2_conv_5_simp_5      = acc_s_reify_2_conv_5_simp_2;          /* read */
        flat_0_simp_6                    = ifalse;                               /* init */
        flat_0_simp_7                    = ierror_tombstone;                     /* init */
        flat_0_simp_8                    = 0;                                    /* init */
        
        if (acc_s_reify_2_conv_5_simp_3) {
            flat_0_simp_6                = acc_s_reify_2_conv_5_simp_3;          /* write */
            flat_0_simp_7                = acc_s_reify_2_conv_5_simp_4;          /* write */
            flat_0_simp_8                = acc_s_reify_2_conv_5_simp_5;          /* write */
        } else {
            flat_3_simp_9                = ifalse;                               /* init */
            flat_3_simp_10               = ierror_tombstone;                     /* init */
            flat_3_simp_11               = 0;                                    /* init */
            
            if (ierror_eq (ierror_fold1_no_value, acc_s_reify_2_conv_5_simp_4)) {
                flat_3_simp_9            = gen_fact_simp_21_simp_23;             /* write */
                flat_3_simp_10           = gen_fact_simp_21_simp_24;             /* write */
                flat_3_simp_11           = gen_fact_simp_21_simp_25;             /* write */
            } else {
                flat_3_simp_9            = ifalse;                               /* write */
                flat_3_simp_10           = acc_s_reify_2_conv_5_simp_4;          /* write */
                flat_3_simp_11           = 0;                                    /* write */
            }
            
            flat_3_simp_12               = flat_3_simp_9;                        /* read */
            flat_3_simp_13               = flat_3_simp_10;                       /* read */
            flat_3_simp_14               = flat_3_simp_11;                       /* read */
            flat_0_simp_6                = flat_3_simp_12;                       /* write */
            flat_0_simp_7                = flat_3_simp_13;                       /* write */
            flat_0_simp_8                = flat_3_simp_14;                       /* write */
        }
        
        flat_0_simp_15                   = flat_0_simp_6;                        /* read */
        flat_0_simp_16                   = flat_0_simp_7;                        /* read */
        flat_0_simp_17                   = flat_0_simp_8;                        /* read */
        acc_s_reify_2_conv_5_simp_0      = flat_0_simp_15;                       /* write */
        acc_s_reify_2_conv_5_simp_1      = flat_0_simp_16;                       /* write */
        acc_s_reify_2_conv_5_simp_2      = flat_0_simp_17;                       /* write */
    }
    
    s->has_acc_s_reify_2_conv_5_simp_0   = itrue;                                /* save */
    s->res_acc_s_reify_2_conv_5_simp_0   = acc_s_reify_2_conv_5_simp_0;          /* save */
    
    s->has_acc_s_reify_2_conv_5_simp_1   = itrue;                                /* save */
    s->res_acc_s_reify_2_conv_5_simp_1   = acc_s_reify_2_conv_5_simp_1;          /* save */
    
    s->has_acc_s_reify_2_conv_5_simp_2   = itrue;                                /* save */
    s->res_acc_s_reify_2_conv_5_simp_2   = acc_s_reify_2_conv_5_simp_2;          /* save */
    
    s_reify_2_conv_5_simp_18             = acc_s_reify_2_conv_5_simp_0;          /* read */
    s_reify_2_conv_5_simp_19             = acc_s_reify_2_conv_5_simp_1;          /* read */
    s_reify_2_conv_5_simp_20             = acc_s_reify_2_conv_5_simp_2;          /* read */
    s->repl_ix_0                         = s_reify_2_conv_5_simp_18;             /* output */
    s->repl_ix_1                         = s_reify_2_conv_5_simp_19;             /* output */
    s->repl_ix_2                         = s_reify_2_conv_5_simp_20;             /* output */
}

- C evaluation:
[(homer,100),(marge,0)]

- Core evaluation:
[homer, 100,marge, 0]

> > -- Filtering works
> - Flattened:
gen$date = DATE
{
  init acc$c$conv$13$simp$4@{Mutable Bool} = True@{Bool};
  init acc$c$conv$13$simp$5@{Mutable Error} = ExceptTombstone@{Error};
  init acc$c$conv$13$simp$6@{Mutable Int} = 0@{Int};
  load_resumable@{Bool} acc$c$conv$13$simp$4;
  load_resumable@{Error} acc$c$conv$13$simp$5;
  load_resumable@{Int} acc$c$conv$13$simp$6;
  for_facts (gen$fact$simp$37$simp$39@{Bool},
             gen$fact$simp$37$simp$40@{Error},
             gen$fact$simp$37$simp$41@{Int},
             gen$fact$simp$38@{DateTime}) in new {
    init flat$0$simp$7@{Mutable Bool} = False@{Bool};
    init flat$0$simp$9@{Mutable Bool} = False@{Bool};
    if (gen$fact$simp$37$simp$39) {
      let simp$1 = gt#@{Int}
                   gen$fact$simp$37$simp$41 (300@{Int});
      write flat$0$simp$7 = True@{Bool};
      write flat$0$simp$9 = simp$1;
    } else {
      write flat$0$simp$7 = False@{Bool};
      write flat$0$simp$9 = False@{Bool};
    }
    read@{Mutable Bool} flat$0$simp$10 = flat$0$simp$7;
    read@{Mutable Bool} flat$0$simp$12 = flat$0$simp$9;
    init flat$1@{Mutable Bool} = False@{Bool};
    if (flat$0$simp$10) {
      write flat$1 = flat$0$simp$12;
    } 
     else {
      write flat$1 = True@{Bool};
    } 
    
    read@{Mutable Bool} flat$1 = flat$1;
    if (flat$1) {
      read@{Mutable Bool} acc$c$conv$13$simp$13 = acc$c$conv$13$simp$4;
      read@{Mutable Error} acc$c$conv$13$simp$14 = acc$c$conv$13$simp$5;
      read@{Mutable Int} acc$c$conv$13$simp$15 = acc$c$conv$13$simp$6;
      init flat$2$simp$16@{Mutable Bool} = False@{Bool};
      init flat$2$simp$17@{Mutable Error} = ExceptTombstone@{Error};
      init flat$2$simp$18@{Mutable Int} = 0@{Int};
      if (gen$fact$simp$37$simp$39) {
        init flat$5$simp$19@{Mutable Bool} = False@{Bool};
        init flat$5$simp$20@{Mutable Error} = ExceptTombstone@{Error};
        init flat$5$simp$21@{Mutable Int} = 0@{Int};
        if (acc$c$conv$13$simp$13) {
          let simp$3 = add#@{Int}
                       acc$c$conv$13$simp$15 (1@{Int});
          write flat$5$simp$19 = True@{Bool};
          write flat$5$simp$20 = ExceptTombstone@{Error};
          write flat$5$simp$21 = simp$3;
        } else {
          write flat$5$simp$19 = False@{Bool};
          write flat$5$simp$20 = acc$c$conv$13$simp$14;
          write flat$5$simp$21 = 0@{Int};
        }
        read@{Mutable Bool} flat$5$simp$22 = flat$5$simp$19;
        read@{Mutable Error} flat$5$simp$23 = flat$5$simp$20;
        read@{Mutable Int} flat$5$simp$24 = flat$5$simp$21;
        init flat$6$simp$25@{Mutable Bool} = False@{Bool};
        init flat$6$simp$26@{Mutable Error} = ExceptTombstone@{Error};
        init flat$6$simp$27@{Mutable Int} = 0@{Int};
        if (flat$5$simp$22) {
          write flat$6$simp$25 = True@{Bool};
          write flat$6$simp$26 = ExceptTombstone@{Error};
          write flat$6$simp$27 = flat$5$simp$24;
        } else {
          write flat$6$simp$25 = False@{Bool};
          write flat$6$simp$26 = flat$5$simp$23;
          write flat$6$simp$27 = 0@{Int};
        }
        read@{Mutable Bool} flat$6$simp$28 = flat$6$simp$25;
        read@{Mutable Error} flat$6$simp$29 = flat$6$simp$26;
        read@{Mutable Int} flat$6$simp$30 = flat$6$simp$27;
        write flat$2$simp$16 = flat$6$simp$28;
        write flat$2$simp$17 = flat$6$simp$29;
        write flat$2$simp$18 = flat$6$simp$30;
      } else {
        write flat$2$simp$16 = False@{Bool};
        write flat$2$simp$17 = gen$fact$simp$37$simp$40;
        write flat$2$simp$18 = 0@{Int};
      }
      read@{Mutable Bool} flat$2$simp$31 = flat$2$simp$16;
      read@{Mutable Error} flat$2$simp$32 = flat$2$simp$17;
      read@{Mutable Int} flat$2$simp$33 = flat$2$simp$18;
      write acc$c$conv$13$simp$4 = flat$2$simp$31;
      write acc$c$conv$13$simp$5 = flat$2$simp$32;
      write acc$c$conv$13$simp$6 = flat$2$simp$33;
    }
  }
  save_resumable@{Bool} acc$c$conv$13$simp$4;
  save_resumable@{Error} acc$c$conv$13$simp$5;
  save_resumable@{Int} acc$c$conv$13$simp$6;
  read@{Mutable Bool} c$conv$13$simp$34 = acc$c$conv$13$simp$4;
  read@{Mutable Error} c$conv$13$simp$35 = acc$c$conv$13$simp$5;
  read@{Mutable Int} c$conv$13$simp$36 = acc$c$conv$13$simp$6;
  output@{(Sum Error Int)} repl (c$conv$13$simp$34@{Bool},
               c$conv$13$simp$35@{Error},
               c$conv$13$simp$36@{Int});
}

- C:
// 01-includes.h
#line 1 "01-includes.h"
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

typedef uint64_t ierror_t;
typedef uint64_t iunit_t;
typedef uint64_t ibool_t;
typedef  int64_t iint_t;
typedef   double idouble_t;
typedef  int64_t idate_t;

typedef const char *istring_t;

static const ierror_t ierror_tombstone              = 0;
static const ierror_t ierror_fold1_no_value         = 1;
static const ierror_t ierror_variable_not_available = 2;

static const iunit_t iunit  = 0x13013;
static const ibool_t ifalse = 0;
static const ibool_t itrue  = 1;

#define INLINE __attribute__((always_inline))

// 02-numbers.h
#line 1 "02-numbers.h"
#define MK_SIMPLE_CMPS(t,pre)                                                   \
    static ibool_t   INLINE pre##eq   (t x, t y) { return x == y; }             \
    static ibool_t   INLINE pre##ne   (t x, t y) { return x != y; }             \
    static ibool_t   INLINE pre##gt   (t x, t y) { return x >  y; }             \
    static ibool_t   INLINE pre##ge   (t x, t y) { return x >= y; }             \
    static ibool_t   INLINE pre##lt   (t x, t y) { return x <  y; }             \
    static ibool_t   INLINE pre##le   (t x, t y) { return x <= y; }             \

MK_SIMPLE_CMPS(ierror_t, ierror_)
MK_SIMPLE_CMPS(ibool_t,  ibool_)
MK_SIMPLE_CMPS(idate_t,  idate_)
MK_SIMPLE_CMPS(iunit_t,  iunit_)

static idouble_t INLINE iint_extend   (iint_t    x)              { return x; }
static iint_t    INLINE iint_add      (iint_t    x, iint_t    y) { return x +  y; }
static iint_t    INLINE iint_sub      (iint_t    x, iint_t    y) { return x -  y; }
static iint_t    INLINE iint_mul      (iint_t    x, iint_t    y) { return x *  y; }

MK_SIMPLE_CMPS(iint_t, iint_)

static iint_t    INLINE idouble_trunc (idouble_t x)              { return (iint_t)x; }
static idouble_t INLINE idouble_add   (idouble_t x, idouble_t y) { return x + y; }
static idouble_t INLINE idouble_sub   (idouble_t x, idouble_t y) { return x - y; }
static idouble_t INLINE idouble_mul   (idouble_t x, idouble_t y) { return x * y; }
static idouble_t INLINE idouble_pow   (idouble_t x, idouble_t y) { return pow(x, y); }
static idouble_t INLINE idouble_div   (idouble_t x, idouble_t y) { return x / y; }
static idouble_t INLINE idouble_log   (idouble_t x)              { return log(x); }
static idouble_t INLINE idouble_exp   (idouble_t x)              { return exp(x); }

MK_SIMPLE_CMPS(idouble_t, idouble_)

static ibool_t   INLINE istring_gt    (istring_t x, istring_t y) { return strcmp(x, y) >  0; }
static ibool_t   INLINE istring_ge    (istring_t x, istring_t y) { return strcmp(x, y) >= 0; }
static ibool_t   INLINE istring_lt    (istring_t x, istring_t y) { return strcmp(x, y) <  0; }
static ibool_t   INLINE istring_le    (istring_t x, istring_t y) { return strcmp(x, y) <= 0; }
static ibool_t   INLINE istring_eq    (istring_t x, istring_t y) { return strcmp(x, y) == 0; }
static ibool_t   INLINE istring_ne    (istring_t x, istring_t y) { return strcmp(x, y) != 0; }

// 03-array.h
#line 1 "03-array.h"
typedef struct
{
    iint_t count;
} iarray_struct;
// payload goes straight after

#define ARRAY_OF(t) iarray_t__##t
#define ARRAY_FUN(f,pre) iarray__##pre##f

// I'm not certain there's a point having a different one for each type.
// It makes it look a little better, but I don't think it's any safer.
#define MK_ARRAY_STRUCT(t) typedef iarray_struct* ARRAY_OF(t);

// get payload by advancing pointer by size of struct
// (which should be equivalent to straight after struct fields)
// then casting to t*
#define ARRAY_PAYLOAD(x,t) ((t*)(x+1))


#define MK_ARRAY_LENGTH(t,pre)                                                  \
    static iint_t INLINE ARRAY_FUN(length,pre) (ARRAY_OF(t) arr)                \
    { return arr->count; }

#define MK_ARRAY_EQ(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(eq,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        if (x->count != y->count) return ifalse;                                \
        for (iint_t ix = 0; ix != x->count; ++ix) {                             \
            if (!pre##eq(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        return itrue;                                                           \
    }

#define MK_ARRAY_LT(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(lt,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        iint_t min = (x->count < y->count) ? x->count : y->count;               \
        for (iint_t ix = 0; ix != min; ++ix) {                                  \
            if (!pre##lt(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        if (x->count < y->count)                                                \
            return itrue;                                                       \
        else                                                                    \
            return ifalse;                                                      \
    }

#define MK_ARRAY_CMP(t,pre,op,ret)                                              \
    static ibool_t INLINE ARRAY_FUN(op,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    { return ret ; }                                                            \

#define MK_ARRAY_CMPS(t,pre)                                                    \
    MK_ARRAY_EQ(t,pre)                                                          \
    MK_ARRAY_LT(t,pre)                                                          \
    MK_ARRAY_CMP(t,pre,ne, !ARRAY_FUN(eq,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,le,  ARRAY_FUN(lt,pre) (x,y) || ARRAY_FUN(eq,pre) (x,y)) \
    MK_ARRAY_CMP(t,pre,ge, !ARRAY_FUN(lt,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,gt, !ARRAY_FUN(le,pre) (x,y))                            \



#define MK_ARRAY_INDEX(t,pre)                                                   \
    static t       INLINE ARRAY_FUN(index,pre) (ARRAY_OF(t) x, iint_t ix)       \
    { return ARRAY_PAYLOAD(x,t)[ix]; }                                          \


#define MK_ARRAY_CREATE(t,pre)                                                  \
    static ARRAY_OF(t)  INLINE ARRAY_FUN(create,pre)                            \
                                        (iallocate_t alloc, iint_t sz)          \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(iarray_struct);      \
        ARRAY_OF(t)  ret = (ARRAY_OF(t))allocate(alloc, bytes);                 \
        ret->count = sz;                                                        \
        return ret;                                                             \
    }                                                                           \

#define MK_ARRAY_PUT(t,pre)                                                     \
    static iunit_t INLINE ARRAY_FUN(put,pre)   (ARRAY_OF(t) x, iint_t ix, t v)  \
    {                                                                           \
        ARRAY_PAYLOAD(x,t)[ix] = v;                                             \
        return iunit;                                                           \
    }                                                                           \

                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \



#define MAKE_ARRAY(t,pre)                                                       \
    MK_ARRAY_STRUCT (t)                                                         \
    MK_ARRAY_LENGTH (t,pre)                                                     \
    MK_ARRAY_CMPS   (t,pre)                                                     \
    MK_ARRAY_INDEX  (t,pre)                                                     \
    MK_ARRAY_CREATE (t,pre)                                                     \
    MK_ARRAY_PUT    (t,pre)                                                     \
    // MK_ARRAY_ZIP    (t,pre)                                                     \

// TEMPORARY
typedef void* iallocate_t;
void* allocate(iallocate_t t, iint_t sz);

MAKE_ARRAY(idouble_t,   idouble_)
MAKE_ARRAY(iint_t,      iint_)
MAKE_ARRAY(ierror_t,    ierror_)
MAKE_ARRAY(ibool_t,     ibool_)
MAKE_ARRAY(idate_t,     idate_)
MAKE_ARRAY(iunit_t,     iunit_)

// 04-buffer.h
#line 1 "04-buffer.h"
typedef struct
{
    iint_t max_size;
    iint_t cur_size;
    iint_t head;
} ibuf_struct;
/*
 Invariants
  0 <= cur_size <= max_size
  0 <= head     <  max_size

  read = ARRAY[ head..(head+cur_size) % max_size )

*/

#define BUF_OF(t)   ibuf_t__##t
#define BUF_FUN(f,pre) ibuf__##pre##f

#define MK_BUF_STRUCT(t) typedef ibuf_struct* BUF_OF(t);

#define BUF_PAYLOAD(x,t) ((t*)(x+1))

/*
Make
 Pre
  0 <= sz

 Post
  cur_size' = 0
  head'     = 0
  max_size' = sz
  ARRAY'    = [??...]

  read'     = ARRAY'[head'..head'+cur_size')
            = ARRAY'[0..0)
            = []

  (invariants hold)

*/
#define MK_BUF_MAKE(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(make,pre)                                   \
                     (iallocate_t alloc, iint_t sz)                             \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(ibuf_struct);                \
        BUF_OF(t) ret    = (BUF_OF(t))allocate(alloc, bytes);                   \
        ret->max_size = sz;                                                     \
        ret->cur_size = 0;                                                      \
        ret->head     = 0;                                                      \
        return ret;                                                             \
    }

/*
Push(buf, val)
 Pre
  (buf invariants hold)
 Post
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]

*/

/*
Push(buf, val)
  {buf invariants hold}
  ...
  {
  head'     = if cur_size < max_size
              then head
              else (head+1) % max_size

  cur_size' = min max_size (cur_size+1)

  ARRAY'    = ARRAY[update]:=val
  read'     = ARRAY[head'..(head'+cur_size') % max_size)
  update    = (head' + cur_size') % max_size
  }
  ==>
  {
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]
  }

*/

#define MK_BUF_PUSH(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(push,pre) (BUF_OF(t) buf, t val)            \
    {                                                                           \
        iint_t head_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->head                                            \
                        : (buf->head+1) % buf->max_size;                        \
                                                                                \
        iint_t size_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->cur_size + 1                                    \
                        :  buf->max_size;                                       \
                                                                                \
        iint_t update   = (head_new + buf->cur_size) % buf->max_size;           \
                                                                                \
        BUF_PAYLOAD(buf,t)[update] = val;                                       \
                                                                                \
        buf->head     = head_new;                                               \
        buf->cur_size = size_new;                                               \
        return buf;                                                             \
    }



                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \


/*
Read(buf)
 Pre
  (buf invariants hold)
 Post
  out       = read
*/

#define MK_BUF_READ(t,pre)                                                      \
    static ARRAY_OF(t) INLINE BUF_FUN(read,pre)                                 \
                       (iallocate_t alloc, BUF_OF(t) buf)                       \
    {                                                                           \
        ARRAY_OF(t) out = ARRAY_FUN(create,pre)(alloc, buf->cur_size);          \
                                                                                \
        for (iint_t ix = 0; ix != buf->cur_size; ++ix)                          \
        {                                                                       \
            iint_t in = (buf->head + ix) % buf->max_size;                       \
            ARRAY_PAYLOAD(out,t)[ix] = BUF_PAYLOAD(buf,t)[in];                  \
        }                                                                       \
                                                                                \
        return out;                                                             \
    }



#define MAKE_BUF(t,pre)                                                         \
    MK_BUF_STRUCT (t)                                                           \
    MK_BUF_MAKE   (t,pre)                                                       \
    MK_BUF_PUSH   (t,pre)                                                       \
    MK_BUF_READ   (t,pre)                                                       \

MAKE_BUF(idouble_t,   idouble_)
MAKE_BUF(iint_t,      iint_)
MAKE_BUF(ierror_t,    ierror_)
MAKE_BUF(ibool_t,     ibool_)
MAKE_BUF(idate_t,     idate_)
MAKE_BUF(iunit_t,     iunit_)

#line 1 "state definition"
typedef struct {
    /* inputs */
    idate_t    gen_date;
    iint_t     new_count;
    ibool_t    *new_gen_fact_simp_37_simp_39;
    ierror_t   *new_gen_fact_simp_37_simp_40;
    iint_t     *new_gen_fact_simp_37_simp_41;
    idate_t    *new_gen_fact_simp_38;

    /* outputs */
    ibool_t    repl_ix_0;
    ierror_t   repl_ix_1;
    iint_t     repl_ix_2;

    /* resumables */
    ibool_t    has_acc_c_conv_13_simp_4;
    ibool_t    res_acc_c_conv_13_simp_4;
    ibool_t    has_acc_c_conv_13_simp_5;
    ierror_t   res_acc_c_conv_13_simp_5;
    ibool_t    has_acc_c_conv_13_simp_6;
    iint_t     res_acc_c_conv_13_simp_6;
} icicle_state_t;

#line 1 "compute function"
void compute(icicle_state_t *s)
{
    ibool_t    acc_c_conv_13_simp_13;
    ierror_t   acc_c_conv_13_simp_14;
    iint_t     acc_c_conv_13_simp_15;
    ibool_t    acc_c_conv_13_simp_4;
    ierror_t   acc_c_conv_13_simp_5;
    iint_t     acc_c_conv_13_simp_6;
    ibool_t    c_conv_13_simp_34;
    ierror_t   c_conv_13_simp_35;
    iint_t     c_conv_13_simp_36;
    ibool_t    flat_1;
    ibool_t    flat_0_simp_10;
    ibool_t    flat_0_simp_12;
    ibool_t    flat_0_simp_7;
    ibool_t    flat_0_simp_9;
    ibool_t    flat_2_simp_16;
    ierror_t   flat_2_simp_17;
    iint_t     flat_2_simp_18;
    ibool_t    flat_2_simp_31;
    ierror_t   flat_2_simp_32;
    iint_t     flat_2_simp_33;
    ibool_t    flat_5_simp_19;
    ierror_t   flat_5_simp_20;
    iint_t     flat_5_simp_21;
    ibool_t    flat_5_simp_22;
    ierror_t   flat_5_simp_23;
    iint_t     flat_5_simp_24;
    ibool_t    flat_6_simp_25;
    ierror_t   flat_6_simp_26;
    iint_t     flat_6_simp_27;
    ibool_t    flat_6_simp_28;
    ierror_t   flat_6_simp_29;
    iint_t     flat_6_simp_30;

    acc_c_conv_13_simp_4                 = itrue;                                /* init */
    acc_c_conv_13_simp_5                 = ierror_tombstone;                     /* init */
    acc_c_conv_13_simp_6                 = 0;                                    /* init */
    
    if (s->has_acc_c_conv_13_simp_4) {
        acc_c_conv_13_simp_4             = s->res_acc_c_conv_13_simp_4;          /* load */
    }
    
    if (s->has_acc_c_conv_13_simp_5) {
        acc_c_conv_13_simp_5             = s->res_acc_c_conv_13_simp_5;          /* load */
    }
    
    if (s->has_acc_c_conv_13_simp_6) {
        acc_c_conv_13_simp_6             = s->res_acc_c_conv_13_simp_6;          /* load */
    }
    
    const iint_t    new_count            = s->new_count;
    const ibool_t   *const new_gen_fact_simp_37_simp_39 = s->new_gen_fact_simp_37_simp_39;
    const ierror_t  *const new_gen_fact_simp_37_simp_40 = s->new_gen_fact_simp_37_simp_40;
    const iint_t    *const new_gen_fact_simp_37_simp_41 = s->new_gen_fact_simp_37_simp_41;
    const idate_t   *const new_gen_fact_simp_38 = s->new_gen_fact_simp_38;
    
    for (iint_t i = 0; i < new_count; i++) {
        ibool_t    gen_fact_simp_37_simp_39 = new_gen_fact_simp_37_simp_39[i];
        ierror_t   gen_fact_simp_37_simp_40 = new_gen_fact_simp_37_simp_40[i];
        iint_t     gen_fact_simp_37_simp_41 = new_gen_fact_simp_37_simp_41[i];
        idate_t    gen_fact_simp_38      = new_gen_fact_simp_38[i];
        flat_0_simp_7                    = ifalse;                               /* init */
        flat_0_simp_9                    = ifalse;                               /* init */
        
        if (gen_fact_simp_37_simp_39) {
            ibool_t    simp_1            = iint_gt (gen_fact_simp_37_simp_41, 300); /* let */
            flat_0_simp_7                = itrue;                                /* write */
            flat_0_simp_9                = simp_1;                               /* write */
        } else {
            flat_0_simp_7                = ifalse;                               /* write */
            flat_0_simp_9                = ifalse;                               /* write */
        }
        
        flat_0_simp_10                   = flat_0_simp_7;                        /* read */
        flat_0_simp_12                   = flat_0_simp_9;                        /* read */
        flat_1                           = ifalse;                               /* init */
        
        if (flat_0_simp_10) {
            flat_1                       = flat_0_simp_12;                       /* write */
        } else {
            flat_1                       = itrue;                                /* write */
        }
        
        flat_1                           = flat_1;                               /* read */
        
        if (flat_1) {
            acc_c_conv_13_simp_13        = acc_c_conv_13_simp_4;                 /* read */
            acc_c_conv_13_simp_14        = acc_c_conv_13_simp_5;                 /* read */
            acc_c_conv_13_simp_15        = acc_c_conv_13_simp_6;                 /* read */
            flat_2_simp_16               = ifalse;                               /* init */
            flat_2_simp_17               = ierror_tombstone;                     /* init */
            flat_2_simp_18               = 0;                                    /* init */
            
            if (gen_fact_simp_37_simp_39) {
                flat_5_simp_19           = ifalse;                               /* init */
                flat_5_simp_20           = ierror_tombstone;                     /* init */
                flat_5_simp_21           = 0;                                    /* init */
                
                if (acc_c_conv_13_simp_13) {
                    iint_t     simp_3    = iint_add (acc_c_conv_13_simp_15, 1);  /* let */
                    flat_5_simp_19       = itrue;                                /* write */
                    flat_5_simp_20       = ierror_tombstone;                     /* write */
                    flat_5_simp_21       = simp_3;                               /* write */
                } else {
                    flat_5_simp_19       = ifalse;                               /* write */
                    flat_5_simp_20       = acc_c_conv_13_simp_14;                /* write */
                    flat_5_simp_21       = 0;                                    /* write */
                }
                
                flat_5_simp_22           = flat_5_simp_19;                       /* read */
                flat_5_simp_23           = flat_5_simp_20;                       /* read */
                flat_5_simp_24           = flat_5_simp_21;                       /* read */
                flat_6_simp_25           = ifalse;                               /* init */
                flat_6_simp_26           = ierror_tombstone;                     /* init */
                flat_6_simp_27           = 0;                                    /* init */
                
                if (flat_5_simp_22) {
                    flat_6_simp_25       = itrue;                                /* write */
                    flat_6_simp_26       = ierror_tombstone;                     /* write */
                    flat_6_simp_27       = flat_5_simp_24;                       /* write */
                } else {
                    flat_6_simp_25       = ifalse;                               /* write */
                    flat_6_simp_26       = flat_5_simp_23;                       /* write */
                    flat_6_simp_27       = 0;                                    /* write */
                }
                
                flat_6_simp_28           = flat_6_simp_25;                       /* read */
                flat_6_simp_29           = flat_6_simp_26;                       /* read */
                flat_6_simp_30           = flat_6_simp_27;                       /* read */
                flat_2_simp_16           = flat_6_simp_28;                       /* write */
                flat_2_simp_17           = flat_6_simp_29;                       /* write */
                flat_2_simp_18           = flat_6_simp_30;                       /* write */
            } else {
                flat_2_simp_16           = ifalse;                               /* write */
                flat_2_simp_17           = gen_fact_simp_37_simp_40;             /* write */
                flat_2_simp_18           = 0;                                    /* write */
            }
            
            flat_2_simp_31               = flat_2_simp_16;                       /* read */
            flat_2_simp_32               = flat_2_simp_17;                       /* read */
            flat_2_simp_33               = flat_2_simp_18;                       /* read */
            acc_c_conv_13_simp_4         = flat_2_simp_31;                       /* write */
            acc_c_conv_13_simp_5         = flat_2_simp_32;                       /* write */
            acc_c_conv_13_simp_6         = flat_2_simp_33;                       /* write */
        }
        
    }
    
    s->has_acc_c_conv_13_simp_4          = itrue;                                /* save */
    s->res_acc_c_conv_13_simp_4          = acc_c_conv_13_simp_4;                 /* save */
    
    s->has_acc_c_conv_13_simp_5          = itrue;                                /* save */
    s->res_acc_c_conv_13_simp_5          = acc_c_conv_13_simp_5;                 /* save */
    
    s->has_acc_c_conv_13_simp_6          = itrue;                                /* save */
    s->res_acc_c_conv_13_simp_6          = acc_c_conv_13_simp_6;                 /* save */
    
    c_conv_13_simp_34                    = acc_c_conv_13_simp_4;                 /* read */
    c_conv_13_simp_35                    = acc_c_conv_13_simp_5;                 /* read */
    c_conv_13_simp_36                    = acc_c_conv_13_simp_6;                 /* read */
    s->repl_ix_0                         = c_conv_13_simp_34;                    /* output */
    s->repl_ix_1                         = c_conv_13_simp_35;                    /* output */
    s->repl_ix_2                         = c_conv_13_simp_36;                    /* output */
}

- C evaluation:
[(homer,2),(marge,0)]

- Core evaluation:
[homer, 2,marge, 0]

> > -- An interesting expression
> - Flattened:
gen$date = DATE
{
  init acc$a$conv$12$simp$62@{Mutable Bool} = True@{Bool};
  init acc$a$conv$12$simp$63@{Mutable Error} = ExceptTombstone@{Error};
  init acc$a$conv$12$simp$64$simp$65$simp$67@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$12$simp$64$simp$65$simp$68@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$12$simp$64$simp$66@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$105$simp$69@{Mutable Bool} = True@{Bool};
  init acc$a$conv$105$simp$70@{Mutable Error} = ExceptTombstone@{Error};
  init acc$a$conv$105$simp$71$simp$72$simp$74@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$105$simp$71$simp$72$simp$75@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$105$simp$71$simp$73@{Mutable Double} = 0.0@{Double};
  load_resumable@{Bool} acc$a$conv$12$simp$62;
  load_resumable@{Error} acc$a$conv$12$simp$63;
  load_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$67;
  load_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$68;
  load_resumable@{Double} acc$a$conv$12$simp$64$simp$66;
  load_resumable@{Bool} acc$a$conv$105$simp$69;
  load_resumable@{Error} acc$a$conv$105$simp$70;
  load_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$74;
  load_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$75;
  load_resumable@{Double} acc$a$conv$105$simp$71$simp$73;
  for_facts (gen$fact$simp$358$simp$360@{Bool},
             gen$fact$simp$358$simp$361@{Error},
             gen$fact$simp$358$simp$362@{Int},
             gen$fact$simp$359@{DateTime}) in new {
    init flat$0$simp$76@{Mutable Bool} = False@{Bool};
    init flat$0$simp$77@{Mutable Error} = ExceptTombstone@{Error};
    init flat$0$simp$78@{Mutable Double} = 0.0@{Double};
    if (gen$fact$simp$358$simp$360) {
      let simp$1 = doubleOfInt#
                   gen$fact$simp$358$simp$362;
      write flat$0$simp$76 = True@{Bool};
      write flat$0$simp$77 = ExceptTombstone@{Error};
      write flat$0$simp$78 = simp$1;
    } else {
      write flat$0$simp$76 = False@{Bool};
      write flat$0$simp$77 = gen$fact$simp$358$simp$361;
      write flat$0$simp$78 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$0$simp$79 = flat$0$simp$76;
    read@{Mutable Error} flat$0$simp$80 = flat$0$simp$77;
    read@{Mutable Double} flat$0$simp$81 = flat$0$simp$78;
    read@{Mutable Bool} acc$a$conv$12$simp$82 = acc$a$conv$12$simp$62;
    read@{Mutable Error} acc$a$conv$12$simp$83 = acc$a$conv$12$simp$63;
    read@{Mutable Double} acc$a$conv$12$simp$84$simp$85$simp$87 = acc$a$conv$12$simp$64$simp$65$simp$67;
    read@{Mutable Double} acc$a$conv$12$simp$84$simp$85$simp$88 = acc$a$conv$12$simp$64$simp$65$simp$68;
    read@{Mutable Double} acc$a$conv$12$simp$84$simp$86 = acc$a$conv$12$simp$64$simp$66;
    init flat$1$simp$89@{Mutable Bool} = False@{Bool};
    init flat$1$simp$90@{Mutable Error} = ExceptTombstone@{Error};
    init flat$1$simp$91$simp$92$simp$94@{Mutable Double} = 0.0@{Double};
    init flat$1$simp$91$simp$92$simp$95@{Mutable Double} = 0.0@{Double};
    init flat$1$simp$91$simp$93@{Mutable Double} = 0.0@{Double};
    if (acc$a$conv$12$simp$82) {
      let nn$conv$19 = add#@{Double}
                       acc$a$conv$12$simp$84$simp$85$simp$87
                       (1.0@{Double});
      init flat$4$simp$96@{Mutable Bool} = False@{Bool};
      init flat$4$simp$97@{Mutable Error} = ExceptTombstone@{Error};
      init flat$4$simp$98@{Mutable Double} = 0.0@{Double};
      if (flat$0$simp$79) {
        let simp$7 = sub#@{Double}
                     flat$0$simp$81
                     acc$a$conv$12$simp$84$simp$85$simp$88;
        write flat$4$simp$96 = True@{Bool};
        write flat$4$simp$97 = ExceptTombstone@{Error};
        write flat$4$simp$98 = simp$7;
      } else {
        write flat$4$simp$96 = False@{Bool};
        write flat$4$simp$97 = flat$0$simp$80;
        write flat$4$simp$98 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$4$simp$99 = flat$4$simp$96;
      read@{Mutable Error} flat$4$simp$100 = flat$4$simp$97;
      read@{Mutable Double} flat$4$simp$101 = flat$4$simp$98;
      init flat$5$simp$102@{Mutable Bool} = False@{Bool};
      init flat$5$simp$103@{Mutable Error} = ExceptTombstone@{Error};
      init flat$5$simp$104@{Mutable Double} = 0.0@{Double};
      if (flat$4$simp$99) {
        let simp$11 = div#
                      flat$4$simp$101 nn$conv$19;
        write flat$5$simp$102 = True@{Bool};
        write flat$5$simp$103 = ExceptTombstone@{Error};
        write flat$5$simp$104 = simp$11;
      } else {
        write flat$5$simp$102 = False@{Bool};
        write flat$5$simp$103 = flat$4$simp$100;
        write flat$5$simp$104 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$5$simp$105 = flat$5$simp$102;
      read@{Mutable Error} flat$5$simp$106 = flat$5$simp$103;
      read@{Mutable Double} flat$5$simp$107 = flat$5$simp$104;
      init flat$6$simp$108@{Mutable Bool} = False@{Bool};
      init flat$6$simp$109@{Mutable Error} = ExceptTombstone@{Error};
      init flat$6$simp$110@{Mutable Double} = 0.0@{Double};
      if (flat$5$simp$105) {
        let simp$13 = add#@{Double}
                      acc$a$conv$12$simp$84$simp$85$simp$88
                      flat$5$simp$107;
        write flat$6$simp$108 = True@{Bool};
        write flat$6$simp$109 = ExceptTombstone@{Error};
        write flat$6$simp$110 = simp$13;
      } else {
        write flat$6$simp$108 = False@{Bool};
        write flat$6$simp$109 = flat$5$simp$106;
        write flat$6$simp$110 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$6$simp$111 = flat$6$simp$108;
      read@{Mutable Error} flat$6$simp$112 = flat$6$simp$109;
      read@{Mutable Double} flat$6$simp$113 = flat$6$simp$110;
      init flat$7$simp$114@{Mutable Bool} = False@{Bool};
      init flat$7$simp$115@{Mutable Error} = ExceptTombstone@{Error};
      init flat$7$simp$116@{Mutable Double} = 0.0@{Double};
      if (flat$4$simp$99) {
        init flat$22$simp$117@{Mutable Bool} = False@{Bool};
        init flat$22$simp$118@{Mutable Error} = ExceptTombstone@{Error};
        init flat$22$simp$119@{Mutable Double} = 0.0@{Double};
        if (flat$0$simp$79) {
          init flat$28$simp$120@{Mutable Bool} = False@{Bool};
          init flat$28$simp$121@{Mutable Error} = ExceptTombstone@{Error};
          init flat$28$simp$122@{Mutable Double} = 0.0@{Double};
          if (flat$6$simp$111) {
            let simp$19 = sub#@{Double}
                          flat$0$simp$81 flat$6$simp$113;
            write flat$28$simp$120 = True@{Bool};
            write flat$28$simp$121 = ExceptTombstone@{Error};
            write flat$28$simp$122 = simp$19;
          } else {
            write flat$28$simp$120 = False@{Bool};
            write flat$28$simp$121 = flat$6$simp$112;
            write flat$28$simp$122 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$28$simp$123 = flat$28$simp$120;
          read@{Mutable Error} flat$28$simp$124 = flat$28$simp$121;
          read@{Mutable Double} flat$28$simp$125 = flat$28$simp$122;
          write flat$22$simp$117 = flat$28$simp$123;
          write flat$22$simp$118 = flat$28$simp$124;
          write flat$22$simp$119 = flat$28$simp$125;
        } else {
          write flat$22$simp$117 = False@{Bool};
          write flat$22$simp$118 = flat$0$simp$80;
          write flat$22$simp$119 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$22$simp$126 = flat$22$simp$117;
        read@{Mutable Error} flat$22$simp$127 = flat$22$simp$118;
        read@{Mutable Double} flat$22$simp$128 = flat$22$simp$119;
        init flat$23$simp$129@{Mutable Bool} = False@{Bool};
        init flat$23$simp$130@{Mutable Error} = ExceptTombstone@{Error};
        init flat$23$simp$131@{Mutable Double} = 0.0@{Double};
        if (flat$22$simp$126) {
          let simp$23 = mul#@{Double}
                        flat$4$simp$101
                        flat$22$simp$128;
          write flat$23$simp$129 = True@{Bool};
          write flat$23$simp$130 = ExceptTombstone@{Error};
          write flat$23$simp$131 = simp$23;
        } else {
          write flat$23$simp$129 = False@{Bool};
          write flat$23$simp$130 = flat$22$simp$127;
          write flat$23$simp$131 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$23$simp$132 = flat$23$simp$129;
        read@{Mutable Error} flat$23$simp$133 = flat$23$simp$130;
        read@{Mutable Double} flat$23$simp$134 = flat$23$simp$131;
        write flat$7$simp$114 = flat$23$simp$132;
        write flat$7$simp$115 = flat$23$simp$133;
        write flat$7$simp$116 = flat$23$simp$134;
      } else {
        write flat$7$simp$114 = False@{Bool};
        write flat$7$simp$115 = flat$4$simp$100;
        write flat$7$simp$116 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$7$simp$135 = flat$7$simp$114;
      read@{Mutable Error} flat$7$simp$136 = flat$7$simp$115;
      read@{Mutable Double} flat$7$simp$137 = flat$7$simp$116;
      init flat$8$simp$138@{Mutable Bool} = False@{Bool};
      init flat$8$simp$139@{Mutable Error} = ExceptTombstone@{Error};
      init flat$8$simp$140@{Mutable Double} = 0.0@{Double};
      if (flat$7$simp$135) {
        let simp$25 = add#@{Double}
                      acc$a$conv$12$simp$84$simp$86
                      flat$7$simp$137;
        write flat$8$simp$138 = True@{Bool};
        write flat$8$simp$139 = ExceptTombstone@{Error};
        write flat$8$simp$140 = simp$25;
      } else {
        write flat$8$simp$138 = False@{Bool};
        write flat$8$simp$139 = flat$7$simp$136;
        write flat$8$simp$140 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$8$simp$141 = flat$8$simp$138;
      read@{Mutable Error} flat$8$simp$142 = flat$8$simp$139;
      read@{Mutable Double} flat$8$simp$143 = flat$8$simp$140;
      init flat$9$simp$144@{Mutable Bool} = False@{Bool};
      init flat$9$simp$145@{Mutable Error} = ExceptTombstone@{Error};
      init flat$9$simp$146$simp$147@{Mutable Double} = 0.0@{Double};
      init flat$9$simp$146$simp$148@{Mutable Double} = 0.0@{Double};
      if (flat$6$simp$111) {
        write flat$9$simp$144 = True@{Bool};
        write flat$9$simp$145 = ExceptTombstone@{Error};
        write flat$9$simp$146$simp$147 = nn$conv$19;
        write flat$9$simp$146$simp$148 = flat$6$simp$113;
      } else {
        write flat$9$simp$144 = False@{Bool};
        write flat$9$simp$145 = flat$6$simp$112;
        write flat$9$simp$146$simp$147 = 0.0@{Double};
        write flat$9$simp$146$simp$148 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$9$simp$149 = flat$9$simp$144;
      read@{Mutable Error} flat$9$simp$150 = flat$9$simp$145;
      read@{Mutable Double} flat$9$simp$151$simp$152 = flat$9$simp$146$simp$147;
      read@{Mutable Double} flat$9$simp$151$simp$153 = flat$9$simp$146$simp$148;
      init flat$10$simp$154@{Mutable Bool} = False@{Bool};
      init flat$10$simp$155@{Mutable Error} = ExceptTombstone@{Error};
      init flat$10$simp$156$simp$157$simp$159@{Mutable Double} = 0.0@{Double};
      init flat$10$simp$156$simp$157$simp$160@{Mutable Double} = 0.0@{Double};
      init flat$10$simp$156$simp$158@{Mutable Double} = 0.0@{Double};
      if (flat$9$simp$149) {
        init flat$13$simp$161@{Mutable Bool} = False@{Bool};
        init flat$13$simp$162@{Mutable Error} = ExceptTombstone@{Error};
        init flat$13$simp$163$simp$164$simp$166@{Mutable Double} = 0.0@{Double};
        init flat$13$simp$163$simp$164$simp$167@{Mutable Double} = 0.0@{Double};
        init flat$13$simp$163$simp$165@{Mutable Double} = 0.0@{Double};
        if (flat$8$simp$141) {
          write flat$13$simp$161 = True@{Bool};
          write flat$13$simp$162 = ExceptTombstone@{Error};
          write flat$13$simp$163$simp$164$simp$166 = flat$9$simp$151$simp$152;
          write flat$13$simp$163$simp$164$simp$167 = flat$9$simp$151$simp$153;
          write flat$13$simp$163$simp$165 = flat$8$simp$143;
        } else {
          write flat$13$simp$161 = False@{Bool};
          write flat$13$simp$162 = flat$8$simp$142;
          write flat$13$simp$163$simp$164$simp$166 = 0.0@{Double};
          write flat$13$simp$163$simp$164$simp$167 = 0.0@{Double};
          write flat$13$simp$163$simp$165 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$13$simp$168 = flat$13$simp$161;
        read@{Mutable Error} flat$13$simp$169 = flat$13$simp$162;
        read@{Mutable Double} flat$13$simp$170$simp$171$simp$173 = flat$13$simp$163$simp$164$simp$166;
        read@{Mutable Double} flat$13$simp$170$simp$171$simp$174 = flat$13$simp$163$simp$164$simp$167;
        read@{Mutable Double} flat$13$simp$170$simp$172 = flat$13$simp$163$simp$165;
        write flat$10$simp$154 = flat$13$simp$168;
        write flat$10$simp$155 = flat$13$simp$169;
        write flat$10$simp$156$simp$157$simp$159 = flat$13$simp$170$simp$171$simp$173;
        write flat$10$simp$156$simp$157$simp$160 = flat$13$simp$170$simp$171$simp$174;
        write flat$10$simp$156$simp$158 = flat$13$simp$170$simp$172;
      } else {
        write flat$10$simp$154 = False@{Bool};
        write flat$10$simp$155 = flat$9$simp$150;
        write flat$10$simp$156$simp$157$simp$159 = 0.0@{Double};
        write flat$10$simp$156$simp$157$simp$160 = 0.0@{Double};
        write flat$10$simp$156$simp$158 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$10$simp$175 = flat$10$simp$154;
      read@{Mutable Error} flat$10$simp$176 = flat$10$simp$155;
      read@{Mutable Double} flat$10$simp$177$simp$178$simp$180 = flat$10$simp$156$simp$157$simp$159;
      read@{Mutable Double} flat$10$simp$177$simp$178$simp$181 = flat$10$simp$156$simp$157$simp$160;
      read@{Mutable Double} flat$10$simp$177$simp$179 = flat$10$simp$156$simp$158;
      write flat$1$simp$89 = flat$10$simp$175;
      write flat$1$simp$90 = flat$10$simp$176;
      write flat$1$simp$91$simp$92$simp$94 = flat$10$simp$177$simp$178$simp$180;
      write flat$1$simp$91$simp$92$simp$95 = flat$10$simp$177$simp$178$simp$181;
      write flat$1$simp$91$simp$93 = flat$10$simp$177$simp$179;
    } else {
      write flat$1$simp$89 = False@{Bool};
      write flat$1$simp$90 = acc$a$conv$12$simp$83;
      write flat$1$simp$91$simp$92$simp$94 = 0.0@{Double};
      write flat$1$simp$91$simp$92$simp$95 = 0.0@{Double};
      write flat$1$simp$91$simp$93 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$1$simp$182 = flat$1$simp$89;
    read@{Mutable Error} flat$1$simp$183 = flat$1$simp$90;
    read@{Mutable Double} flat$1$simp$184$simp$185$simp$187 = flat$1$simp$91$simp$92$simp$94;
    read@{Mutable Double} flat$1$simp$184$simp$185$simp$188 = flat$1$simp$91$simp$92$simp$95;
    read@{Mutable Double} flat$1$simp$184$simp$186 = flat$1$simp$91$simp$93;
    write acc$a$conv$12$simp$62 = flat$1$simp$182;
    write acc$a$conv$12$simp$63 = flat$1$simp$183;
    write acc$a$conv$12$simp$64$simp$65$simp$67 = flat$1$simp$184$simp$185$simp$187;
    write acc$a$conv$12$simp$64$simp$65$simp$68 = flat$1$simp$184$simp$185$simp$188;
    write acc$a$conv$12$simp$64$simp$66 = flat$1$simp$184$simp$186;
    init flat$37$simp$189@{Mutable Bool} = False@{Bool};
    init flat$37$simp$191@{Mutable Bool} = False@{Bool};
    if (gen$fact$simp$358$simp$360) {
      let simp$31 = lt#@{Int}
                    gen$fact$simp$358$simp$362
                    (300@{Int});
      write flat$37$simp$189 = True@{Bool};
      write flat$37$simp$191 = simp$31;
    } else {
      write flat$37$simp$189 = False@{Bool};
      write flat$37$simp$191 = False@{Bool};
    }
    read@{Mutable Bool} flat$37$simp$192 = flat$37$simp$189;
    read@{Mutable Bool} flat$37$simp$194 = flat$37$simp$191;
    init flat$38@{Mutable Bool} = False@{Bool};
    if (flat$37$simp$192) {
      write flat$38 = flat$37$simp$194;
    } 
     else {
      write flat$38 = True@{Bool};
    } 
    
    read@{Mutable Bool} flat$38 = flat$38;
    if (flat$38) {
      init flat$39$simp$195@{Mutable Bool} = False@{Bool};
      init flat$39$simp$196@{Mutable Error} = ExceptTombstone@{Error};
      init flat$39$simp$197@{Mutable Double} = 0.0@{Double};
      if (gen$fact$simp$358$simp$360) {
        let simp$33 = doubleOfInt#
                      gen$fact$simp$358$simp$362;
        write flat$39$simp$195 = True@{Bool};
        write flat$39$simp$196 = ExceptTombstone@{Error};
        write flat$39$simp$197 = simp$33;
      } else {
        write flat$39$simp$195 = False@{Bool};
        write flat$39$simp$196 = gen$fact$simp$358$simp$361;
        write flat$39$simp$197 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$39$simp$198 = flat$39$simp$195;
      read@{Mutable Error} flat$39$simp$199 = flat$39$simp$196;
      read@{Mutable Double} flat$39$simp$200 = flat$39$simp$197;
      read@{Mutable Bool} acc$a$conv$105$simp$201 = acc$a$conv$105$simp$69;
      read@{Mutable Error} acc$a$conv$105$simp$202 = acc$a$conv$105$simp$70;
      read@{Mutable Double} acc$a$conv$105$simp$203$simp$204$simp$206 = acc$a$conv$105$simp$71$simp$72$simp$74;
      read@{Mutable Double} acc$a$conv$105$simp$203$simp$204$simp$207 = acc$a$conv$105$simp$71$simp$72$simp$75;
      read@{Mutable Double} acc$a$conv$105$simp$203$simp$205 = acc$a$conv$105$simp$71$simp$73;
      init flat$40$simp$208@{Mutable Bool} = False@{Bool};
      init flat$40$simp$209@{Mutable Error} = ExceptTombstone@{Error};
      init flat$40$simp$210$simp$211$simp$213@{Mutable Double} = 0.0@{Double};
      init flat$40$simp$210$simp$211$simp$214@{Mutable Double} = 0.0@{Double};
      init flat$40$simp$210$simp$212@{Mutable Double} = 0.0@{Double};
      if (acc$a$conv$105$simp$201) {
        let nn$conv$112 = add#@{Double}
                          acc$a$conv$105$simp$203$simp$204$simp$206
                          (1.0@{Double});
        init flat$43$simp$215@{Mutable Bool} = False@{Bool};
        init flat$43$simp$216@{Mutable Error} = ExceptTombstone@{Error};
        init flat$43$simp$217@{Mutable Double} = 0.0@{Double};
        if (flat$39$simp$198) {
          let simp$39 = sub#@{Double}
                        flat$39$simp$200
                        acc$a$conv$105$simp$203$simp$204$simp$207;
          write flat$43$simp$215 = True@{Bool};
          write flat$43$simp$216 = ExceptTombstone@{Error};
          write flat$43$simp$217 = simp$39;
        } else {
          write flat$43$simp$215 = False@{Bool};
          write flat$43$simp$216 = flat$39$simp$199;
          write flat$43$simp$217 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$43$simp$218 = flat$43$simp$215;
        read@{Mutable Error} flat$43$simp$219 = flat$43$simp$216;
        read@{Mutable Double} flat$43$simp$220 = flat$43$simp$217;
        init flat$44$simp$221@{Mutable Bool} = False@{Bool};
        init flat$44$simp$222@{Mutable Error} = ExceptTombstone@{Error};
        init flat$44$simp$223@{Mutable Double} = 0.0@{Double};
        if (flat$43$simp$218) {
          let simp$43 = div#
                        flat$43$simp$220 nn$conv$112;
          write flat$44$simp$221 = True@{Bool};
          write flat$44$simp$222 = ExceptTombstone@{Error};
          write flat$44$simp$223 = simp$43;
        } else {
          write flat$44$simp$221 = False@{Bool};
          write flat$44$simp$222 = flat$43$simp$219;
          write flat$44$simp$223 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$44$simp$224 = flat$44$simp$221;
        read@{Mutable Error} flat$44$simp$225 = flat$44$simp$222;
        read@{Mutable Double} flat$44$simp$226 = flat$44$simp$223;
        init flat$45$simp$227@{Mutable Bool} = False@{Bool};
        init flat$45$simp$228@{Mutable Error} = ExceptTombstone@{Error};
        init flat$45$simp$229@{Mutable Double} = 0.0@{Double};
        if (flat$44$simp$224) {
          let simp$45 = add#@{Double}
                        acc$a$conv$105$simp$203$simp$204$simp$207
                        flat$44$simp$226;
          write flat$45$simp$227 = True@{Bool};
          write flat$45$simp$228 = ExceptTombstone@{Error};
          write flat$45$simp$229 = simp$45;
        } else {
          write flat$45$simp$227 = False@{Bool};
          write flat$45$simp$228 = flat$44$simp$225;
          write flat$45$simp$229 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$45$simp$230 = flat$45$simp$227;
        read@{Mutable Error} flat$45$simp$231 = flat$45$simp$228;
        read@{Mutable Double} flat$45$simp$232 = flat$45$simp$229;
        init flat$46$simp$233@{Mutable Bool} = False@{Bool};
        init flat$46$simp$234@{Mutable Error} = ExceptTombstone@{Error};
        init flat$46$simp$235@{Mutable Double} = 0.0@{Double};
        if (flat$43$simp$218) {
          init flat$61$simp$236@{Mutable Bool} = False@{Bool};
          init flat$61$simp$237@{Mutable Error} = ExceptTombstone@{Error};
          init flat$61$simp$238@{Mutable Double} = 0.0@{Double};
          if (flat$39$simp$198) {
            init flat$67$simp$239@{Mutable Bool} = False@{Bool};
            init flat$67$simp$240@{Mutable Error} = ExceptTombstone@{Error};
            init flat$67$simp$241@{Mutable Double} = 0.0@{Double};
            if (flat$45$simp$230) {
              let simp$51 = sub#@{Double}
                            flat$39$simp$200
                            flat$45$simp$232;
              write flat$67$simp$239 = True@{Bool};
              write flat$67$simp$240 = ExceptTombstone@{Error};
              write flat$67$simp$241 = simp$51;
            } else {
              write flat$67$simp$239 = False@{Bool};
              write flat$67$simp$240 = flat$45$simp$231;
              write flat$67$simp$241 = 0.0@{Double};
            }
            read@{Mutable Bool} flat$67$simp$242 = flat$67$simp$239;
            read@{Mutable Error} flat$67$simp$243 = flat$67$simp$240;
            read@{Mutable Double} flat$67$simp$244 = flat$67$simp$241;
            write flat$61$simp$236 = flat$67$simp$242;
            write flat$61$simp$237 = flat$67$simp$243;
            write flat$61$simp$238 = flat$67$simp$244;
          } else {
            write flat$61$simp$236 = False@{Bool};
            write flat$61$simp$237 = flat$39$simp$199;
            write flat$61$simp$238 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$61$simp$245 = flat$61$simp$236;
          read@{Mutable Error} flat$61$simp$246 = flat$61$simp$237;
          read@{Mutable Double} flat$61$simp$247 = flat$61$simp$238;
          init flat$62$simp$248@{Mutable Bool} = False@{Bool};
          init flat$62$simp$249@{Mutable Error} = ExceptTombstone@{Error};
          init flat$62$simp$250@{Mutable Double} = 0.0@{Double};
          if (flat$61$simp$245) {
            let simp$55 = mul#@{Double}
                          flat$43$simp$220
                          flat$61$simp$247;
            write flat$62$simp$248 = True@{Bool};
            write flat$62$simp$249 = ExceptTombstone@{Error};
            write flat$62$simp$250 = simp$55;
          } else {
            write flat$62$simp$248 = False@{Bool};
            write flat$62$simp$249 = flat$61$simp$246;
            write flat$62$simp$250 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$62$simp$251 = flat$62$simp$248;
          read@{Mutable Error} flat$62$simp$252 = flat$62$simp$249;
          read@{Mutable Double} flat$62$simp$253 = flat$62$simp$250;
          write flat$46$simp$233 = flat$62$simp$251;
          write flat$46$simp$234 = flat$62$simp$252;
          write flat$46$simp$235 = flat$62$simp$253;
        } else {
          write flat$46$simp$233 = False@{Bool};
          write flat$46$simp$234 = flat$43$simp$219;
          write flat$46$simp$235 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$46$simp$254 = flat$46$simp$233;
        read@{Mutable Error} flat$46$simp$255 = flat$46$simp$234;
        read@{Mutable Double} flat$46$simp$256 = flat$46$simp$235;
        init flat$47$simp$257@{Mutable Bool} = False@{Bool};
        init flat$47$simp$258@{Mutable Error} = ExceptTombstone@{Error};
        init flat$47$simp$259@{Mutable Double} = 0.0@{Double};
        if (flat$46$simp$254) {
          let simp$57 = add#@{Double}
                        acc$a$conv$105$simp$203$simp$205
                        flat$46$simp$256;
          write flat$47$simp$257 = True@{Bool};
          write flat$47$simp$258 = ExceptTombstone@{Error};
          write flat$47$simp$259 = simp$57;
        } else {
          write flat$47$simp$257 = False@{Bool};
          write flat$47$simp$258 = flat$46$simp$255;
          write flat$47$simp$259 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$47$simp$260 = flat$47$simp$257;
        read@{Mutable Error} flat$47$simp$261 = flat$47$simp$258;
        read@{Mutable Double} flat$47$simp$262 = flat$47$simp$259;
        init flat$48$simp$263@{Mutable Bool} = False@{Bool};
        init flat$48$simp$264@{Mutable Error} = ExceptTombstone@{Error};
        init flat$48$simp$265$simp$266@{Mutable Double} = 0.0@{Double};
        init flat$48$simp$265$simp$267@{Mutable Double} = 0.0@{Double};
        if (flat$45$simp$230) {
          write flat$48$simp$263 = True@{Bool};
          write flat$48$simp$264 = ExceptTombstone@{Error};
          write flat$48$simp$265$simp$266 = nn$conv$112;
          write flat$48$simp$265$simp$267 = flat$45$simp$232;
        } else {
          write flat$48$simp$263 = False@{Bool};
          write flat$48$simp$264 = flat$45$simp$231;
          write flat$48$simp$265$simp$266 = 0.0@{Double};
          write flat$48$simp$265$simp$267 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$48$simp$268 = flat$48$simp$263;
        read@{Mutable Error} flat$48$simp$269 = flat$48$simp$264;
        read@{Mutable Double} flat$48$simp$270$simp$271 = flat$48$simp$265$simp$266;
        read@{Mutable Double} flat$48$simp$270$simp$272 = flat$48$simp$265$simp$267;
        init flat$49$simp$273@{Mutable Bool} = False@{Bool};
        init flat$49$simp$274@{Mutable Error} = ExceptTombstone@{Error};
        init flat$49$simp$275$simp$276$simp$278@{Mutable Double} = 0.0@{Double};
        init flat$49$simp$275$simp$276$simp$279@{Mutable Double} = 0.0@{Double};
        init flat$49$simp$275$simp$277@{Mutable Double} = 0.0@{Double};
        if (flat$48$simp$268) {
          init flat$52$simp$280@{Mutable Bool} = False@{Bool};
          init flat$52$simp$281@{Mutable Error} = ExceptTombstone@{Error};
          init flat$52$simp$282$simp$283$simp$285@{Mutable Double} = 0.0@{Double};
          init flat$52$simp$282$simp$283$simp$286@{Mutable Double} = 0.0@{Double};
          init flat$52$simp$282$simp$284@{Mutable Double} = 0.0@{Double};
          if (flat$47$simp$260) {
            write flat$52$simp$280 = True@{Bool};
            write flat$52$simp$281 = ExceptTombstone@{Error};
            write flat$52$simp$282$simp$283$simp$285 = flat$48$simp$270$simp$271;
            write flat$52$simp$282$simp$283$simp$286 = flat$48$simp$270$simp$272;
            write flat$52$simp$282$simp$284 = flat$47$simp$262;
          } else {
            write flat$52$simp$280 = False@{Bool};
            write flat$52$simp$281 = flat$47$simp$261;
            write flat$52$simp$282$simp$283$simp$285 = 0.0@{Double};
            write flat$52$simp$282$simp$283$simp$286 = 0.0@{Double};
            write flat$52$simp$282$simp$284 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$52$simp$287 = flat$52$simp$280;
          read@{Mutable Error} flat$52$simp$288 = flat$52$simp$281;
          read@{Mutable Double} flat$52$simp$289$simp$290$simp$292 = flat$52$simp$282$simp$283$simp$285;
          read@{Mutable Double} flat$52$simp$289$simp$290$simp$293 = flat$52$simp$282$simp$283$simp$286;
          read@{Mutable Double} flat$52$simp$289$simp$291 = flat$52$simp$282$simp$284;
          write flat$49$simp$273 = flat$52$simp$287;
          write flat$49$simp$274 = flat$52$simp$288;
          write flat$49$simp$275$simp$276$simp$278 = flat$52$simp$289$simp$290$simp$292;
          write flat$49$simp$275$simp$276$simp$279 = flat$52$simp$289$simp$290$simp$293;
          write flat$49$simp$275$simp$277 = flat$52$simp$289$simp$291;
        } else {
          write flat$49$simp$273 = False@{Bool};
          write flat$49$simp$274 = flat$48$simp$269;
          write flat$49$simp$275$simp$276$simp$278 = 0.0@{Double};
          write flat$49$simp$275$simp$276$simp$279 = 0.0@{Double};
          write flat$49$simp$275$simp$277 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$49$simp$294 = flat$49$simp$273;
        read@{Mutable Error} flat$49$simp$295 = flat$49$simp$274;
        read@{Mutable Double} flat$49$simp$296$simp$297$simp$299 = flat$49$simp$275$simp$276$simp$278;
        read@{Mutable Double} flat$49$simp$296$simp$297$simp$300 = flat$49$simp$275$simp$276$simp$279;
        read@{Mutable Double} flat$49$simp$296$simp$298 = flat$49$simp$275$simp$277;
        write flat$40$simp$208 = flat$49$simp$294;
        write flat$40$simp$209 = flat$49$simp$295;
        write flat$40$simp$210$simp$211$simp$213 = flat$49$simp$296$simp$297$simp$299;
        write flat$40$simp$210$simp$211$simp$214 = flat$49$simp$296$simp$297$simp$300;
        write flat$40$simp$210$simp$212 = flat$49$simp$296$simp$298;
      } else {
        write flat$40$simp$208 = False@{Bool};
        write flat$40$simp$209 = acc$a$conv$105$simp$202;
        write flat$40$simp$210$simp$211$simp$213 = 0.0@{Double};
        write flat$40$simp$210$simp$211$simp$214 = 0.0@{Double};
        write flat$40$simp$210$simp$212 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$40$simp$301 = flat$40$simp$208;
      read@{Mutable Error} flat$40$simp$302 = flat$40$simp$209;
      read@{Mutable Double} flat$40$simp$303$simp$304$simp$306 = flat$40$simp$210$simp$211$simp$213;
      read@{Mutable Double} flat$40$simp$303$simp$304$simp$307 = flat$40$simp$210$simp$211$simp$214;
      read@{Mutable Double} flat$40$simp$303$simp$305 = flat$40$simp$210$simp$212;
      write acc$a$conv$105$simp$69 = flat$40$simp$301;
      write acc$a$conv$105$simp$70 = flat$40$simp$302;
      write acc$a$conv$105$simp$71$simp$72$simp$74 = flat$40$simp$303$simp$304$simp$306;
      write acc$a$conv$105$simp$71$simp$72$simp$75 = flat$40$simp$303$simp$304$simp$307;
      write acc$a$conv$105$simp$71$simp$73 = flat$40$simp$303$simp$305;
    }
  }
  save_resumable@{Bool} acc$a$conv$12$simp$62;
  save_resumable@{Error} acc$a$conv$12$simp$63;
  save_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$67;
  save_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$68;
  save_resumable@{Double} acc$a$conv$12$simp$64$simp$66;
  save_resumable@{Bool} acc$a$conv$105$simp$69;
  save_resumable@{Error} acc$a$conv$105$simp$70;
  save_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$74;
  save_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$75;
  save_resumable@{Double} acc$a$conv$105$simp$71$simp$73;
  read@{Mutable Bool} a$conv$12$simp$308 = acc$a$conv$12$simp$62;
  read@{Mutable Error} a$conv$12$simp$309 = acc$a$conv$12$simp$63;
  read@{Mutable Double} a$conv$12$simp$310$simp$311$simp$313 = acc$a$conv$12$simp$64$simp$65$simp$67;
  read@{Mutable Double} a$conv$12$simp$310$simp$312 = acc$a$conv$12$simp$64$simp$66;
  read@{Mutable Bool} a$conv$105$simp$315 = acc$a$conv$105$simp$69;
  read@{Mutable Error} a$conv$105$simp$316 = acc$a$conv$105$simp$70;
  read@{Mutable Double} a$conv$105$simp$317$simp$318$simp$320 = acc$a$conv$105$simp$71$simp$72$simp$74;
  read@{Mutable Double} a$conv$105$simp$317$simp$319 = acc$a$conv$105$simp$71$simp$73;
  init flat$84$simp$322@{Mutable Bool} = False@{Bool};
  init flat$84$simp$323@{Mutable Error} = ExceptTombstone@{Error};
  init flat$84$simp$324@{Mutable Double} = 0.0@{Double};
  if (a$conv$12$simp$308) {
    let conv$67 = sub#@{Double}
                  a$conv$12$simp$310$simp$311$simp$313
                  (1.0@{Double});
    let conv$68 = div#
                  a$conv$12$simp$310$simp$312
                  conv$67;
    write flat$84$simp$322 = True@{Bool};
    write flat$84$simp$323 = ExceptTombstone@{Error};
    write flat$84$simp$324 = conv$68;
  } else {
    write flat$84$simp$322 = False@{Bool};
    write flat$84$simp$323 = a$conv$12$simp$309;
    write flat$84$simp$324 = 0.0@{Double};
  }
  read@{Mutable Bool} flat$84$simp$325 = flat$84$simp$322;
  read@{Mutable Error} flat$84$simp$326 = flat$84$simp$323;
  read@{Mutable Double} flat$84$simp$327 = flat$84$simp$324;
  init flat$85$simp$328@{Mutable Bool} = False@{Bool};
  init flat$85$simp$329@{Mutable Error} = ExceptTombstone@{Error};
  init flat$85$simp$330@{Mutable Double} = 0.0@{Double};
  if (flat$84$simp$325) {
    let conv$80 = pow#@{Double}
                  flat$84$simp$327 (0.5@{Double});
    write flat$85$simp$328 = True@{Bool};
    write flat$85$simp$329 = ExceptTombstone@{Error};
    write flat$85$simp$330 = conv$80;
  } else {
    write flat$85$simp$328 = False@{Bool};
    write flat$85$simp$329 = flat$84$simp$326;
    write flat$85$simp$330 = 0.0@{Double};
  }
  read@{Mutable Bool} flat$85$simp$331 = flat$85$simp$328;
  read@{Mutable Error} flat$85$simp$332 = flat$85$simp$329;
  read@{Mutable Double} flat$85$simp$333 = flat$85$simp$330;
  init flat$86$simp$334@{Mutable Bool} = False@{Bool};
  init flat$86$simp$335@{Mutable Error} = ExceptTombstone@{Error};
  init flat$86$simp$336@{Mutable Double} = 0.0@{Double};
  if (flat$85$simp$331) {
    init flat$89$simp$337@{Mutable Bool} = False@{Bool};
    init flat$89$simp$338@{Mutable Error} = ExceptTombstone@{Error};
    init flat$89$simp$339@{Mutable Double} = 0.0@{Double};
    if (a$conv$105$simp$315) {
      let conv$160 = sub#@{Double}
                     a$conv$105$simp$317$simp$318$simp$320
                     (1.0@{Double});
      let conv$161 = div#
                     a$conv$105$simp$317$simp$319
                     conv$160;
      write flat$89$simp$337 = True@{Bool};
      write flat$89$simp$338 = ExceptTombstone@{Error};
      write flat$89$simp$339 = conv$161;
    } else {
      write flat$89$simp$337 = False@{Bool};
      write flat$89$simp$338 = a$conv$105$simp$316;
      write flat$89$simp$339 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$89$simp$340 = flat$89$simp$337;
    read@{Mutable Error} flat$89$simp$341 = flat$89$simp$338;
    read@{Mutable Double} flat$89$simp$342 = flat$89$simp$339;
    init flat$90$simp$343@{Mutable Bool} = False@{Bool};
    init flat$90$simp$344@{Mutable Error} = ExceptTombstone@{Error};
    init flat$90$simp$345@{Mutable Double} = 0.0@{Double};
    if (flat$89$simp$340) {
      let conv$173 = pow#@{Double}
                     flat$89$simp$342 (0.5@{Double});
      write flat$90$simp$343 = True@{Bool};
      write flat$90$simp$344 = ExceptTombstone@{Error};
      write flat$90$simp$345 = conv$173;
    } else {
      write flat$90$simp$343 = False@{Bool};
      write flat$90$simp$344 = flat$89$simp$341;
      write flat$90$simp$345 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$90$simp$346 = flat$90$simp$343;
    read@{Mutable Error} flat$90$simp$347 = flat$90$simp$344;
    read@{Mutable Double} flat$90$simp$348 = flat$90$simp$345;
    init flat$91$simp$349@{Mutable Bool} = False@{Bool};
    init flat$91$simp$350@{Mutable Error} = ExceptTombstone@{Error};
    init flat$91$simp$351@{Mutable Double} = 0.0@{Double};
    if (flat$90$simp$346) {
      let conv$180 = mul#@{Double}
                     flat$85$simp$333
                     flat$90$simp$348;
      write flat$91$simp$349 = True@{Bool};
      write flat$91$simp$350 = ExceptTombstone@{Error};
      write flat$91$simp$351 = conv$180;
    } else {
      write flat$91$simp$349 = False@{Bool};
      write flat$91$simp$350 = flat$90$simp$347;
      write flat$91$simp$351 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$91$simp$352 = flat$91$simp$349;
    read@{Mutable Error} flat$91$simp$353 = flat$91$simp$350;
    read@{Mutable Double} flat$91$simp$354 = flat$91$simp$351;
    write flat$86$simp$334 = flat$91$simp$352;
    write flat$86$simp$335 = flat$91$simp$353;
    write flat$86$simp$336 = flat$91$simp$354;
  } else {
    write flat$86$simp$334 = False@{Bool};
    write flat$86$simp$335 = flat$85$simp$332;
    write flat$86$simp$336 = 0.0@{Double};
  }
  read@{Mutable Bool} flat$86$simp$355 = flat$86$simp$334;
  read@{Mutable Error} flat$86$simp$356 = flat$86$simp$335;
  read@{Mutable Double} flat$86$simp$357 = flat$86$simp$336;
  output@{(Sum Error Double)} repl (flat$86$simp$355@{Bool},
               flat$86$simp$356@{Error},
               flat$86$simp$357@{Double});
}

- C:
// 01-includes.h
#line 1 "01-includes.h"
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

typedef uint64_t ierror_t;
typedef uint64_t iunit_t;
typedef uint64_t ibool_t;
typedef  int64_t iint_t;
typedef   double idouble_t;
typedef  int64_t idate_t;

typedef const char *istring_t;

static const ierror_t ierror_tombstone              = 0;
static const ierror_t ierror_fold1_no_value         = 1;
static const ierror_t ierror_variable_not_available = 2;

static const iunit_t iunit  = 0x13013;
static const ibool_t ifalse = 0;
static const ibool_t itrue  = 1;

#define INLINE __attribute__((always_inline))

// 02-numbers.h
#line 1 "02-numbers.h"
#define MK_SIMPLE_CMPS(t,pre)                                                   \
    static ibool_t   INLINE pre##eq   (t x, t y) { return x == y; }             \
    static ibool_t   INLINE pre##ne   (t x, t y) { return x != y; }             \
    static ibool_t   INLINE pre##gt   (t x, t y) { return x >  y; }             \
    static ibool_t   INLINE pre##ge   (t x, t y) { return x >= y; }             \
    static ibool_t   INLINE pre##lt   (t x, t y) { return x <  y; }             \
    static ibool_t   INLINE pre##le   (t x, t y) { return x <= y; }             \

MK_SIMPLE_CMPS(ierror_t, ierror_)
MK_SIMPLE_CMPS(ibool_t,  ibool_)
MK_SIMPLE_CMPS(idate_t,  idate_)
MK_SIMPLE_CMPS(iunit_t,  iunit_)

static idouble_t INLINE iint_extend   (iint_t    x)              { return x; }
static iint_t    INLINE iint_add      (iint_t    x, iint_t    y) { return x +  y; }
static iint_t    INLINE iint_sub      (iint_t    x, iint_t    y) { return x -  y; }
static iint_t    INLINE iint_mul      (iint_t    x, iint_t    y) { return x *  y; }

MK_SIMPLE_CMPS(iint_t, iint_)

static iint_t    INLINE idouble_trunc (idouble_t x)              { return (iint_t)x; }
static idouble_t INLINE idouble_add   (idouble_t x, idouble_t y) { return x + y; }
static idouble_t INLINE idouble_sub   (idouble_t x, idouble_t y) { return x - y; }
static idouble_t INLINE idouble_mul   (idouble_t x, idouble_t y) { return x * y; }
static idouble_t INLINE idouble_pow   (idouble_t x, idouble_t y) { return pow(x, y); }
static idouble_t INLINE idouble_div   (idouble_t x, idouble_t y) { return x / y; }
static idouble_t INLINE idouble_log   (idouble_t x)              { return log(x); }
static idouble_t INLINE idouble_exp   (idouble_t x)              { return exp(x); }

MK_SIMPLE_CMPS(idouble_t, idouble_)

static ibool_t   INLINE istring_gt    (istring_t x, istring_t y) { return strcmp(x, y) >  0; }
static ibool_t   INLINE istring_ge    (istring_t x, istring_t y) { return strcmp(x, y) >= 0; }
static ibool_t   INLINE istring_lt    (istring_t x, istring_t y) { return strcmp(x, y) <  0; }
static ibool_t   INLINE istring_le    (istring_t x, istring_t y) { return strcmp(x, y) <= 0; }
static ibool_t   INLINE istring_eq    (istring_t x, istring_t y) { return strcmp(x, y) == 0; }
static ibool_t   INLINE istring_ne    (istring_t x, istring_t y) { return strcmp(x, y) != 0; }

// 03-array.h
#line 1 "03-array.h"
typedef struct
{
    iint_t count;
} iarray_struct;
// payload goes straight after

#define ARRAY_OF(t) iarray_t__##t
#define ARRAY_FUN(f,pre) iarray__##pre##f

// I'm not certain there's a point having a different one for each type.
// It makes it look a little better, but I don't think it's any safer.
#define MK_ARRAY_STRUCT(t) typedef iarray_struct* ARRAY_OF(t);

// get payload by advancing pointer by size of struct
// (which should be equivalent to straight after struct fields)
// then casting to t*
#define ARRAY_PAYLOAD(x,t) ((t*)(x+1))


#define MK_ARRAY_LENGTH(t,pre)                                                  \
    static iint_t INLINE ARRAY_FUN(length,pre) (ARRAY_OF(t) arr)                \
    { return arr->count; }

#define MK_ARRAY_EQ(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(eq,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        if (x->count != y->count) return ifalse;                                \
        for (iint_t ix = 0; ix != x->count; ++ix) {                             \
            if (!pre##eq(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        return itrue;                                                           \
    }

#define MK_ARRAY_LT(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(lt,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        iint_t min = (x->count < y->count) ? x->count : y->count;               \
        for (iint_t ix = 0; ix != min; ++ix) {                                  \
            if (!pre##lt(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        if (x->count < y->count)                                                \
            return itrue;                                                       \
        else                                                                    \
            return ifalse;                                                      \
    }

#define MK_ARRAY_CMP(t,pre,op,ret)                                              \
    static ibool_t INLINE ARRAY_FUN(op,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    { return ret ; }                                                            \

#define MK_ARRAY_CMPS(t,pre)                                                    \
    MK_ARRAY_EQ(t,pre)                                                          \
    MK_ARRAY_LT(t,pre)                                                          \
    MK_ARRAY_CMP(t,pre,ne, !ARRAY_FUN(eq,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,le,  ARRAY_FUN(lt,pre) (x,y) || ARRAY_FUN(eq,pre) (x,y)) \
    MK_ARRAY_CMP(t,pre,ge, !ARRAY_FUN(lt,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,gt, !ARRAY_FUN(le,pre) (x,y))                            \



#define MK_ARRAY_INDEX(t,pre)                                                   \
    static t       INLINE ARRAY_FUN(index,pre) (ARRAY_OF(t) x, iint_t ix)       \
    { return ARRAY_PAYLOAD(x,t)[ix]; }                                          \


#define MK_ARRAY_CREATE(t,pre)                                                  \
    static ARRAY_OF(t)  INLINE ARRAY_FUN(create,pre)                            \
                                        (iallocate_t alloc, iint_t sz)          \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(iarray_struct);      \
        ARRAY_OF(t)  ret = (ARRAY_OF(t))allocate(alloc, bytes);                 \
        ret->count = sz;                                                        \
        return ret;                                                             \
    }                                                                           \

#define MK_ARRAY_PUT(t,pre)                                                     \
    static iunit_t INLINE ARRAY_FUN(put,pre)   (ARRAY_OF(t) x, iint_t ix, t v)  \
    {                                                                           \
        ARRAY_PAYLOAD(x,t)[ix] = v;                                             \
        return iunit;                                                           \
    }                                                                           \

                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \



#define MAKE_ARRAY(t,pre)                                                       \
    MK_ARRAY_STRUCT (t)                                                         \
    MK_ARRAY_LENGTH (t,pre)                                                     \
    MK_ARRAY_CMPS   (t,pre)                                                     \
    MK_ARRAY_INDEX  (t,pre)                                                     \
    MK_ARRAY_CREATE (t,pre)                                                     \
    MK_ARRAY_PUT    (t,pre)                                                     \
    // MK_ARRAY_ZIP    (t,pre)                                                     \

// TEMPORARY
typedef void* iallocate_t;
void* allocate(iallocate_t t, iint_t sz);

MAKE_ARRAY(idouble_t,   idouble_)
MAKE_ARRAY(iint_t,      iint_)
MAKE_ARRAY(ierror_t,    ierror_)
MAKE_ARRAY(ibool_t,     ibool_)
MAKE_ARRAY(idate_t,     idate_)
MAKE_ARRAY(iunit_t,     iunit_)

// 04-buffer.h
#line 1 "04-buffer.h"
typedef struct
{
    iint_t max_size;
    iint_t cur_size;
    iint_t head;
} ibuf_struct;
/*
 Invariants
  0 <= cur_size <= max_size
  0 <= head     <  max_size

  read = ARRAY[ head..(head+cur_size) % max_size )

*/

#define BUF_OF(t)   ibuf_t__##t
#define BUF_FUN(f,pre) ibuf__##pre##f

#define MK_BUF_STRUCT(t) typedef ibuf_struct* BUF_OF(t);

#define BUF_PAYLOAD(x,t) ((t*)(x+1))

/*
Make
 Pre
  0 <= sz

 Post
  cur_size' = 0
  head'     = 0
  max_size' = sz
  ARRAY'    = [??...]

  read'     = ARRAY'[head'..head'+cur_size')
            = ARRAY'[0..0)
            = []

  (invariants hold)

*/
#define MK_BUF_MAKE(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(make,pre)                                   \
                     (iallocate_t alloc, iint_t sz)                             \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(ibuf_struct);                \
        BUF_OF(t) ret    = (BUF_OF(t))allocate(alloc, bytes);                   \
        ret->max_size = sz;                                                     \
        ret->cur_size = 0;                                                      \
        ret->head     = 0;                                                      \
        return ret;                                                             \
    }

/*
Push(buf, val)
 Pre
  (buf invariants hold)
 Post
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]

*/

/*
Push(buf, val)
  {buf invariants hold}
  ...
  {
  head'     = if cur_size < max_size
              then head
              else (head+1) % max_size

  cur_size' = min max_size (cur_size+1)

  ARRAY'    = ARRAY[update]:=val
  read'     = ARRAY[head'..(head'+cur_size') % max_size)
  update    = (head' + cur_size') % max_size
  }
  ==>
  {
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]
  }

*/

#define MK_BUF_PUSH(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(push,pre) (BUF_OF(t) buf, t val)            \
    {                                                                           \
        iint_t head_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->head                                            \
                        : (buf->head+1) % buf->max_size;                        \
                                                                                \
        iint_t size_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->cur_size + 1                                    \
                        :  buf->max_size;                                       \
                                                                                \
        iint_t update   = (head_new + buf->cur_size) % buf->max_size;           \
                                                                                \
        BUF_PAYLOAD(buf,t)[update] = val;                                       \
                                                                                \
        buf->head     = head_new;                                               \
        buf->cur_size = size_new;                                               \
        return buf;                                                             \
    }



                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \


/*
Read(buf)
 Pre
  (buf invariants hold)
 Post
  out       = read
*/

#define MK_BUF_READ(t,pre)                                                      \
    static ARRAY_OF(t) INLINE BUF_FUN(read,pre)                                 \
                       (iallocate_t alloc, BUF_OF(t) buf)                       \
    {                                                                           \
        ARRAY_OF(t) out = ARRAY_FUN(create,pre)(alloc, buf->cur_size);          \
                                                                                \
        for (iint_t ix = 0; ix != buf->cur_size; ++ix)                          \
        {                                                                       \
            iint_t in = (buf->head + ix) % buf->max_size;                       \
            ARRAY_PAYLOAD(out,t)[ix] = BUF_PAYLOAD(buf,t)[in];                  \
        }                                                                       \
                                                                                \
        return out;                                                             \
    }



#define MAKE_BUF(t,pre)                                                         \
    MK_BUF_STRUCT (t)                                                           \
    MK_BUF_MAKE   (t,pre)                                                       \
    MK_BUF_PUSH   (t,pre)                                                       \
    MK_BUF_READ   (t,pre)                                                       \

MAKE_BUF(idouble_t,   idouble_)
MAKE_BUF(iint_t,      iint_)
MAKE_BUF(ierror_t,    ierror_)
MAKE_BUF(ibool_t,     ibool_)
MAKE_BUF(idate_t,     idate_)
MAKE_BUF(iunit_t,     iunit_)

#line 1 "state definition"
typedef struct {
    /* inputs */
    idate_t    gen_date;
    iint_t     new_count;
    ibool_t    *new_gen_fact_simp_358_simp_360;
    ierror_t   *new_gen_fact_simp_358_simp_361;
    iint_t     *new_gen_fact_simp_358_simp_362;
    idate_t    *new_gen_fact_simp_359;

    /* outputs */
    ibool_t    repl_ix_0;
    ierror_t   repl_ix_1;
    idouble_t  repl_ix_2;

    /* resumables */
    ibool_t    has_acc_a_conv_105_simp_69;
    ibool_t    res_acc_a_conv_105_simp_69;
    ibool_t    has_acc_a_conv_105_simp_70;
    ierror_t   res_acc_a_conv_105_simp_70;
    ibool_t    has_acc_a_conv_105_simp_71_simp_73;
    idouble_t  res_acc_a_conv_105_simp_71_simp_73;
    ibool_t    has_acc_a_conv_105_simp_71_simp_72_simp_74;
    idouble_t  res_acc_a_conv_105_simp_71_simp_72_simp_74;
    ibool_t    has_acc_a_conv_105_simp_71_simp_72_simp_75;
    idouble_t  res_acc_a_conv_105_simp_71_simp_72_simp_75;
    ibool_t    has_acc_a_conv_12_simp_62;
    ibool_t    res_acc_a_conv_12_simp_62;
    ibool_t    has_acc_a_conv_12_simp_63;
    ierror_t   res_acc_a_conv_12_simp_63;
    ibool_t    has_acc_a_conv_12_simp_64_simp_66;
    idouble_t  res_acc_a_conv_12_simp_64_simp_66;
    ibool_t    has_acc_a_conv_12_simp_64_simp_65_simp_67;
    idouble_t  res_acc_a_conv_12_simp_64_simp_65_simp_67;
    ibool_t    has_acc_a_conv_12_simp_64_simp_65_simp_68;
    idouble_t  res_acc_a_conv_12_simp_64_simp_65_simp_68;
} icicle_state_t;

#line 1 "compute function"
void compute(icicle_state_t *s)
{
    ibool_t    a_conv_105_simp_315;
    ierror_t   a_conv_105_simp_316;
    idouble_t  a_conv_105_simp_317_simp_319;
    idouble_t  a_conv_105_simp_317_simp_318_simp_320;
    ibool_t    a_conv_12_simp_308;
    ierror_t   a_conv_12_simp_309;
    idouble_t  a_conv_12_simp_310_simp_312;
    idouble_t  a_conv_12_simp_310_simp_311_simp_313;
    ibool_t    acc_a_conv_105_simp_201;
    ierror_t   acc_a_conv_105_simp_202;
    ibool_t    acc_a_conv_105_simp_69;
    ierror_t   acc_a_conv_105_simp_70;
    idouble_t  acc_a_conv_105_simp_203_simp_205;
    idouble_t  acc_a_conv_105_simp_203_simp_204_simp_206;
    idouble_t  acc_a_conv_105_simp_203_simp_204_simp_207;
    idouble_t  acc_a_conv_105_simp_71_simp_73;
    idouble_t  acc_a_conv_105_simp_71_simp_72_simp_74;
    idouble_t  acc_a_conv_105_simp_71_simp_72_simp_75;
    ibool_t    acc_a_conv_12_simp_62;
    ierror_t   acc_a_conv_12_simp_63;
    ibool_t    acc_a_conv_12_simp_82;
    ierror_t   acc_a_conv_12_simp_83;
    idouble_t  acc_a_conv_12_simp_64_simp_66;
    idouble_t  acc_a_conv_12_simp_64_simp_65_simp_67;
    idouble_t  acc_a_conv_12_simp_64_simp_65_simp_68;
    idouble_t  acc_a_conv_12_simp_84_simp_86;
    idouble_t  acc_a_conv_12_simp_84_simp_85_simp_87;
    idouble_t  acc_a_conv_12_simp_84_simp_85_simp_88;
    ibool_t    flat_38;
    ibool_t    flat_0_simp_76;
    ierror_t   flat_0_simp_77;
    idouble_t  flat_0_simp_78;
    ibool_t    flat_0_simp_79;
    ierror_t   flat_0_simp_80;
    idouble_t  flat_0_simp_81;
    ibool_t    flat_1_simp_182;
    ierror_t   flat_1_simp_183;
    ibool_t    flat_1_simp_89;
    ierror_t   flat_1_simp_90;
    idouble_t  flat_1_simp_184_simp_186;
    idouble_t  flat_1_simp_184_simp_185_simp_187;
    idouble_t  flat_1_simp_184_simp_185_simp_188;
    idouble_t  flat_1_simp_91_simp_93;
    idouble_t  flat_1_simp_91_simp_92_simp_94;
    idouble_t  flat_1_simp_91_simp_92_simp_95;
    ibool_t    flat_10_simp_154;
    ierror_t   flat_10_simp_155;
    ibool_t    flat_10_simp_175;
    ierror_t   flat_10_simp_176;
    idouble_t  flat_10_simp_156_simp_158;
    idouble_t  flat_10_simp_156_simp_157_simp_159;
    idouble_t  flat_10_simp_156_simp_157_simp_160;
    idouble_t  flat_10_simp_177_simp_179;
    idouble_t  flat_10_simp_177_simp_178_simp_180;
    idouble_t  flat_10_simp_177_simp_178_simp_181;
    ibool_t    flat_13_simp_161;
    ierror_t   flat_13_simp_162;
    ibool_t    flat_13_simp_168;
    ierror_t   flat_13_simp_169;
    idouble_t  flat_13_simp_163_simp_165;
    idouble_t  flat_13_simp_163_simp_164_simp_166;
    idouble_t  flat_13_simp_163_simp_164_simp_167;
    idouble_t  flat_13_simp_170_simp_172;
    idouble_t  flat_13_simp_170_simp_171_simp_173;
    idouble_t  flat_13_simp_170_simp_171_simp_174;
    ibool_t    flat_22_simp_117;
    ierror_t   flat_22_simp_118;
    idouble_t  flat_22_simp_119;
    ibool_t    flat_22_simp_126;
    ierror_t   flat_22_simp_127;
    idouble_t  flat_22_simp_128;
    ibool_t    flat_23_simp_129;
    ierror_t   flat_23_simp_130;
    idouble_t  flat_23_simp_131;
    ibool_t    flat_23_simp_132;
    ierror_t   flat_23_simp_133;
    idouble_t  flat_23_simp_134;
    ibool_t    flat_28_simp_120;
    ierror_t   flat_28_simp_121;
    idouble_t  flat_28_simp_122;
    ibool_t    flat_28_simp_123;
    ierror_t   flat_28_simp_124;
    idouble_t  flat_28_simp_125;
    ibool_t    flat_37_simp_189;
    ibool_t    flat_37_simp_191;
    ibool_t    flat_37_simp_192;
    ibool_t    flat_37_simp_194;
    ibool_t    flat_39_simp_195;
    ierror_t   flat_39_simp_196;
    idouble_t  flat_39_simp_197;
    ibool_t    flat_39_simp_198;
    ierror_t   flat_39_simp_199;
    idouble_t  flat_39_simp_200;
    ierror_t   flat_4_simp_100;
    idouble_t  flat_4_simp_101;
    ibool_t    flat_4_simp_96;
    ierror_t   flat_4_simp_97;
    idouble_t  flat_4_simp_98;
    ibool_t    flat_4_simp_99;
    ibool_t    flat_40_simp_208;
    ierror_t   flat_40_simp_209;
    ibool_t    flat_40_simp_301;
    ierror_t   flat_40_simp_302;
    idouble_t  flat_40_simp_210_simp_212;
    idouble_t  flat_40_simp_210_simp_211_simp_213;
    idouble_t  flat_40_simp_210_simp_211_simp_214;
    idouble_t  flat_40_simp_303_simp_305;
    idouble_t  flat_40_simp_303_simp_304_simp_306;
    idouble_t  flat_40_simp_303_simp_304_simp_307;
    ibool_t    flat_43_simp_215;
    ierror_t   flat_43_simp_216;
    idouble_t  flat_43_simp_217;
    ibool_t    flat_43_simp_218;
    ierror_t   flat_43_simp_219;
    idouble_t  flat_43_simp_220;
    ibool_t    flat_44_simp_221;
    ierror_t   flat_44_simp_222;
    idouble_t  flat_44_simp_223;
    ibool_t    flat_44_simp_224;
    ierror_t   flat_44_simp_225;
    idouble_t  flat_44_simp_226;
    ibool_t    flat_45_simp_227;
    ierror_t   flat_45_simp_228;
    idouble_t  flat_45_simp_229;
    ibool_t    flat_45_simp_230;
    ierror_t   flat_45_simp_231;
    idouble_t  flat_45_simp_232;
    ibool_t    flat_46_simp_233;
    ierror_t   flat_46_simp_234;
    idouble_t  flat_46_simp_235;
    ibool_t    flat_46_simp_254;
    ierror_t   flat_46_simp_255;
    idouble_t  flat_46_simp_256;
    ibool_t    flat_47_simp_257;
    ierror_t   flat_47_simp_258;
    idouble_t  flat_47_simp_259;
    ibool_t    flat_47_simp_260;
    ierror_t   flat_47_simp_261;
    idouble_t  flat_47_simp_262;
    ibool_t    flat_48_simp_263;
    ierror_t   flat_48_simp_264;
    ibool_t    flat_48_simp_268;
    ierror_t   flat_48_simp_269;
    idouble_t  flat_48_simp_265_simp_266;
    idouble_t  flat_48_simp_265_simp_267;
    idouble_t  flat_48_simp_270_simp_271;
    idouble_t  flat_48_simp_270_simp_272;
    ibool_t    flat_49_simp_273;
    ierror_t   flat_49_simp_274;
    ibool_t    flat_49_simp_294;
    ierror_t   flat_49_simp_295;
    idouble_t  flat_49_simp_275_simp_277;
    idouble_t  flat_49_simp_275_simp_276_simp_278;
    idouble_t  flat_49_simp_275_simp_276_simp_279;
    idouble_t  flat_49_simp_296_simp_298;
    idouble_t  flat_49_simp_296_simp_297_simp_299;
    idouble_t  flat_49_simp_296_simp_297_simp_300;
    ibool_t    flat_5_simp_102;
    ierror_t   flat_5_simp_103;
    idouble_t  flat_5_simp_104;
    ibool_t    flat_5_simp_105;
    ierror_t   flat_5_simp_106;
    idouble_t  flat_5_simp_107;
    ibool_t    flat_52_simp_280;
    ierror_t   flat_52_simp_281;
    ibool_t    flat_52_simp_287;
    ierror_t   flat_52_simp_288;
    idouble_t  flat_52_simp_282_simp_284;
    idouble_t  flat_52_simp_282_simp_283_simp_285;
    idouble_t  flat_52_simp_282_simp_283_simp_286;
    idouble_t  flat_52_simp_289_simp_291;
    idouble_t  flat_52_simp_289_simp_290_simp_292;
    idouble_t  flat_52_simp_289_simp_290_simp_293;
    ibool_t    flat_6_simp_108;
    ierror_t   flat_6_simp_109;
    idouble_t  flat_6_simp_110;
    ibool_t    flat_6_simp_111;
    ierror_t   flat_6_simp_112;
    idouble_t  flat_6_simp_113;
    ibool_t    flat_61_simp_236;
    ierror_t   flat_61_simp_237;
    idouble_t  flat_61_simp_238;
    ibool_t    flat_61_simp_245;
    ierror_t   flat_61_simp_246;
    idouble_t  flat_61_simp_247;
    ibool_t    flat_62_simp_248;
    ierror_t   flat_62_simp_249;
    idouble_t  flat_62_simp_250;
    ibool_t    flat_62_simp_251;
    ierror_t   flat_62_simp_252;
    idouble_t  flat_62_simp_253;
    ibool_t    flat_67_simp_239;
    ierror_t   flat_67_simp_240;
    idouble_t  flat_67_simp_241;
    ibool_t    flat_67_simp_242;
    ierror_t   flat_67_simp_243;
    idouble_t  flat_67_simp_244;
    ibool_t    flat_7_simp_114;
    ierror_t   flat_7_simp_115;
    idouble_t  flat_7_simp_116;
    ibool_t    flat_7_simp_135;
    ierror_t   flat_7_simp_136;
    idouble_t  flat_7_simp_137;
    ibool_t    flat_8_simp_138;
    ierror_t   flat_8_simp_139;
    idouble_t  flat_8_simp_140;
    ibool_t    flat_8_simp_141;
    ierror_t   flat_8_simp_142;
    idouble_t  flat_8_simp_143;
    ibool_t    flat_84_simp_322;
    ierror_t   flat_84_simp_323;
    idouble_t  flat_84_simp_324;
    ibool_t    flat_84_simp_325;
    ierror_t   flat_84_simp_326;
    idouble_t  flat_84_simp_327;
    ibool_t    flat_85_simp_328;
    ierror_t   flat_85_simp_329;
    idouble_t  flat_85_simp_330;
    ibool_t    flat_85_simp_331;
    ierror_t   flat_85_simp_332;
    idouble_t  flat_85_simp_333;
    ibool_t    flat_86_simp_334;
    ierror_t   flat_86_simp_335;
    idouble_t  flat_86_simp_336;
    ibool_t    flat_86_simp_355;
    ierror_t   flat_86_simp_356;
    idouble_t  flat_86_simp_357;
    ibool_t    flat_89_simp_337;
    ierror_t   flat_89_simp_338;
    idouble_t  flat_89_simp_339;
    ibool_t    flat_89_simp_340;
    ierror_t   flat_89_simp_341;
    idouble_t  flat_89_simp_342;
    ibool_t    flat_9_simp_144;
    ierror_t   flat_9_simp_145;
    ibool_t    flat_9_simp_149;
    ierror_t   flat_9_simp_150;
    idouble_t  flat_9_simp_146_simp_147;
    idouble_t  flat_9_simp_146_simp_148;
    idouble_t  flat_9_simp_151_simp_152;
    idouble_t  flat_9_simp_151_simp_153;
    ibool_t    flat_90_simp_343;
    ierror_t   flat_90_simp_344;
    idouble_t  flat_90_simp_345;
    ibool_t    flat_90_simp_346;
    ierror_t   flat_90_simp_347;
    idouble_t  flat_90_simp_348;
    ibool_t    flat_91_simp_349;
    ierror_t   flat_91_simp_350;
    idouble_t  flat_91_simp_351;
    ibool_t    flat_91_simp_352;
    ierror_t   flat_91_simp_353;
    idouble_t  flat_91_simp_354;

    acc_a_conv_12_simp_62                = itrue;                                /* init */
    acc_a_conv_12_simp_63                = ierror_tombstone;                     /* init */
    acc_a_conv_12_simp_64_simp_65_simp_67 = 0.0;                                 /* init */
    acc_a_conv_12_simp_64_simp_65_simp_68 = 0.0;                                 /* init */
    acc_a_conv_12_simp_64_simp_66        = 0.0;                                  /* init */
    acc_a_conv_105_simp_69               = itrue;                                /* init */
    acc_a_conv_105_simp_70               = ierror_tombstone;                     /* init */
    acc_a_conv_105_simp_71_simp_72_simp_74 = 0.0;                                /* init */
    acc_a_conv_105_simp_71_simp_72_simp_75 = 0.0;                                /* init */
    acc_a_conv_105_simp_71_simp_73       = 0.0;                                  /* init */
    
    if (s->has_acc_a_conv_12_simp_62) {
        acc_a_conv_12_simp_62            = s->res_acc_a_conv_12_simp_62;         /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_63) {
        acc_a_conv_12_simp_63            = s->res_acc_a_conv_12_simp_63;         /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_64_simp_65_simp_67) {
        acc_a_conv_12_simp_64_simp_65_simp_67 = s->res_acc_a_conv_12_simp_64_simp_65_simp_67; /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_64_simp_65_simp_68) {
        acc_a_conv_12_simp_64_simp_65_simp_68 = s->res_acc_a_conv_12_simp_64_simp_65_simp_68; /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_64_simp_66) {
        acc_a_conv_12_simp_64_simp_66    = s->res_acc_a_conv_12_simp_64_simp_66; /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_69) {
        acc_a_conv_105_simp_69           = s->res_acc_a_conv_105_simp_69;        /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_70) {
        acc_a_conv_105_simp_70           = s->res_acc_a_conv_105_simp_70;        /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_71_simp_72_simp_74) {
        acc_a_conv_105_simp_71_simp_72_simp_74 = s->res_acc_a_conv_105_simp_71_simp_72_simp_74; /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_71_simp_72_simp_75) {
        acc_a_conv_105_simp_71_simp_72_simp_75 = s->res_acc_a_conv_105_simp_71_simp_72_simp_75; /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_71_simp_73) {
        acc_a_conv_105_simp_71_simp_73   = s->res_acc_a_conv_105_simp_71_simp_73; /* load */
    }
    
    const iint_t    new_count            = s->new_count;
    const ibool_t   *const new_gen_fact_simp_358_simp_360 = s->new_gen_fact_simp_358_simp_360;
    const ierror_t  *const new_gen_fact_simp_358_simp_361 = s->new_gen_fact_simp_358_simp_361;
    const iint_t    *const new_gen_fact_simp_358_simp_362 = s->new_gen_fact_simp_358_simp_362;
    const idate_t   *const new_gen_fact_simp_359 = s->new_gen_fact_simp_359;
    
    for (iint_t i = 0; i < new_count; i++) {
        ibool_t    gen_fact_simp_358_simp_360 = new_gen_fact_simp_358_simp_360[i];
        ierror_t   gen_fact_simp_358_simp_361 = new_gen_fact_simp_358_simp_361[i];
        iint_t     gen_fact_simp_358_simp_362 = new_gen_fact_simp_358_simp_362[i];
        idate_t    gen_fact_simp_359     = new_gen_fact_simp_359[i];
        flat_0_simp_76                   = ifalse;                               /* init */
        flat_0_simp_77                   = ierror_tombstone;                     /* init */
        flat_0_simp_78                   = 0.0;                                  /* init */
        
        if (gen_fact_simp_358_simp_360) {
            idouble_t  simp_1            = iint_extend (gen_fact_simp_358_simp_362); /* let */
            flat_0_simp_76               = itrue;                                /* write */
            flat_0_simp_77               = ierror_tombstone;                     /* write */
            flat_0_simp_78               = simp_1;                               /* write */
        } else {
            flat_0_simp_76               = ifalse;                               /* write */
            flat_0_simp_77               = gen_fact_simp_358_simp_361;           /* write */
            flat_0_simp_78               = 0.0;                                  /* write */
        }
        
        flat_0_simp_79                   = flat_0_simp_76;                       /* read */
        flat_0_simp_80                   = flat_0_simp_77;                       /* read */
        flat_0_simp_81                   = flat_0_simp_78;                       /* read */
        acc_a_conv_12_simp_82            = acc_a_conv_12_simp_62;                /* read */
        acc_a_conv_12_simp_83            = acc_a_conv_12_simp_63;                /* read */
        acc_a_conv_12_simp_84_simp_85_simp_87 = acc_a_conv_12_simp_64_simp_65_simp_67; /* read */
        acc_a_conv_12_simp_84_simp_85_simp_88 = acc_a_conv_12_simp_64_simp_65_simp_68; /* read */
        acc_a_conv_12_simp_84_simp_86    = acc_a_conv_12_simp_64_simp_66;        /* read */
        flat_1_simp_89                   = ifalse;                               /* init */
        flat_1_simp_90                   = ierror_tombstone;                     /* init */
        flat_1_simp_91_simp_92_simp_94   = 0.0;                                  /* init */
        flat_1_simp_91_simp_92_simp_95   = 0.0;                                  /* init */
        flat_1_simp_91_simp_93           = 0.0;                                  /* init */
        
        if (acc_a_conv_12_simp_82) {
            idouble_t  nn_conv_19        = idouble_add (acc_a_conv_12_simp_84_simp_85_simp_87, 1.0); /* let */
            flat_4_simp_96               = ifalse;                               /* init */
            flat_4_simp_97               = ierror_tombstone;                     /* init */
            flat_4_simp_98               = 0.0;                                  /* init */
            
            if (flat_0_simp_79) {
                idouble_t  simp_7        = idouble_sub (flat_0_simp_81, acc_a_conv_12_simp_84_simp_85_simp_88); /* let */
                flat_4_simp_96           = itrue;                                /* write */
                flat_4_simp_97           = ierror_tombstone;                     /* write */
                flat_4_simp_98           = simp_7;                               /* write */
            } else {
                flat_4_simp_96           = ifalse;                               /* write */
                flat_4_simp_97           = flat_0_simp_80;                       /* write */
                flat_4_simp_98           = 0.0;                                  /* write */
            }
            
            flat_4_simp_99               = flat_4_simp_96;                       /* read */
            flat_4_simp_100              = flat_4_simp_97;                       /* read */
            flat_4_simp_101              = flat_4_simp_98;                       /* read */
            flat_5_simp_102              = ifalse;                               /* init */
            flat_5_simp_103              = ierror_tombstone;                     /* init */
            flat_5_simp_104              = 0.0;                                  /* init */
            
            if (flat_4_simp_99) {
                idouble_t  simp_11       = idouble_div (flat_4_simp_101, nn_conv_19); /* let */
                flat_5_simp_102          = itrue;                                /* write */
                flat_5_simp_103          = ierror_tombstone;                     /* write */
                flat_5_simp_104          = simp_11;                              /* write */
            } else {
                flat_5_simp_102          = ifalse;                               /* write */
                flat_5_simp_103          = flat_4_simp_100;                      /* write */
                flat_5_simp_104          = 0.0;                                  /* write */
            }
            
            flat_5_simp_105              = flat_5_simp_102;                      /* read */
            flat_5_simp_106              = flat_5_simp_103;                      /* read */
            flat_5_simp_107              = flat_5_simp_104;                      /* read */
            flat_6_simp_108              = ifalse;                               /* init */
            flat_6_simp_109              = ierror_tombstone;                     /* init */
            flat_6_simp_110              = 0.0;                                  /* init */
            
            if (flat_5_simp_105) {
                idouble_t  simp_13       = idouble_add (acc_a_conv_12_simp_84_simp_85_simp_88, flat_5_simp_107); /* let */
                flat_6_simp_108          = itrue;                                /* write */
                flat_6_simp_109          = ierror_tombstone;                     /* write */
                flat_6_simp_110          = simp_13;                              /* write */
            } else {
                flat_6_simp_108          = ifalse;                               /* write */
                flat_6_simp_109          = flat_5_simp_106;                      /* write */
                flat_6_simp_110          = 0.0;                                  /* write */
            }
            
            flat_6_simp_111              = flat_6_simp_108;                      /* read */
            flat_6_simp_112              = flat_6_simp_109;                      /* read */
            flat_6_simp_113              = flat_6_simp_110;                      /* read */
            flat_7_simp_114              = ifalse;                               /* init */
            flat_7_simp_115              = ierror_tombstone;                     /* init */
            flat_7_simp_116              = 0.0;                                  /* init */
            
            if (flat_4_simp_99) {
                flat_22_simp_117         = ifalse;                               /* init */
                flat_22_simp_118         = ierror_tombstone;                     /* init */
                flat_22_simp_119         = 0.0;                                  /* init */
                
                if (flat_0_simp_79) {
                    flat_28_simp_120     = ifalse;                               /* init */
                    flat_28_simp_121     = ierror_tombstone;                     /* init */
                    flat_28_simp_122     = 0.0;                                  /* init */
                    
                    if (flat_6_simp_111) {
                        idouble_t  simp_19 = idouble_sub (flat_0_simp_81, flat_6_simp_113); /* let */
                        flat_28_simp_120 = itrue;                                /* write */
                        flat_28_simp_121 = ierror_tombstone;                     /* write */
                        flat_28_simp_122 = simp_19;                              /* write */
                    } else {
                        flat_28_simp_120 = ifalse;                               /* write */
                        flat_28_simp_121 = flat_6_simp_112;                      /* write */
                        flat_28_simp_122 = 0.0;                                  /* write */
                    }
                    
                    flat_28_simp_123     = flat_28_simp_120;                     /* read */
                    flat_28_simp_124     = flat_28_simp_121;                     /* read */
                    flat_28_simp_125     = flat_28_simp_122;                     /* read */
                    flat_22_simp_117     = flat_28_simp_123;                     /* write */
                    flat_22_simp_118     = flat_28_simp_124;                     /* write */
                    flat_22_simp_119     = flat_28_simp_125;                     /* write */
                } else {
                    flat_22_simp_117     = ifalse;                               /* write */
                    flat_22_simp_118     = flat_0_simp_80;                       /* write */
                    flat_22_simp_119     = 0.0;                                  /* write */
                }
                
                flat_22_simp_126         = flat_22_simp_117;                     /* read */
                flat_22_simp_127         = flat_22_simp_118;                     /* read */
                flat_22_simp_128         = flat_22_simp_119;                     /* read */
                flat_23_simp_129         = ifalse;                               /* init */
                flat_23_simp_130         = ierror_tombstone;                     /* init */
                flat_23_simp_131         = 0.0;                                  /* init */
                
                if (flat_22_simp_126) {
                    idouble_t  simp_23   = idouble_mul (flat_4_simp_101, flat_22_simp_128); /* let */
                    flat_23_simp_129     = itrue;                                /* write */
                    flat_23_simp_130     = ierror_tombstone;                     /* write */
                    flat_23_simp_131     = simp_23;                              /* write */
                } else {
                    flat_23_simp_129     = ifalse;                               /* write */
                    flat_23_simp_130     = flat_22_simp_127;                     /* write */
                    flat_23_simp_131     = 0.0;                                  /* write */
                }
                
                flat_23_simp_132         = flat_23_simp_129;                     /* read */
                flat_23_simp_133         = flat_23_simp_130;                     /* read */
                flat_23_simp_134         = flat_23_simp_131;                     /* read */
                flat_7_simp_114          = flat_23_simp_132;                     /* write */
                flat_7_simp_115          = flat_23_simp_133;                     /* write */
                flat_7_simp_116          = flat_23_simp_134;                     /* write */
            } else {
                flat_7_simp_114          = ifalse;                               /* write */
                flat_7_simp_115          = flat_4_simp_100;                      /* write */
                flat_7_simp_116          = 0.0;                                  /* write */
            }
            
            flat_7_simp_135              = flat_7_simp_114;                      /* read */
            flat_7_simp_136              = flat_7_simp_115;                      /* read */
            flat_7_simp_137              = flat_7_simp_116;                      /* read */
            flat_8_simp_138              = ifalse;                               /* init */
            flat_8_simp_139              = ierror_tombstone;                     /* init */
            flat_8_simp_140              = 0.0;                                  /* init */
            
            if (flat_7_simp_135) {
                idouble_t  simp_25       = idouble_add (acc_a_conv_12_simp_84_simp_86, flat_7_simp_137); /* let */
                flat_8_simp_138          = itrue;                                /* write */
                flat_8_simp_139          = ierror_tombstone;                     /* write */
                flat_8_simp_140          = simp_25;                              /* write */
            } else {
                flat_8_simp_138          = ifalse;                               /* write */
                flat_8_simp_139          = flat_7_simp_136;                      /* write */
                flat_8_simp_140          = 0.0;                                  /* write */
            }
            
            flat_8_simp_141              = flat_8_simp_138;                      /* read */
            flat_8_simp_142              = flat_8_simp_139;                      /* read */
            flat_8_simp_143              = flat_8_simp_140;                      /* read */
            flat_9_simp_144              = ifalse;                               /* init */
            flat_9_simp_145              = ierror_tombstone;                     /* init */
            flat_9_simp_146_simp_147     = 0.0;                                  /* init */
            flat_9_simp_146_simp_148     = 0.0;                                  /* init */
            
            if (flat_6_simp_111) {
                flat_9_simp_144          = itrue;                                /* write */
                flat_9_simp_145          = ierror_tombstone;                     /* write */
                flat_9_simp_146_simp_147 = nn_conv_19;                           /* write */
                flat_9_simp_146_simp_148 = flat_6_simp_113;                      /* write */
            } else {
                flat_9_simp_144          = ifalse;                               /* write */
                flat_9_simp_145          = flat_6_simp_112;                      /* write */
                flat_9_simp_146_simp_147 = 0.0;                                  /* write */
                flat_9_simp_146_simp_148 = 0.0;                                  /* write */
            }
            
            flat_9_simp_149              = flat_9_simp_144;                      /* read */
            flat_9_simp_150              = flat_9_simp_145;                      /* read */
            flat_9_simp_151_simp_152     = flat_9_simp_146_simp_147;             /* read */
            flat_9_simp_151_simp_153     = flat_9_simp_146_simp_148;             /* read */
            flat_10_simp_154             = ifalse;                               /* init */
            flat_10_simp_155             = ierror_tombstone;                     /* init */
            flat_10_simp_156_simp_157_simp_159 = 0.0;                            /* init */
            flat_10_simp_156_simp_157_simp_160 = 0.0;                            /* init */
            flat_10_simp_156_simp_158    = 0.0;                                  /* init */
            
            if (flat_9_simp_149) {
                flat_13_simp_161         = ifalse;                               /* init */
                flat_13_simp_162         = ierror_tombstone;                     /* init */
                flat_13_simp_163_simp_164_simp_166 = 0.0;                        /* init */
                flat_13_simp_163_simp_164_simp_167 = 0.0;                        /* init */
                flat_13_simp_163_simp_165 = 0.0;                                 /* init */
                
                if (flat_8_simp_141) {
                    flat_13_simp_161     = itrue;                                /* write */
                    flat_13_simp_162     = ierror_tombstone;                     /* write */
                    flat_13_simp_163_simp_164_simp_166 = flat_9_simp_151_simp_152; /* write */
                    flat_13_simp_163_simp_164_simp_167 = flat_9_simp_151_simp_153; /* write */
                    flat_13_simp_163_simp_165 = flat_8_simp_143;                 /* write */
                } else {
                    flat_13_simp_161     = ifalse;                               /* write */
                    flat_13_simp_162     = flat_8_simp_142;                      /* write */
                    flat_13_simp_163_simp_164_simp_166 = 0.0;                    /* write */
                    flat_13_simp_163_simp_164_simp_167 = 0.0;                    /* write */
                    flat_13_simp_163_simp_165 = 0.0;                             /* write */
                }
                
                flat_13_simp_168         = flat_13_simp_161;                     /* read */
                flat_13_simp_169         = flat_13_simp_162;                     /* read */
                flat_13_simp_170_simp_171_simp_173 = flat_13_simp_163_simp_164_simp_166; /* read */
                flat_13_simp_170_simp_171_simp_174 = flat_13_simp_163_simp_164_simp_167; /* read */
                flat_13_simp_170_simp_172 = flat_13_simp_163_simp_165;           /* read */
                flat_10_simp_154         = flat_13_simp_168;                     /* write */
                flat_10_simp_155         = flat_13_simp_169;                     /* write */
                flat_10_simp_156_simp_157_simp_159 = flat_13_simp_170_simp_171_simp_173; /* write */
                flat_10_simp_156_simp_157_simp_160 = flat_13_simp_170_simp_171_simp_174; /* write */
                flat_10_simp_156_simp_158 = flat_13_simp_170_simp_172;           /* write */
            } else {
                flat_10_simp_154         = ifalse;                               /* write */
                flat_10_simp_155         = flat_9_simp_150;                      /* write */
                flat_10_simp_156_simp_157_simp_159 = 0.0;                        /* write */
                flat_10_simp_156_simp_157_simp_160 = 0.0;                        /* write */
                flat_10_simp_156_simp_158 = 0.0;                                 /* write */
            }
            
            flat_10_simp_175             = flat_10_simp_154;                     /* read */
            flat_10_simp_176             = flat_10_simp_155;                     /* read */
            flat_10_simp_177_simp_178_simp_180 = flat_10_simp_156_simp_157_simp_159; /* read */
            flat_10_simp_177_simp_178_simp_181 = flat_10_simp_156_simp_157_simp_160; /* read */
            flat_10_simp_177_simp_179    = flat_10_simp_156_simp_158;            /* read */
            flat_1_simp_89               = flat_10_simp_175;                     /* write */
            flat_1_simp_90               = flat_10_simp_176;                     /* write */
            flat_1_simp_91_simp_92_simp_94 = flat_10_simp_177_simp_178_simp_180; /* write */
            flat_1_simp_91_simp_92_simp_95 = flat_10_simp_177_simp_178_simp_181; /* write */
            flat_1_simp_91_simp_93       = flat_10_simp_177_simp_179;            /* write */
        } else {
            flat_1_simp_89               = ifalse;                               /* write */
            flat_1_simp_90               = acc_a_conv_12_simp_83;                /* write */
            flat_1_simp_91_simp_92_simp_94 = 0.0;                                /* write */
            flat_1_simp_91_simp_92_simp_95 = 0.0;                                /* write */
            flat_1_simp_91_simp_93       = 0.0;                                  /* write */
        }
        
        flat_1_simp_182                  = flat_1_simp_89;                       /* read */
        flat_1_simp_183                  = flat_1_simp_90;                       /* read */
        flat_1_simp_184_simp_185_simp_187 = flat_1_simp_91_simp_92_simp_94;      /* read */
        flat_1_simp_184_simp_185_simp_188 = flat_1_simp_91_simp_92_simp_95;      /* read */
        flat_1_simp_184_simp_186         = flat_1_simp_91_simp_93;               /* read */
        acc_a_conv_12_simp_62            = flat_1_simp_182;                      /* write */
        acc_a_conv_12_simp_63            = flat_1_simp_183;                      /* write */
        acc_a_conv_12_simp_64_simp_65_simp_67 = flat_1_simp_184_simp_185_simp_187; /* write */
        acc_a_conv_12_simp_64_simp_65_simp_68 = flat_1_simp_184_simp_185_simp_188; /* write */
        acc_a_conv_12_simp_64_simp_66    = flat_1_simp_184_simp_186;             /* write */
        flat_37_simp_189                 = ifalse;                               /* init */
        flat_37_simp_191                 = ifalse;                               /* init */
        
        if (gen_fact_simp_358_simp_360) {
            ibool_t    simp_31           = iint_lt (gen_fact_simp_358_simp_362, 300); /* let */
            flat_37_simp_189             = itrue;                                /* write */
            flat_37_simp_191             = simp_31;                              /* write */
        } else {
            flat_37_simp_189             = ifalse;                               /* write */
            flat_37_simp_191             = ifalse;                               /* write */
        }
        
        flat_37_simp_192                 = flat_37_simp_189;                     /* read */
        flat_37_simp_194                 = flat_37_simp_191;                     /* read */
        flat_38                          = ifalse;                               /* init */
        
        if (flat_37_simp_192) {
            flat_38                      = flat_37_simp_194;                     /* write */
        } else {
            flat_38                      = itrue;                                /* write */
        }
        
        flat_38                          = flat_38;                              /* read */
        
        if (flat_38) {
            flat_39_simp_195             = ifalse;                               /* init */
            flat_39_simp_196             = ierror_tombstone;                     /* init */
            flat_39_simp_197             = 0.0;                                  /* init */
            
            if (gen_fact_simp_358_simp_360) {
                idouble_t  simp_33       = iint_extend (gen_fact_simp_358_simp_362); /* let */
                flat_39_simp_195         = itrue;                                /* write */
                flat_39_simp_196         = ierror_tombstone;                     /* write */
                flat_39_simp_197         = simp_33;                              /* write */
            } else {
                flat_39_simp_195         = ifalse;                               /* write */
                flat_39_simp_196         = gen_fact_simp_358_simp_361;           /* write */
                flat_39_simp_197         = 0.0;                                  /* write */
            }
            
            flat_39_simp_198             = flat_39_simp_195;                     /* read */
            flat_39_simp_199             = flat_39_simp_196;                     /* read */
            flat_39_simp_200             = flat_39_simp_197;                     /* read */
            acc_a_conv_105_simp_201      = acc_a_conv_105_simp_69;               /* read */
            acc_a_conv_105_simp_202      = acc_a_conv_105_simp_70;               /* read */
            acc_a_conv_105_simp_203_simp_204_simp_206 = acc_a_conv_105_simp_71_simp_72_simp_74; /* read */
            acc_a_conv_105_simp_203_simp_204_simp_207 = acc_a_conv_105_simp_71_simp_72_simp_75; /* read */
            acc_a_conv_105_simp_203_simp_205 = acc_a_conv_105_simp_71_simp_73;   /* read */
            flat_40_simp_208             = ifalse;                               /* init */
            flat_40_simp_209             = ierror_tombstone;                     /* init */
            flat_40_simp_210_simp_211_simp_213 = 0.0;                            /* init */
            flat_40_simp_210_simp_211_simp_214 = 0.0;                            /* init */
            flat_40_simp_210_simp_212    = 0.0;                                  /* init */
            
            if (acc_a_conv_105_simp_201) {
                idouble_t  nn_conv_112   = idouble_add (acc_a_conv_105_simp_203_simp_204_simp_206, 1.0); /* let */
                flat_43_simp_215         = ifalse;                               /* init */
                flat_43_simp_216         = ierror_tombstone;                     /* init */
                flat_43_simp_217         = 0.0;                                  /* init */
                
                if (flat_39_simp_198) {
                    idouble_t  simp_39   = idouble_sub (flat_39_simp_200, acc_a_conv_105_simp_203_simp_204_simp_207); /* let */
                    flat_43_simp_215     = itrue;                                /* write */
                    flat_43_simp_216     = ierror_tombstone;                     /* write */
                    flat_43_simp_217     = simp_39;                              /* write */
                } else {
                    flat_43_simp_215     = ifalse;                               /* write */
                    flat_43_simp_216     = flat_39_simp_199;                     /* write */
                    flat_43_simp_217     = 0.0;                                  /* write */
                }
                
                flat_43_simp_218         = flat_43_simp_215;                     /* read */
                flat_43_simp_219         = flat_43_simp_216;                     /* read */
                flat_43_simp_220         = flat_43_simp_217;                     /* read */
                flat_44_simp_221         = ifalse;                               /* init */
                flat_44_simp_222         = ierror_tombstone;                     /* init */
                flat_44_simp_223         = 0.0;                                  /* init */
                
                if (flat_43_simp_218) {
                    idouble_t  simp_43   = idouble_div (flat_43_simp_220, nn_conv_112); /* let */
                    flat_44_simp_221     = itrue;                                /* write */
                    flat_44_simp_222     = ierror_tombstone;                     /* write */
                    flat_44_simp_223     = simp_43;                              /* write */
                } else {
                    flat_44_simp_221     = ifalse;                               /* write */
                    flat_44_simp_222     = flat_43_simp_219;                     /* write */
                    flat_44_simp_223     = 0.0;                                  /* write */
                }
                
                flat_44_simp_224         = flat_44_simp_221;                     /* read */
                flat_44_simp_225         = flat_44_simp_222;                     /* read */
                flat_44_simp_226         = flat_44_simp_223;                     /* read */
                flat_45_simp_227         = ifalse;                               /* init */
                flat_45_simp_228         = ierror_tombstone;                     /* init */
                flat_45_simp_229         = 0.0;                                  /* init */
                
                if (flat_44_simp_224) {
                    idouble_t  simp_45   = idouble_add (acc_a_conv_105_simp_203_simp_204_simp_207, flat_44_simp_226); /* let */
                    flat_45_simp_227     = itrue;                                /* write */
                    flat_45_simp_228     = ierror_tombstone;                     /* write */
                    flat_45_simp_229     = simp_45;                              /* write */
                } else {
                    flat_45_simp_227     = ifalse;                               /* write */
                    flat_45_simp_228     = flat_44_simp_225;                     /* write */
                    flat_45_simp_229     = 0.0;                                  /* write */
                }
                
                flat_45_simp_230         = flat_45_simp_227;                     /* read */
                flat_45_simp_231         = flat_45_simp_228;                     /* read */
                flat_45_simp_232         = flat_45_simp_229;                     /* read */
                flat_46_simp_233         = ifalse;                               /* init */
                flat_46_simp_234         = ierror_tombstone;                     /* init */
                flat_46_simp_235         = 0.0;                                  /* init */
                
                if (flat_43_simp_218) {
                    flat_61_simp_236     = ifalse;                               /* init */
                    flat_61_simp_237     = ierror_tombstone;                     /* init */
                    flat_61_simp_238     = 0.0;                                  /* init */
                    
                    if (flat_39_simp_198) {
                        flat_67_simp_239 = ifalse;                               /* init */
                        flat_67_simp_240 = ierror_tombstone;                     /* init */
                        flat_67_simp_241 = 0.0;                                  /* init */
                        
                        if (flat_45_simp_230) {
                            idouble_t  simp_51 = idouble_sub (flat_39_simp_200, flat_45_simp_232); /* let */
                            flat_67_simp_239 = itrue;                            /* write */
                            flat_67_simp_240 = ierror_tombstone;                 /* write */
                            flat_67_simp_241 = simp_51;                          /* write */
                        } else {
                            flat_67_simp_239 = ifalse;                           /* write */
                            flat_67_simp_240 = flat_45_simp_231;                 /* write */
                            flat_67_simp_241 = 0.0;                              /* write */
                        }
                        
                        flat_67_simp_242 = flat_67_simp_239;                     /* read */
                        flat_67_simp_243 = flat_67_simp_240;                     /* read */
                        flat_67_simp_244 = flat_67_simp_241;                     /* read */
                        flat_61_simp_236 = flat_67_simp_242;                     /* write */
                        flat_61_simp_237 = flat_67_simp_243;                     /* write */
                        flat_61_simp_238 = flat_67_simp_244;                     /* write */
                    } else {
                        flat_61_simp_236 = ifalse;                               /* write */
                        flat_61_simp_237 = flat_39_simp_199;                     /* write */
                        flat_61_simp_238 = 0.0;                                  /* write */
                    }
                    
                    flat_61_simp_245     = flat_61_simp_236;                     /* read */
                    flat_61_simp_246     = flat_61_simp_237;                     /* read */
                    flat_61_simp_247     = flat_61_simp_238;                     /* read */
                    flat_62_simp_248     = ifalse;                               /* init */
                    flat_62_simp_249     = ierror_tombstone;                     /* init */
                    flat_62_simp_250     = 0.0;                                  /* init */
                    
                    if (flat_61_simp_245) {
                        idouble_t  simp_55 = idouble_mul (flat_43_simp_220, flat_61_simp_247); /* let */
                        flat_62_simp_248 = itrue;                                /* write */
                        flat_62_simp_249 = ierror_tombstone;                     /* write */
                        flat_62_simp_250 = simp_55;                              /* write */
                    } else {
                        flat_62_simp_248 = ifalse;                               /* write */
                        flat_62_simp_249 = flat_61_simp_246;                     /* write */
                        flat_62_simp_250 = 0.0;                                  /* write */
                    }
                    
                    flat_62_simp_251     = flat_62_simp_248;                     /* read */
                    flat_62_simp_252     = flat_62_simp_249;                     /* read */
                    flat_62_simp_253     = flat_62_simp_250;                     /* read */
                    flat_46_simp_233     = flat_62_simp_251;                     /* write */
                    flat_46_simp_234     = flat_62_simp_252;                     /* write */
                    flat_46_simp_235     = flat_62_simp_253;                     /* write */
                } else {
                    flat_46_simp_233     = ifalse;                               /* write */
                    flat_46_simp_234     = flat_43_simp_219;                     /* write */
                    flat_46_simp_235     = 0.0;                                  /* write */
                }
                
                flat_46_simp_254         = flat_46_simp_233;                     /* read */
                flat_46_simp_255         = flat_46_simp_234;                     /* read */
                flat_46_simp_256         = flat_46_simp_235;                     /* read */
                flat_47_simp_257         = ifalse;                               /* init */
                flat_47_simp_258         = ierror_tombstone;                     /* init */
                flat_47_simp_259         = 0.0;                                  /* init */
                
                if (flat_46_simp_254) {
                    idouble_t  simp_57   = idouble_add (acc_a_conv_105_simp_203_simp_205, flat_46_simp_256); /* let */
                    flat_47_simp_257     = itrue;                                /* write */
                    flat_47_simp_258     = ierror_tombstone;                     /* write */
                    flat_47_simp_259     = simp_57;                              /* write */
                } else {
                    flat_47_simp_257     = ifalse;                               /* write */
                    flat_47_simp_258     = flat_46_simp_255;                     /* write */
                    flat_47_simp_259     = 0.0;                                  /* write */
                }
                
                flat_47_simp_260         = flat_47_simp_257;                     /* read */
                flat_47_simp_261         = flat_47_simp_258;                     /* read */
                flat_47_simp_262         = flat_47_simp_259;                     /* read */
                flat_48_simp_263         = ifalse;                               /* init */
                flat_48_simp_264         = ierror_tombstone;                     /* init */
                flat_48_simp_265_simp_266 = 0.0;                                 /* init */
                flat_48_simp_265_simp_267 = 0.0;                                 /* init */
                
                if (flat_45_simp_230) {
                    flat_48_simp_263     = itrue;                                /* write */
                    flat_48_simp_264     = ierror_tombstone;                     /* write */
                    flat_48_simp_265_simp_266 = nn_conv_112;                     /* write */
                    flat_48_simp_265_simp_267 = flat_45_simp_232;                /* write */
                } else {
                    flat_48_simp_263     = ifalse;                               /* write */
                    flat_48_simp_264     = flat_45_simp_231;                     /* write */
                    flat_48_simp_265_simp_266 = 0.0;                             /* write */
                    flat_48_simp_265_simp_267 = 0.0;                             /* write */
                }
                
                flat_48_simp_268         = flat_48_simp_263;                     /* read */
                flat_48_simp_269         = flat_48_simp_264;                     /* read */
                flat_48_simp_270_simp_271 = flat_48_simp_265_simp_266;           /* read */
                flat_48_simp_270_simp_272 = flat_48_simp_265_simp_267;           /* read */
                flat_49_simp_273         = ifalse;                               /* init */
                flat_49_simp_274         = ierror_tombstone;                     /* init */
                flat_49_simp_275_simp_276_simp_278 = 0.0;                        /* init */
                flat_49_simp_275_simp_276_simp_279 = 0.0;                        /* init */
                flat_49_simp_275_simp_277 = 0.0;                                 /* init */
                
                if (flat_48_simp_268) {
                    flat_52_simp_280     = ifalse;                               /* init */
                    flat_52_simp_281     = ierror_tombstone;                     /* init */
                    flat_52_simp_282_simp_283_simp_285 = 0.0;                    /* init */
                    flat_52_simp_282_simp_283_simp_286 = 0.0;                    /* init */
                    flat_52_simp_282_simp_284 = 0.0;                             /* init */
                    
                    if (flat_47_simp_260) {
                        flat_52_simp_280 = itrue;                                /* write */
                        flat_52_simp_281 = ierror_tombstone;                     /* write */
                        flat_52_simp_282_simp_283_simp_285 = flat_48_simp_270_simp_271; /* write */
                        flat_52_simp_282_simp_283_simp_286 = flat_48_simp_270_simp_272; /* write */
                        flat_52_simp_282_simp_284 = flat_47_simp_262;            /* write */
                    } else {
                        flat_52_simp_280 = ifalse;                               /* write */
                        flat_52_simp_281 = flat_47_simp_261;                     /* write */
                        flat_52_simp_282_simp_283_simp_285 = 0.0;                /* write */
                        flat_52_simp_282_simp_283_simp_286 = 0.0;                /* write */
                        flat_52_simp_282_simp_284 = 0.0;                         /* write */
                    }
                    
                    flat_52_simp_287     = flat_52_simp_280;                     /* read */
                    flat_52_simp_288     = flat_52_simp_281;                     /* read */
                    flat_52_simp_289_simp_290_simp_292 = flat_52_simp_282_simp_283_simp_285; /* read */
                    flat_52_simp_289_simp_290_simp_293 = flat_52_simp_282_simp_283_simp_286; /* read */
                    flat_52_simp_289_simp_291 = flat_52_simp_282_simp_284;       /* read */
                    flat_49_simp_273     = flat_52_simp_287;                     /* write */
                    flat_49_simp_274     = flat_52_simp_288;                     /* write */
                    flat_49_simp_275_simp_276_simp_278 = flat_52_simp_289_simp_290_simp_292; /* write */
                    flat_49_simp_275_simp_276_simp_279 = flat_52_simp_289_simp_290_simp_293; /* write */
                    flat_49_simp_275_simp_277 = flat_52_simp_289_simp_291;       /* write */
                } else {
                    flat_49_simp_273     = ifalse;                               /* write */
                    flat_49_simp_274     = flat_48_simp_269;                     /* write */
                    flat_49_simp_275_simp_276_simp_278 = 0.0;                    /* write */
                    flat_49_simp_275_simp_276_simp_279 = 0.0;                    /* write */
                    flat_49_simp_275_simp_277 = 0.0;                             /* write */
                }
                
                flat_49_simp_294         = flat_49_simp_273;                     /* read */
                flat_49_simp_295         = flat_49_simp_274;                     /* read */
                flat_49_simp_296_simp_297_simp_299 = flat_49_simp_275_simp_276_simp_278; /* read */
                flat_49_simp_296_simp_297_simp_300 = flat_49_simp_275_simp_276_simp_279; /* read */
                flat_49_simp_296_simp_298 = flat_49_simp_275_simp_277;           /* read */
                flat_40_simp_208         = flat_49_simp_294;                     /* write */
                flat_40_simp_209         = flat_49_simp_295;                     /* write */
                flat_40_simp_210_simp_211_simp_213 = flat_49_simp_296_simp_297_simp_299; /* write */
                flat_40_simp_210_simp_211_simp_214 = flat_49_simp_296_simp_297_simp_300; /* write */
                flat_40_simp_210_simp_212 = flat_49_simp_296_simp_298;           /* write */
            } else {
                flat_40_simp_208         = ifalse;                               /* write */
                flat_40_simp_209         = acc_a_conv_105_simp_202;              /* write */
                flat_40_simp_210_simp_211_simp_213 = 0.0;                        /* write */
                flat_40_simp_210_simp_211_simp_214 = 0.0;                        /* write */
                flat_40_simp_210_simp_212 = 0.0;                                 /* write */
            }
            
            flat_40_simp_301             = flat_40_simp_208;                     /* read */
            flat_40_simp_302             = flat_40_simp_209;                     /* read */
            flat_40_simp_303_simp_304_simp_306 = flat_40_simp_210_simp_211_simp_213; /* read */
            flat_40_simp_303_simp_304_simp_307 = flat_40_simp_210_simp_211_simp_214; /* read */
            flat_40_simp_303_simp_305    = flat_40_simp_210_simp_212;            /* read */
            acc_a_conv_105_simp_69       = flat_40_simp_301;                     /* write */
            acc_a_conv_105_simp_70       = flat_40_simp_302;                     /* write */
            acc_a_conv_105_simp_71_simp_72_simp_74 = flat_40_simp_303_simp_304_simp_306; /* write */
            acc_a_conv_105_simp_71_simp_72_simp_75 = flat_40_simp_303_simp_304_simp_307; /* write */
            acc_a_conv_105_simp_71_simp_73 = flat_40_simp_303_simp_305;          /* write */
        }
        
    }
    
    s->has_acc_a_conv_12_simp_62         = itrue;                                /* save */
    s->res_acc_a_conv_12_simp_62         = acc_a_conv_12_simp_62;                /* save */
    
    s->has_acc_a_conv_12_simp_63         = itrue;                                /* save */
    s->res_acc_a_conv_12_simp_63         = acc_a_conv_12_simp_63;                /* save */
    
    s->has_acc_a_conv_12_simp_64_simp_65_simp_67 = itrue;                        /* save */
    s->res_acc_a_conv_12_simp_64_simp_65_simp_67 = acc_a_conv_12_simp_64_simp_65_simp_67; /* save */
    
    s->has_acc_a_conv_12_simp_64_simp_65_simp_68 = itrue;                        /* save */
    s->res_acc_a_conv_12_simp_64_simp_65_simp_68 = acc_a_conv_12_simp_64_simp_65_simp_68; /* save */
    
    s->has_acc_a_conv_12_simp_64_simp_66 = itrue;                                /* save */
    s->res_acc_a_conv_12_simp_64_simp_66 = acc_a_conv_12_simp_64_simp_66;        /* save */
    
    s->has_acc_a_conv_105_simp_69        = itrue;                                /* save */
    s->res_acc_a_conv_105_simp_69        = acc_a_conv_105_simp_69;               /* save */
    
    s->has_acc_a_conv_105_simp_70        = itrue;                                /* save */
    s->res_acc_a_conv_105_simp_70        = acc_a_conv_105_simp_70;               /* save */
    
    s->has_acc_a_conv_105_simp_71_simp_72_simp_74 = itrue;                       /* save */
    s->res_acc_a_conv_105_simp_71_simp_72_simp_74 = acc_a_conv_105_simp_71_simp_72_simp_74; /* save */
    
    s->has_acc_a_conv_105_simp_71_simp_72_simp_75 = itrue;                       /* save */
    s->res_acc_a_conv_105_simp_71_simp_72_simp_75 = acc_a_conv_105_simp_71_simp_72_simp_75; /* save */
    
    s->has_acc_a_conv_105_simp_71_simp_73 = itrue;                               /* save */
    s->res_acc_a_conv_105_simp_71_simp_73 = acc_a_conv_105_simp_71_simp_73;      /* save */
    
    a_conv_12_simp_308                   = acc_a_conv_12_simp_62;                /* read */
    a_conv_12_simp_309                   = acc_a_conv_12_simp_63;                /* read */
    a_conv_12_simp_310_simp_311_simp_313 = acc_a_conv_12_simp_64_simp_65_simp_67; /* read */
    a_conv_12_simp_310_simp_312          = acc_a_conv_12_simp_64_simp_66;        /* read */
    a_conv_105_simp_315                  = acc_a_conv_105_simp_69;               /* read */
    a_conv_105_simp_316                  = acc_a_conv_105_simp_70;               /* read */
    a_conv_105_simp_317_simp_318_simp_320 = acc_a_conv_105_simp_71_simp_72_simp_74; /* read */
    a_conv_105_simp_317_simp_319         = acc_a_conv_105_simp_71_simp_73;       /* read */
    flat_84_simp_322                     = ifalse;                               /* init */
    flat_84_simp_323                     = ierror_tombstone;                     /* init */
    flat_84_simp_324                     = 0.0;                                  /* init */
    
    if (a_conv_12_simp_308) {
        idouble_t  conv_67               = idouble_sub (a_conv_12_simp_310_simp_311_simp_313, 1.0); /* let */
        idouble_t  conv_68               = idouble_div (a_conv_12_simp_310_simp_312, conv_67); /* let */
        flat_84_simp_322                 = itrue;                                /* write */
        flat_84_simp_323                 = ierror_tombstone;                     /* write */
        flat_84_simp_324                 = conv_68;                              /* write */
    } else {
        flat_84_simp_322                 = ifalse;                               /* write */
        flat_84_simp_323                 = a_conv_12_simp_309;                   /* write */
        flat_84_simp_324                 = 0.0;                                  /* write */
    }
    
    flat_84_simp_325                     = flat_84_simp_322;                     /* read */
    flat_84_simp_326                     = flat_84_simp_323;                     /* read */
    flat_84_simp_327                     = flat_84_simp_324;                     /* read */
    flat_85_simp_328                     = ifalse;                               /* init */
    flat_85_simp_329                     = ierror_tombstone;                     /* init */
    flat_85_simp_330                     = 0.0;                                  /* init */
    
    if (flat_84_simp_325) {
        idouble_t  conv_80               = idouble_pow (flat_84_simp_327, 0.5);  /* let */
        flat_85_simp_328                 = itrue;                                /* write */
        flat_85_simp_329                 = ierror_tombstone;                     /* write */
        flat_85_simp_330                 = conv_80;                              /* write */
    } else {
        flat_85_simp_328                 = ifalse;                               /* write */
        flat_85_simp_329                 = flat_84_simp_326;                     /* write */
        flat_85_simp_330                 = 0.0;                                  /* write */
    }
    
    flat_85_simp_331                     = flat_85_simp_328;                     /* read */
    flat_85_simp_332                     = flat_85_simp_329;                     /* read */
    flat_85_simp_333                     = flat_85_simp_330;                     /* read */
    flat_86_simp_334                     = ifalse;                               /* init */
    flat_86_simp_335                     = ierror_tombstone;                     /* init */
    flat_86_simp_336                     = 0.0;                                  /* init */
    
    if (flat_85_simp_331) {
        flat_89_simp_337                 = ifalse;                               /* init */
        flat_89_simp_338                 = ierror_tombstone;                     /* init */
        flat_89_simp_339                 = 0.0;                                  /* init */
        
        if (a_conv_105_simp_315) {
            idouble_t  conv_160          = idouble_sub (a_conv_105_simp_317_simp_318_simp_320, 1.0); /* let */
            idouble_t  conv_161          = idouble_div (a_conv_105_simp_317_simp_319, conv_160); /* let */
            flat_89_simp_337             = itrue;                                /* write */
            flat_89_simp_338             = ierror_tombstone;                     /* write */
            flat_89_simp_339             = conv_161;                             /* write */
        } else {
            flat_89_simp_337             = ifalse;                               /* write */
            flat_89_simp_338             = a_conv_105_simp_316;                  /* write */
            flat_89_simp_339             = 0.0;                                  /* write */
        }
        
        flat_89_simp_340                 = flat_89_simp_337;                     /* read */
        flat_89_simp_341                 = flat_89_simp_338;                     /* read */
        flat_89_simp_342                 = flat_89_simp_339;                     /* read */
        flat_90_simp_343                 = ifalse;                               /* init */
        flat_90_simp_344                 = ierror_tombstone;                     /* init */
        flat_90_simp_345                 = 0.0;                                  /* init */
        
        if (flat_89_simp_340) {
            idouble_t  conv_173          = idouble_pow (flat_89_simp_342, 0.5);  /* let */
            flat_90_simp_343             = itrue;                                /* write */
            flat_90_simp_344             = ierror_tombstone;                     /* write */
            flat_90_simp_345             = conv_173;                             /* write */
        } else {
            flat_90_simp_343             = ifalse;                               /* write */
            flat_90_simp_344             = flat_89_simp_341;                     /* write */
            flat_90_simp_345             = 0.0;                                  /* write */
        }
        
        flat_90_simp_346                 = flat_90_simp_343;                     /* read */
        flat_90_simp_347                 = flat_90_simp_344;                     /* read */
        flat_90_simp_348                 = flat_90_simp_345;                     /* read */
        flat_91_simp_349                 = ifalse;                               /* init */
        flat_91_simp_350                 = ierror_tombstone;                     /* init */
        flat_91_simp_351                 = 0.0;                                  /* init */
        
        if (flat_90_simp_346) {
            idouble_t  conv_180          = idouble_mul (flat_85_simp_333, flat_90_simp_348); /* let */
            flat_91_simp_349             = itrue;                                /* write */
            flat_91_simp_350             = ierror_tombstone;                     /* write */
            flat_91_simp_351             = conv_180;                             /* write */
        } else {
            flat_91_simp_349             = ifalse;                               /* write */
            flat_91_simp_350             = flat_90_simp_347;                     /* write */
            flat_91_simp_351             = 0.0;                                  /* write */
        }
        
        flat_91_simp_352                 = flat_91_simp_349;                     /* read */
        flat_91_simp_353                 = flat_91_simp_350;                     /* read */
        flat_91_simp_354                 = flat_91_simp_351;                     /* read */
        flat_86_simp_334                 = flat_91_simp_352;                     /* write */
        flat_86_simp_335                 = flat_91_simp_353;                     /* write */
        flat_86_simp_336                 = flat_91_simp_354;                     /* write */
    } else {
        flat_86_simp_334                 = ifalse;                               /* write */
        flat_86_simp_335                 = flat_85_simp_332;                     /* write */
        flat_86_simp_336                 = 0.0;                                  /* write */
    }
    
    flat_86_simp_355                     = flat_86_simp_334;                     /* read */
    flat_86_simp_356                     = flat_86_simp_335;                     /* read */
    flat_86_simp_357                     = flat_86_simp_336;                     /* read */
    s->repl_ix_0                         = flat_86_simp_355;                     /* output */
    s->repl_ix_1                         = flat_86_simp_356;                     /* output */
    s->repl_ix_2                         = flat_86_simp_357;                     /* output */
}

- C evaluation:
[(homer,11180.33988749895)
,(marge,100.0)]

- Core evaluation:
[homer, 11180.33988749895
,marge, 100.0]

> > -- An interesting expression
> - Flattened:
gen$date = DATE
{
  init acc$a$conv$12$simp$62@{Mutable Bool} = True@{Bool};
  init acc$a$conv$12$simp$63@{Mutable Error} = ExceptTombstone@{Error};
  init acc$a$conv$12$simp$64$simp$65$simp$67@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$12$simp$64$simp$65$simp$68@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$12$simp$64$simp$66@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$105$simp$69@{Mutable Bool} = True@{Bool};
  init acc$a$conv$105$simp$70@{Mutable Error} = ExceptTombstone@{Error};
  init acc$a$conv$105$simp$71$simp$72$simp$74@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$105$simp$71$simp$72$simp$75@{Mutable Double} = 0.0@{Double};
  init acc$a$conv$105$simp$71$simp$73@{Mutable Double} = 0.0@{Double};
  load_resumable@{Bool} acc$a$conv$12$simp$62;
  load_resumable@{Error} acc$a$conv$12$simp$63;
  load_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$67;
  load_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$68;
  load_resumable@{Double} acc$a$conv$12$simp$64$simp$66;
  load_resumable@{Bool} acc$a$conv$105$simp$69;
  load_resumable@{Error} acc$a$conv$105$simp$70;
  load_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$74;
  load_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$75;
  load_resumable@{Double} acc$a$conv$105$simp$71$simp$73;
  for_facts (gen$fact$simp$358$simp$360@{Bool},
             gen$fact$simp$358$simp$361@{Error},
             gen$fact$simp$358$simp$362@{Int},
             gen$fact$simp$359@{DateTime}) in new {
    init flat$0$simp$76@{Mutable Bool} = False@{Bool};
    init flat$0$simp$77@{Mutable Error} = ExceptTombstone@{Error};
    init flat$0$simp$78@{Mutable Double} = 0.0@{Double};
    if (gen$fact$simp$358$simp$360) {
      let simp$1 = doubleOfInt#
                   gen$fact$simp$358$simp$362;
      write flat$0$simp$76 = True@{Bool};
      write flat$0$simp$77 = ExceptTombstone@{Error};
      write flat$0$simp$78 = simp$1;
    } else {
      write flat$0$simp$76 = False@{Bool};
      write flat$0$simp$77 = gen$fact$simp$358$simp$361;
      write flat$0$simp$78 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$0$simp$79 = flat$0$simp$76;
    read@{Mutable Error} flat$0$simp$80 = flat$0$simp$77;
    read@{Mutable Double} flat$0$simp$81 = flat$0$simp$78;
    read@{Mutable Bool} acc$a$conv$12$simp$82 = acc$a$conv$12$simp$62;
    read@{Mutable Error} acc$a$conv$12$simp$83 = acc$a$conv$12$simp$63;
    read@{Mutable Double} acc$a$conv$12$simp$84$simp$85$simp$87 = acc$a$conv$12$simp$64$simp$65$simp$67;
    read@{Mutable Double} acc$a$conv$12$simp$84$simp$85$simp$88 = acc$a$conv$12$simp$64$simp$65$simp$68;
    read@{Mutable Double} acc$a$conv$12$simp$84$simp$86 = acc$a$conv$12$simp$64$simp$66;
    init flat$1$simp$89@{Mutable Bool} = False@{Bool};
    init flat$1$simp$90@{Mutable Error} = ExceptTombstone@{Error};
    init flat$1$simp$91$simp$92$simp$94@{Mutable Double} = 0.0@{Double};
    init flat$1$simp$91$simp$92$simp$95@{Mutable Double} = 0.0@{Double};
    init flat$1$simp$91$simp$93@{Mutable Double} = 0.0@{Double};
    if (acc$a$conv$12$simp$82) {
      let nn$conv$19 = add#@{Double}
                       acc$a$conv$12$simp$84$simp$85$simp$87
                       (1.0@{Double});
      init flat$4$simp$96@{Mutable Bool} = False@{Bool};
      init flat$4$simp$97@{Mutable Error} = ExceptTombstone@{Error};
      init flat$4$simp$98@{Mutable Double} = 0.0@{Double};
      if (flat$0$simp$79) {
        let simp$7 = sub#@{Double}
                     flat$0$simp$81
                     acc$a$conv$12$simp$84$simp$85$simp$88;
        write flat$4$simp$96 = True@{Bool};
        write flat$4$simp$97 = ExceptTombstone@{Error};
        write flat$4$simp$98 = simp$7;
      } else {
        write flat$4$simp$96 = False@{Bool};
        write flat$4$simp$97 = flat$0$simp$80;
        write flat$4$simp$98 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$4$simp$99 = flat$4$simp$96;
      read@{Mutable Error} flat$4$simp$100 = flat$4$simp$97;
      read@{Mutable Double} flat$4$simp$101 = flat$4$simp$98;
      init flat$5$simp$102@{Mutable Bool} = False@{Bool};
      init flat$5$simp$103@{Mutable Error} = ExceptTombstone@{Error};
      init flat$5$simp$104@{Mutable Double} = 0.0@{Double};
      if (flat$4$simp$99) {
        let simp$11 = div#
                      flat$4$simp$101 nn$conv$19;
        write flat$5$simp$102 = True@{Bool};
        write flat$5$simp$103 = ExceptTombstone@{Error};
        write flat$5$simp$104 = simp$11;
      } else {
        write flat$5$simp$102 = False@{Bool};
        write flat$5$simp$103 = flat$4$simp$100;
        write flat$5$simp$104 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$5$simp$105 = flat$5$simp$102;
      read@{Mutable Error} flat$5$simp$106 = flat$5$simp$103;
      read@{Mutable Double} flat$5$simp$107 = flat$5$simp$104;
      init flat$6$simp$108@{Mutable Bool} = False@{Bool};
      init flat$6$simp$109@{Mutable Error} = ExceptTombstone@{Error};
      init flat$6$simp$110@{Mutable Double} = 0.0@{Double};
      if (flat$5$simp$105) {
        let simp$13 = add#@{Double}
                      acc$a$conv$12$simp$84$simp$85$simp$88
                      flat$5$simp$107;
        write flat$6$simp$108 = True@{Bool};
        write flat$6$simp$109 = ExceptTombstone@{Error};
        write flat$6$simp$110 = simp$13;
      } else {
        write flat$6$simp$108 = False@{Bool};
        write flat$6$simp$109 = flat$5$simp$106;
        write flat$6$simp$110 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$6$simp$111 = flat$6$simp$108;
      read@{Mutable Error} flat$6$simp$112 = flat$6$simp$109;
      read@{Mutable Double} flat$6$simp$113 = flat$6$simp$110;
      init flat$7$simp$114@{Mutable Bool} = False@{Bool};
      init flat$7$simp$115@{Mutable Error} = ExceptTombstone@{Error};
      init flat$7$simp$116@{Mutable Double} = 0.0@{Double};
      if (flat$4$simp$99) {
        init flat$22$simp$117@{Mutable Bool} = False@{Bool};
        init flat$22$simp$118@{Mutable Error} = ExceptTombstone@{Error};
        init flat$22$simp$119@{Mutable Double} = 0.0@{Double};
        if (flat$0$simp$79) {
          init flat$28$simp$120@{Mutable Bool} = False@{Bool};
          init flat$28$simp$121@{Mutable Error} = ExceptTombstone@{Error};
          init flat$28$simp$122@{Mutable Double} = 0.0@{Double};
          if (flat$6$simp$111) {
            let simp$19 = sub#@{Double}
                          flat$0$simp$81 flat$6$simp$113;
            write flat$28$simp$120 = True@{Bool};
            write flat$28$simp$121 = ExceptTombstone@{Error};
            write flat$28$simp$122 = simp$19;
          } else {
            write flat$28$simp$120 = False@{Bool};
            write flat$28$simp$121 = flat$6$simp$112;
            write flat$28$simp$122 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$28$simp$123 = flat$28$simp$120;
          read@{Mutable Error} flat$28$simp$124 = flat$28$simp$121;
          read@{Mutable Double} flat$28$simp$125 = flat$28$simp$122;
          write flat$22$simp$117 = flat$28$simp$123;
          write flat$22$simp$118 = flat$28$simp$124;
          write flat$22$simp$119 = flat$28$simp$125;
        } else {
          write flat$22$simp$117 = False@{Bool};
          write flat$22$simp$118 = flat$0$simp$80;
          write flat$22$simp$119 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$22$simp$126 = flat$22$simp$117;
        read@{Mutable Error} flat$22$simp$127 = flat$22$simp$118;
        read@{Mutable Double} flat$22$simp$128 = flat$22$simp$119;
        init flat$23$simp$129@{Mutable Bool} = False@{Bool};
        init flat$23$simp$130@{Mutable Error} = ExceptTombstone@{Error};
        init flat$23$simp$131@{Mutable Double} = 0.0@{Double};
        if (flat$22$simp$126) {
          let simp$23 = mul#@{Double}
                        flat$4$simp$101
                        flat$22$simp$128;
          write flat$23$simp$129 = True@{Bool};
          write flat$23$simp$130 = ExceptTombstone@{Error};
          write flat$23$simp$131 = simp$23;
        } else {
          write flat$23$simp$129 = False@{Bool};
          write flat$23$simp$130 = flat$22$simp$127;
          write flat$23$simp$131 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$23$simp$132 = flat$23$simp$129;
        read@{Mutable Error} flat$23$simp$133 = flat$23$simp$130;
        read@{Mutable Double} flat$23$simp$134 = flat$23$simp$131;
        write flat$7$simp$114 = flat$23$simp$132;
        write flat$7$simp$115 = flat$23$simp$133;
        write flat$7$simp$116 = flat$23$simp$134;
      } else {
        write flat$7$simp$114 = False@{Bool};
        write flat$7$simp$115 = flat$4$simp$100;
        write flat$7$simp$116 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$7$simp$135 = flat$7$simp$114;
      read@{Mutable Error} flat$7$simp$136 = flat$7$simp$115;
      read@{Mutable Double} flat$7$simp$137 = flat$7$simp$116;
      init flat$8$simp$138@{Mutable Bool} = False@{Bool};
      init flat$8$simp$139@{Mutable Error} = ExceptTombstone@{Error};
      init flat$8$simp$140@{Mutable Double} = 0.0@{Double};
      if (flat$7$simp$135) {
        let simp$25 = add#@{Double}
                      acc$a$conv$12$simp$84$simp$86
                      flat$7$simp$137;
        write flat$8$simp$138 = True@{Bool};
        write flat$8$simp$139 = ExceptTombstone@{Error};
        write flat$8$simp$140 = simp$25;
      } else {
        write flat$8$simp$138 = False@{Bool};
        write flat$8$simp$139 = flat$7$simp$136;
        write flat$8$simp$140 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$8$simp$141 = flat$8$simp$138;
      read@{Mutable Error} flat$8$simp$142 = flat$8$simp$139;
      read@{Mutable Double} flat$8$simp$143 = flat$8$simp$140;
      init flat$9$simp$144@{Mutable Bool} = False@{Bool};
      init flat$9$simp$145@{Mutable Error} = ExceptTombstone@{Error};
      init flat$9$simp$146$simp$147@{Mutable Double} = 0.0@{Double};
      init flat$9$simp$146$simp$148@{Mutable Double} = 0.0@{Double};
      if (flat$6$simp$111) {
        write flat$9$simp$144 = True@{Bool};
        write flat$9$simp$145 = ExceptTombstone@{Error};
        write flat$9$simp$146$simp$147 = nn$conv$19;
        write flat$9$simp$146$simp$148 = flat$6$simp$113;
      } else {
        write flat$9$simp$144 = False@{Bool};
        write flat$9$simp$145 = flat$6$simp$112;
        write flat$9$simp$146$simp$147 = 0.0@{Double};
        write flat$9$simp$146$simp$148 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$9$simp$149 = flat$9$simp$144;
      read@{Mutable Error} flat$9$simp$150 = flat$9$simp$145;
      read@{Mutable Double} flat$9$simp$151$simp$152 = flat$9$simp$146$simp$147;
      read@{Mutable Double} flat$9$simp$151$simp$153 = flat$9$simp$146$simp$148;
      init flat$10$simp$154@{Mutable Bool} = False@{Bool};
      init flat$10$simp$155@{Mutable Error} = ExceptTombstone@{Error};
      init flat$10$simp$156$simp$157$simp$159@{Mutable Double} = 0.0@{Double};
      init flat$10$simp$156$simp$157$simp$160@{Mutable Double} = 0.0@{Double};
      init flat$10$simp$156$simp$158@{Mutable Double} = 0.0@{Double};
      if (flat$9$simp$149) {
        init flat$13$simp$161@{Mutable Bool} = False@{Bool};
        init flat$13$simp$162@{Mutable Error} = ExceptTombstone@{Error};
        init flat$13$simp$163$simp$164$simp$166@{Mutable Double} = 0.0@{Double};
        init flat$13$simp$163$simp$164$simp$167@{Mutable Double} = 0.0@{Double};
        init flat$13$simp$163$simp$165@{Mutable Double} = 0.0@{Double};
        if (flat$8$simp$141) {
          write flat$13$simp$161 = True@{Bool};
          write flat$13$simp$162 = ExceptTombstone@{Error};
          write flat$13$simp$163$simp$164$simp$166 = flat$9$simp$151$simp$152;
          write flat$13$simp$163$simp$164$simp$167 = flat$9$simp$151$simp$153;
          write flat$13$simp$163$simp$165 = flat$8$simp$143;
        } else {
          write flat$13$simp$161 = False@{Bool};
          write flat$13$simp$162 = flat$8$simp$142;
          write flat$13$simp$163$simp$164$simp$166 = 0.0@{Double};
          write flat$13$simp$163$simp$164$simp$167 = 0.0@{Double};
          write flat$13$simp$163$simp$165 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$13$simp$168 = flat$13$simp$161;
        read@{Mutable Error} flat$13$simp$169 = flat$13$simp$162;
        read@{Mutable Double} flat$13$simp$170$simp$171$simp$173 = flat$13$simp$163$simp$164$simp$166;
        read@{Mutable Double} flat$13$simp$170$simp$171$simp$174 = flat$13$simp$163$simp$164$simp$167;
        read@{Mutable Double} flat$13$simp$170$simp$172 = flat$13$simp$163$simp$165;
        write flat$10$simp$154 = flat$13$simp$168;
        write flat$10$simp$155 = flat$13$simp$169;
        write flat$10$simp$156$simp$157$simp$159 = flat$13$simp$170$simp$171$simp$173;
        write flat$10$simp$156$simp$157$simp$160 = flat$13$simp$170$simp$171$simp$174;
        write flat$10$simp$156$simp$158 = flat$13$simp$170$simp$172;
      } else {
        write flat$10$simp$154 = False@{Bool};
        write flat$10$simp$155 = flat$9$simp$150;
        write flat$10$simp$156$simp$157$simp$159 = 0.0@{Double};
        write flat$10$simp$156$simp$157$simp$160 = 0.0@{Double};
        write flat$10$simp$156$simp$158 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$10$simp$175 = flat$10$simp$154;
      read@{Mutable Error} flat$10$simp$176 = flat$10$simp$155;
      read@{Mutable Double} flat$10$simp$177$simp$178$simp$180 = flat$10$simp$156$simp$157$simp$159;
      read@{Mutable Double} flat$10$simp$177$simp$178$simp$181 = flat$10$simp$156$simp$157$simp$160;
      read@{Mutable Double} flat$10$simp$177$simp$179 = flat$10$simp$156$simp$158;
      write flat$1$simp$89 = flat$10$simp$175;
      write flat$1$simp$90 = flat$10$simp$176;
      write flat$1$simp$91$simp$92$simp$94 = flat$10$simp$177$simp$178$simp$180;
      write flat$1$simp$91$simp$92$simp$95 = flat$10$simp$177$simp$178$simp$181;
      write flat$1$simp$91$simp$93 = flat$10$simp$177$simp$179;
    } else {
      write flat$1$simp$89 = False@{Bool};
      write flat$1$simp$90 = acc$a$conv$12$simp$83;
      write flat$1$simp$91$simp$92$simp$94 = 0.0@{Double};
      write flat$1$simp$91$simp$92$simp$95 = 0.0@{Double};
      write flat$1$simp$91$simp$93 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$1$simp$182 = flat$1$simp$89;
    read@{Mutable Error} flat$1$simp$183 = flat$1$simp$90;
    read@{Mutable Double} flat$1$simp$184$simp$185$simp$187 = flat$1$simp$91$simp$92$simp$94;
    read@{Mutable Double} flat$1$simp$184$simp$185$simp$188 = flat$1$simp$91$simp$92$simp$95;
    read@{Mutable Double} flat$1$simp$184$simp$186 = flat$1$simp$91$simp$93;
    write acc$a$conv$12$simp$62 = flat$1$simp$182;
    write acc$a$conv$12$simp$63 = flat$1$simp$183;
    write acc$a$conv$12$simp$64$simp$65$simp$67 = flat$1$simp$184$simp$185$simp$187;
    write acc$a$conv$12$simp$64$simp$65$simp$68 = flat$1$simp$184$simp$185$simp$188;
    write acc$a$conv$12$simp$64$simp$66 = flat$1$simp$184$simp$186;
    init flat$37$simp$189@{Mutable Bool} = False@{Bool};
    init flat$37$simp$191@{Mutable Bool} = False@{Bool};
    if (gen$fact$simp$358$simp$360) {
      let simp$31 = lt#@{Int}
                    gen$fact$simp$358$simp$362
                    (300@{Int});
      write flat$37$simp$189 = True@{Bool};
      write flat$37$simp$191 = simp$31;
    } else {
      write flat$37$simp$189 = False@{Bool};
      write flat$37$simp$191 = False@{Bool};
    }
    read@{Mutable Bool} flat$37$simp$192 = flat$37$simp$189;
    read@{Mutable Bool} flat$37$simp$194 = flat$37$simp$191;
    init flat$38@{Mutable Bool} = False@{Bool};
    if (flat$37$simp$192) {
      write flat$38 = flat$37$simp$194;
    } 
     else {
      write flat$38 = True@{Bool};
    } 
    
    read@{Mutable Bool} flat$38 = flat$38;
    if (flat$38) {
      init flat$39$simp$195@{Mutable Bool} = False@{Bool};
      init flat$39$simp$196@{Mutable Error} = ExceptTombstone@{Error};
      init flat$39$simp$197@{Mutable Double} = 0.0@{Double};
      if (gen$fact$simp$358$simp$360) {
        let simp$33 = doubleOfInt#
                      gen$fact$simp$358$simp$362;
        write flat$39$simp$195 = True@{Bool};
        write flat$39$simp$196 = ExceptTombstone@{Error};
        write flat$39$simp$197 = simp$33;
      } else {
        write flat$39$simp$195 = False@{Bool};
        write flat$39$simp$196 = gen$fact$simp$358$simp$361;
        write flat$39$simp$197 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$39$simp$198 = flat$39$simp$195;
      read@{Mutable Error} flat$39$simp$199 = flat$39$simp$196;
      read@{Mutable Double} flat$39$simp$200 = flat$39$simp$197;
      read@{Mutable Bool} acc$a$conv$105$simp$201 = acc$a$conv$105$simp$69;
      read@{Mutable Error} acc$a$conv$105$simp$202 = acc$a$conv$105$simp$70;
      read@{Mutable Double} acc$a$conv$105$simp$203$simp$204$simp$206 = acc$a$conv$105$simp$71$simp$72$simp$74;
      read@{Mutable Double} acc$a$conv$105$simp$203$simp$204$simp$207 = acc$a$conv$105$simp$71$simp$72$simp$75;
      read@{Mutable Double} acc$a$conv$105$simp$203$simp$205 = acc$a$conv$105$simp$71$simp$73;
      init flat$40$simp$208@{Mutable Bool} = False@{Bool};
      init flat$40$simp$209@{Mutable Error} = ExceptTombstone@{Error};
      init flat$40$simp$210$simp$211$simp$213@{Mutable Double} = 0.0@{Double};
      init flat$40$simp$210$simp$211$simp$214@{Mutable Double} = 0.0@{Double};
      init flat$40$simp$210$simp$212@{Mutable Double} = 0.0@{Double};
      if (acc$a$conv$105$simp$201) {
        let nn$conv$112 = add#@{Double}
                          acc$a$conv$105$simp$203$simp$204$simp$206
                          (1.0@{Double});
        init flat$43$simp$215@{Mutable Bool} = False@{Bool};
        init flat$43$simp$216@{Mutable Error} = ExceptTombstone@{Error};
        init flat$43$simp$217@{Mutable Double} = 0.0@{Double};
        if (flat$39$simp$198) {
          let simp$39 = sub#@{Double}
                        flat$39$simp$200
                        acc$a$conv$105$simp$203$simp$204$simp$207;
          write flat$43$simp$215 = True@{Bool};
          write flat$43$simp$216 = ExceptTombstone@{Error};
          write flat$43$simp$217 = simp$39;
        } else {
          write flat$43$simp$215 = False@{Bool};
          write flat$43$simp$216 = flat$39$simp$199;
          write flat$43$simp$217 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$43$simp$218 = flat$43$simp$215;
        read@{Mutable Error} flat$43$simp$219 = flat$43$simp$216;
        read@{Mutable Double} flat$43$simp$220 = flat$43$simp$217;
        init flat$44$simp$221@{Mutable Bool} = False@{Bool};
        init flat$44$simp$222@{Mutable Error} = ExceptTombstone@{Error};
        init flat$44$simp$223@{Mutable Double} = 0.0@{Double};
        if (flat$43$simp$218) {
          let simp$43 = div#
                        flat$43$simp$220 nn$conv$112;
          write flat$44$simp$221 = True@{Bool};
          write flat$44$simp$222 = ExceptTombstone@{Error};
          write flat$44$simp$223 = simp$43;
        } else {
          write flat$44$simp$221 = False@{Bool};
          write flat$44$simp$222 = flat$43$simp$219;
          write flat$44$simp$223 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$44$simp$224 = flat$44$simp$221;
        read@{Mutable Error} flat$44$simp$225 = flat$44$simp$222;
        read@{Mutable Double} flat$44$simp$226 = flat$44$simp$223;
        init flat$45$simp$227@{Mutable Bool} = False@{Bool};
        init flat$45$simp$228@{Mutable Error} = ExceptTombstone@{Error};
        init flat$45$simp$229@{Mutable Double} = 0.0@{Double};
        if (flat$44$simp$224) {
          let simp$45 = add#@{Double}
                        acc$a$conv$105$simp$203$simp$204$simp$207
                        flat$44$simp$226;
          write flat$45$simp$227 = True@{Bool};
          write flat$45$simp$228 = ExceptTombstone@{Error};
          write flat$45$simp$229 = simp$45;
        } else {
          write flat$45$simp$227 = False@{Bool};
          write flat$45$simp$228 = flat$44$simp$225;
          write flat$45$simp$229 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$45$simp$230 = flat$45$simp$227;
        read@{Mutable Error} flat$45$simp$231 = flat$45$simp$228;
        read@{Mutable Double} flat$45$simp$232 = flat$45$simp$229;
        init flat$46$simp$233@{Mutable Bool} = False@{Bool};
        init flat$46$simp$234@{Mutable Error} = ExceptTombstone@{Error};
        init flat$46$simp$235@{Mutable Double} = 0.0@{Double};
        if (flat$43$simp$218) {
          init flat$61$simp$236@{Mutable Bool} = False@{Bool};
          init flat$61$simp$237@{Mutable Error} = ExceptTombstone@{Error};
          init flat$61$simp$238@{Mutable Double} = 0.0@{Double};
          if (flat$39$simp$198) {
            init flat$67$simp$239@{Mutable Bool} = False@{Bool};
            init flat$67$simp$240@{Mutable Error} = ExceptTombstone@{Error};
            init flat$67$simp$241@{Mutable Double} = 0.0@{Double};
            if (flat$45$simp$230) {
              let simp$51 = sub#@{Double}
                            flat$39$simp$200
                            flat$45$simp$232;
              write flat$67$simp$239 = True@{Bool};
              write flat$67$simp$240 = ExceptTombstone@{Error};
              write flat$67$simp$241 = simp$51;
            } else {
              write flat$67$simp$239 = False@{Bool};
              write flat$67$simp$240 = flat$45$simp$231;
              write flat$67$simp$241 = 0.0@{Double};
            }
            read@{Mutable Bool} flat$67$simp$242 = flat$67$simp$239;
            read@{Mutable Error} flat$67$simp$243 = flat$67$simp$240;
            read@{Mutable Double} flat$67$simp$244 = flat$67$simp$241;
            write flat$61$simp$236 = flat$67$simp$242;
            write flat$61$simp$237 = flat$67$simp$243;
            write flat$61$simp$238 = flat$67$simp$244;
          } else {
            write flat$61$simp$236 = False@{Bool};
            write flat$61$simp$237 = flat$39$simp$199;
            write flat$61$simp$238 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$61$simp$245 = flat$61$simp$236;
          read@{Mutable Error} flat$61$simp$246 = flat$61$simp$237;
          read@{Mutable Double} flat$61$simp$247 = flat$61$simp$238;
          init flat$62$simp$248@{Mutable Bool} = False@{Bool};
          init flat$62$simp$249@{Mutable Error} = ExceptTombstone@{Error};
          init flat$62$simp$250@{Mutable Double} = 0.0@{Double};
          if (flat$61$simp$245) {
            let simp$55 = mul#@{Double}
                          flat$43$simp$220
                          flat$61$simp$247;
            write flat$62$simp$248 = True@{Bool};
            write flat$62$simp$249 = ExceptTombstone@{Error};
            write flat$62$simp$250 = simp$55;
          } else {
            write flat$62$simp$248 = False@{Bool};
            write flat$62$simp$249 = flat$61$simp$246;
            write flat$62$simp$250 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$62$simp$251 = flat$62$simp$248;
          read@{Mutable Error} flat$62$simp$252 = flat$62$simp$249;
          read@{Mutable Double} flat$62$simp$253 = flat$62$simp$250;
          write flat$46$simp$233 = flat$62$simp$251;
          write flat$46$simp$234 = flat$62$simp$252;
          write flat$46$simp$235 = flat$62$simp$253;
        } else {
          write flat$46$simp$233 = False@{Bool};
          write flat$46$simp$234 = flat$43$simp$219;
          write flat$46$simp$235 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$46$simp$254 = flat$46$simp$233;
        read@{Mutable Error} flat$46$simp$255 = flat$46$simp$234;
        read@{Mutable Double} flat$46$simp$256 = flat$46$simp$235;
        init flat$47$simp$257@{Mutable Bool} = False@{Bool};
        init flat$47$simp$258@{Mutable Error} = ExceptTombstone@{Error};
        init flat$47$simp$259@{Mutable Double} = 0.0@{Double};
        if (flat$46$simp$254) {
          let simp$57 = add#@{Double}
                        acc$a$conv$105$simp$203$simp$205
                        flat$46$simp$256;
          write flat$47$simp$257 = True@{Bool};
          write flat$47$simp$258 = ExceptTombstone@{Error};
          write flat$47$simp$259 = simp$57;
        } else {
          write flat$47$simp$257 = False@{Bool};
          write flat$47$simp$258 = flat$46$simp$255;
          write flat$47$simp$259 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$47$simp$260 = flat$47$simp$257;
        read@{Mutable Error} flat$47$simp$261 = flat$47$simp$258;
        read@{Mutable Double} flat$47$simp$262 = flat$47$simp$259;
        init flat$48$simp$263@{Mutable Bool} = False@{Bool};
        init flat$48$simp$264@{Mutable Error} = ExceptTombstone@{Error};
        init flat$48$simp$265$simp$266@{Mutable Double} = 0.0@{Double};
        init flat$48$simp$265$simp$267@{Mutable Double} = 0.0@{Double};
        if (flat$45$simp$230) {
          write flat$48$simp$263 = True@{Bool};
          write flat$48$simp$264 = ExceptTombstone@{Error};
          write flat$48$simp$265$simp$266 = nn$conv$112;
          write flat$48$simp$265$simp$267 = flat$45$simp$232;
        } else {
          write flat$48$simp$263 = False@{Bool};
          write flat$48$simp$264 = flat$45$simp$231;
          write flat$48$simp$265$simp$266 = 0.0@{Double};
          write flat$48$simp$265$simp$267 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$48$simp$268 = flat$48$simp$263;
        read@{Mutable Error} flat$48$simp$269 = flat$48$simp$264;
        read@{Mutable Double} flat$48$simp$270$simp$271 = flat$48$simp$265$simp$266;
        read@{Mutable Double} flat$48$simp$270$simp$272 = flat$48$simp$265$simp$267;
        init flat$49$simp$273@{Mutable Bool} = False@{Bool};
        init flat$49$simp$274@{Mutable Error} = ExceptTombstone@{Error};
        init flat$49$simp$275$simp$276$simp$278@{Mutable Double} = 0.0@{Double};
        init flat$49$simp$275$simp$276$simp$279@{Mutable Double} = 0.0@{Double};
        init flat$49$simp$275$simp$277@{Mutable Double} = 0.0@{Double};
        if (flat$48$simp$268) {
          init flat$52$simp$280@{Mutable Bool} = False@{Bool};
          init flat$52$simp$281@{Mutable Error} = ExceptTombstone@{Error};
          init flat$52$simp$282$simp$283$simp$285@{Mutable Double} = 0.0@{Double};
          init flat$52$simp$282$simp$283$simp$286@{Mutable Double} = 0.0@{Double};
          init flat$52$simp$282$simp$284@{Mutable Double} = 0.0@{Double};
          if (flat$47$simp$260) {
            write flat$52$simp$280 = True@{Bool};
            write flat$52$simp$281 = ExceptTombstone@{Error};
            write flat$52$simp$282$simp$283$simp$285 = flat$48$simp$270$simp$271;
            write flat$52$simp$282$simp$283$simp$286 = flat$48$simp$270$simp$272;
            write flat$52$simp$282$simp$284 = flat$47$simp$262;
          } else {
            write flat$52$simp$280 = False@{Bool};
            write flat$52$simp$281 = flat$47$simp$261;
            write flat$52$simp$282$simp$283$simp$285 = 0.0@{Double};
            write flat$52$simp$282$simp$283$simp$286 = 0.0@{Double};
            write flat$52$simp$282$simp$284 = 0.0@{Double};
          }
          read@{Mutable Bool} flat$52$simp$287 = flat$52$simp$280;
          read@{Mutable Error} flat$52$simp$288 = flat$52$simp$281;
          read@{Mutable Double} flat$52$simp$289$simp$290$simp$292 = flat$52$simp$282$simp$283$simp$285;
          read@{Mutable Double} flat$52$simp$289$simp$290$simp$293 = flat$52$simp$282$simp$283$simp$286;
          read@{Mutable Double} flat$52$simp$289$simp$291 = flat$52$simp$282$simp$284;
          write flat$49$simp$273 = flat$52$simp$287;
          write flat$49$simp$274 = flat$52$simp$288;
          write flat$49$simp$275$simp$276$simp$278 = flat$52$simp$289$simp$290$simp$292;
          write flat$49$simp$275$simp$276$simp$279 = flat$52$simp$289$simp$290$simp$293;
          write flat$49$simp$275$simp$277 = flat$52$simp$289$simp$291;
        } else {
          write flat$49$simp$273 = False@{Bool};
          write flat$49$simp$274 = flat$48$simp$269;
          write flat$49$simp$275$simp$276$simp$278 = 0.0@{Double};
          write flat$49$simp$275$simp$276$simp$279 = 0.0@{Double};
          write flat$49$simp$275$simp$277 = 0.0@{Double};
        }
        read@{Mutable Bool} flat$49$simp$294 = flat$49$simp$273;
        read@{Mutable Error} flat$49$simp$295 = flat$49$simp$274;
        read@{Mutable Double} flat$49$simp$296$simp$297$simp$299 = flat$49$simp$275$simp$276$simp$278;
        read@{Mutable Double} flat$49$simp$296$simp$297$simp$300 = flat$49$simp$275$simp$276$simp$279;
        read@{Mutable Double} flat$49$simp$296$simp$298 = flat$49$simp$275$simp$277;
        write flat$40$simp$208 = flat$49$simp$294;
        write flat$40$simp$209 = flat$49$simp$295;
        write flat$40$simp$210$simp$211$simp$213 = flat$49$simp$296$simp$297$simp$299;
        write flat$40$simp$210$simp$211$simp$214 = flat$49$simp$296$simp$297$simp$300;
        write flat$40$simp$210$simp$212 = flat$49$simp$296$simp$298;
      } else {
        write flat$40$simp$208 = False@{Bool};
        write flat$40$simp$209 = acc$a$conv$105$simp$202;
        write flat$40$simp$210$simp$211$simp$213 = 0.0@{Double};
        write flat$40$simp$210$simp$211$simp$214 = 0.0@{Double};
        write flat$40$simp$210$simp$212 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$40$simp$301 = flat$40$simp$208;
      read@{Mutable Error} flat$40$simp$302 = flat$40$simp$209;
      read@{Mutable Double} flat$40$simp$303$simp$304$simp$306 = flat$40$simp$210$simp$211$simp$213;
      read@{Mutable Double} flat$40$simp$303$simp$304$simp$307 = flat$40$simp$210$simp$211$simp$214;
      read@{Mutable Double} flat$40$simp$303$simp$305 = flat$40$simp$210$simp$212;
      write acc$a$conv$105$simp$69 = flat$40$simp$301;
      write acc$a$conv$105$simp$70 = flat$40$simp$302;
      write acc$a$conv$105$simp$71$simp$72$simp$74 = flat$40$simp$303$simp$304$simp$306;
      write acc$a$conv$105$simp$71$simp$72$simp$75 = flat$40$simp$303$simp$304$simp$307;
      write acc$a$conv$105$simp$71$simp$73 = flat$40$simp$303$simp$305;
    }
  }
  save_resumable@{Bool} acc$a$conv$12$simp$62;
  save_resumable@{Error} acc$a$conv$12$simp$63;
  save_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$67;
  save_resumable@{Double} acc$a$conv$12$simp$64$simp$65$simp$68;
  save_resumable@{Double} acc$a$conv$12$simp$64$simp$66;
  save_resumable@{Bool} acc$a$conv$105$simp$69;
  save_resumable@{Error} acc$a$conv$105$simp$70;
  save_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$74;
  save_resumable@{Double} acc$a$conv$105$simp$71$simp$72$simp$75;
  save_resumable@{Double} acc$a$conv$105$simp$71$simp$73;
  read@{Mutable Bool} a$conv$12$simp$308 = acc$a$conv$12$simp$62;
  read@{Mutable Error} a$conv$12$simp$309 = acc$a$conv$12$simp$63;
  read@{Mutable Double} a$conv$12$simp$310$simp$311$simp$313 = acc$a$conv$12$simp$64$simp$65$simp$67;
  read@{Mutable Double} a$conv$12$simp$310$simp$312 = acc$a$conv$12$simp$64$simp$66;
  read@{Mutable Bool} a$conv$105$simp$315 = acc$a$conv$105$simp$69;
  read@{Mutable Error} a$conv$105$simp$316 = acc$a$conv$105$simp$70;
  read@{Mutable Double} a$conv$105$simp$317$simp$318$simp$320 = acc$a$conv$105$simp$71$simp$72$simp$74;
  read@{Mutable Double} a$conv$105$simp$317$simp$319 = acc$a$conv$105$simp$71$simp$73;
  init flat$84$simp$322@{Mutable Bool} = False@{Bool};
  init flat$84$simp$323@{Mutable Error} = ExceptTombstone@{Error};
  init flat$84$simp$324@{Mutable Double} = 0.0@{Double};
  if (a$conv$12$simp$308) {
    let conv$67 = sub#@{Double}
                  a$conv$12$simp$310$simp$311$simp$313
                  (1.0@{Double});
    let conv$68 = div#
                  a$conv$12$simp$310$simp$312
                  conv$67;
    write flat$84$simp$322 = True@{Bool};
    write flat$84$simp$323 = ExceptTombstone@{Error};
    write flat$84$simp$324 = conv$68;
  } else {
    write flat$84$simp$322 = False@{Bool};
    write flat$84$simp$323 = a$conv$12$simp$309;
    write flat$84$simp$324 = 0.0@{Double};
  }
  read@{Mutable Bool} flat$84$simp$325 = flat$84$simp$322;
  read@{Mutable Error} flat$84$simp$326 = flat$84$simp$323;
  read@{Mutable Double} flat$84$simp$327 = flat$84$simp$324;
  init flat$85$simp$328@{Mutable Bool} = False@{Bool};
  init flat$85$simp$329@{Mutable Error} = ExceptTombstone@{Error};
  init flat$85$simp$330@{Mutable Double} = 0.0@{Double};
  if (flat$84$simp$325) {
    let conv$80 = pow#@{Double}
                  flat$84$simp$327 (0.5@{Double});
    write flat$85$simp$328 = True@{Bool};
    write flat$85$simp$329 = ExceptTombstone@{Error};
    write flat$85$simp$330 = conv$80;
  } else {
    write flat$85$simp$328 = False@{Bool};
    write flat$85$simp$329 = flat$84$simp$326;
    write flat$85$simp$330 = 0.0@{Double};
  }
  read@{Mutable Bool} flat$85$simp$331 = flat$85$simp$328;
  read@{Mutable Error} flat$85$simp$332 = flat$85$simp$329;
  read@{Mutable Double} flat$85$simp$333 = flat$85$simp$330;
  init flat$86$simp$334@{Mutable Bool} = False@{Bool};
  init flat$86$simp$335@{Mutable Error} = ExceptTombstone@{Error};
  init flat$86$simp$336@{Mutable Double} = 0.0@{Double};
  if (flat$85$simp$331) {
    init flat$89$simp$337@{Mutable Bool} = False@{Bool};
    init flat$89$simp$338@{Mutable Error} = ExceptTombstone@{Error};
    init flat$89$simp$339@{Mutable Double} = 0.0@{Double};
    if (a$conv$105$simp$315) {
      let conv$160 = sub#@{Double}
                     a$conv$105$simp$317$simp$318$simp$320
                     (1.0@{Double});
      let conv$161 = div#
                     a$conv$105$simp$317$simp$319
                     conv$160;
      write flat$89$simp$337 = True@{Bool};
      write flat$89$simp$338 = ExceptTombstone@{Error};
      write flat$89$simp$339 = conv$161;
    } else {
      write flat$89$simp$337 = False@{Bool};
      write flat$89$simp$338 = a$conv$105$simp$316;
      write flat$89$simp$339 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$89$simp$340 = flat$89$simp$337;
    read@{Mutable Error} flat$89$simp$341 = flat$89$simp$338;
    read@{Mutable Double} flat$89$simp$342 = flat$89$simp$339;
    init flat$90$simp$343@{Mutable Bool} = False@{Bool};
    init flat$90$simp$344@{Mutable Error} = ExceptTombstone@{Error};
    init flat$90$simp$345@{Mutable Double} = 0.0@{Double};
    if (flat$89$simp$340) {
      let conv$173 = pow#@{Double}
                     flat$89$simp$342 (0.5@{Double});
      write flat$90$simp$343 = True@{Bool};
      write flat$90$simp$344 = ExceptTombstone@{Error};
      write flat$90$simp$345 = conv$173;
    } else {
      write flat$90$simp$343 = False@{Bool};
      write flat$90$simp$344 = flat$89$simp$341;
      write flat$90$simp$345 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$90$simp$346 = flat$90$simp$343;
    read@{Mutable Error} flat$90$simp$347 = flat$90$simp$344;
    read@{Mutable Double} flat$90$simp$348 = flat$90$simp$345;
    init flat$91$simp$349@{Mutable Bool} = False@{Bool};
    init flat$91$simp$350@{Mutable Error} = ExceptTombstone@{Error};
    init flat$91$simp$351@{Mutable Double} = 0.0@{Double};
    if (flat$90$simp$346) {
      let conv$180 = mul#@{Double}
                     flat$85$simp$333
                     flat$90$simp$348;
      write flat$91$simp$349 = True@{Bool};
      write flat$91$simp$350 = ExceptTombstone@{Error};
      write flat$91$simp$351 = conv$180;
    } else {
      write flat$91$simp$349 = False@{Bool};
      write flat$91$simp$350 = flat$90$simp$347;
      write flat$91$simp$351 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$91$simp$352 = flat$91$simp$349;
    read@{Mutable Error} flat$91$simp$353 = flat$91$simp$350;
    read@{Mutable Double} flat$91$simp$354 = flat$91$simp$351;
    write flat$86$simp$334 = flat$91$simp$352;
    write flat$86$simp$335 = flat$91$simp$353;
    write flat$86$simp$336 = flat$91$simp$354;
  } else {
    write flat$86$simp$334 = False@{Bool};
    write flat$86$simp$335 = flat$85$simp$332;
    write flat$86$simp$336 = 0.0@{Double};
  }
  read@{Mutable Bool} flat$86$simp$355 = flat$86$simp$334;
  read@{Mutable Error} flat$86$simp$356 = flat$86$simp$335;
  read@{Mutable Double} flat$86$simp$357 = flat$86$simp$336;
  output@{(Sum Error Double)} repl (flat$86$simp$355@{Bool},
               flat$86$simp$356@{Error},
               flat$86$simp$357@{Double});
}

- C:
// 01-includes.h
#line 1 "01-includes.h"
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

typedef uint64_t ierror_t;
typedef uint64_t iunit_t;
typedef uint64_t ibool_t;
typedef  int64_t iint_t;
typedef   double idouble_t;
typedef  int64_t idate_t;

typedef const char *istring_t;

static const ierror_t ierror_tombstone              = 0;
static const ierror_t ierror_fold1_no_value         = 1;
static const ierror_t ierror_variable_not_available = 2;

static const iunit_t iunit  = 0x13013;
static const ibool_t ifalse = 0;
static const ibool_t itrue  = 1;

#define INLINE __attribute__((always_inline))

// 02-numbers.h
#line 1 "02-numbers.h"
#define MK_SIMPLE_CMPS(t,pre)                                                   \
    static ibool_t   INLINE pre##eq   (t x, t y) { return x == y; }             \
    static ibool_t   INLINE pre##ne   (t x, t y) { return x != y; }             \
    static ibool_t   INLINE pre##gt   (t x, t y) { return x >  y; }             \
    static ibool_t   INLINE pre##ge   (t x, t y) { return x >= y; }             \
    static ibool_t   INLINE pre##lt   (t x, t y) { return x <  y; }             \
    static ibool_t   INLINE pre##le   (t x, t y) { return x <= y; }             \

MK_SIMPLE_CMPS(ierror_t, ierror_)
MK_SIMPLE_CMPS(ibool_t,  ibool_)
MK_SIMPLE_CMPS(idate_t,  idate_)
MK_SIMPLE_CMPS(iunit_t,  iunit_)

static idouble_t INLINE iint_extend   (iint_t    x)              { return x; }
static iint_t    INLINE iint_add      (iint_t    x, iint_t    y) { return x +  y; }
static iint_t    INLINE iint_sub      (iint_t    x, iint_t    y) { return x -  y; }
static iint_t    INLINE iint_mul      (iint_t    x, iint_t    y) { return x *  y; }

MK_SIMPLE_CMPS(iint_t, iint_)

static iint_t    INLINE idouble_trunc (idouble_t x)              { return (iint_t)x; }
static idouble_t INLINE idouble_add   (idouble_t x, idouble_t y) { return x + y; }
static idouble_t INLINE idouble_sub   (idouble_t x, idouble_t y) { return x - y; }
static idouble_t INLINE idouble_mul   (idouble_t x, idouble_t y) { return x * y; }
static idouble_t INLINE idouble_pow   (idouble_t x, idouble_t y) { return pow(x, y); }
static idouble_t INLINE idouble_div   (idouble_t x, idouble_t y) { return x / y; }
static idouble_t INLINE idouble_log   (idouble_t x)              { return log(x); }
static idouble_t INLINE idouble_exp   (idouble_t x)              { return exp(x); }

MK_SIMPLE_CMPS(idouble_t, idouble_)

static ibool_t   INLINE istring_gt    (istring_t x, istring_t y) { return strcmp(x, y) >  0; }
static ibool_t   INLINE istring_ge    (istring_t x, istring_t y) { return strcmp(x, y) >= 0; }
static ibool_t   INLINE istring_lt    (istring_t x, istring_t y) { return strcmp(x, y) <  0; }
static ibool_t   INLINE istring_le    (istring_t x, istring_t y) { return strcmp(x, y) <= 0; }
static ibool_t   INLINE istring_eq    (istring_t x, istring_t y) { return strcmp(x, y) == 0; }
static ibool_t   INLINE istring_ne    (istring_t x, istring_t y) { return strcmp(x, y) != 0; }

// 03-array.h
#line 1 "03-array.h"
typedef struct
{
    iint_t count;
} iarray_struct;
// payload goes straight after

#define ARRAY_OF(t) iarray_t__##t
#define ARRAY_FUN(f,pre) iarray__##pre##f

// I'm not certain there's a point having a different one for each type.
// It makes it look a little better, but I don't think it's any safer.
#define MK_ARRAY_STRUCT(t) typedef iarray_struct* ARRAY_OF(t);

// get payload by advancing pointer by size of struct
// (which should be equivalent to straight after struct fields)
// then casting to t*
#define ARRAY_PAYLOAD(x,t) ((t*)(x+1))


#define MK_ARRAY_LENGTH(t,pre)                                                  \
    static iint_t INLINE ARRAY_FUN(length,pre) (ARRAY_OF(t) arr)                \
    { return arr->count; }

#define MK_ARRAY_EQ(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(eq,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        if (x->count != y->count) return ifalse;                                \
        for (iint_t ix = 0; ix != x->count; ++ix) {                             \
            if (!pre##eq(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        return itrue;                                                           \
    }

#define MK_ARRAY_LT(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(lt,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        iint_t min = (x->count < y->count) ? x->count : y->count;               \
        for (iint_t ix = 0; ix != min; ++ix) {                                  \
            if (!pre##lt(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        if (x->count < y->count)                                                \
            return itrue;                                                       \
        else                                                                    \
            return ifalse;                                                      \
    }

#define MK_ARRAY_CMP(t,pre,op,ret)                                              \
    static ibool_t INLINE ARRAY_FUN(op,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    { return ret ; }                                                            \

#define MK_ARRAY_CMPS(t,pre)                                                    \
    MK_ARRAY_EQ(t,pre)                                                          \
    MK_ARRAY_LT(t,pre)                                                          \
    MK_ARRAY_CMP(t,pre,ne, !ARRAY_FUN(eq,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,le,  ARRAY_FUN(lt,pre) (x,y) || ARRAY_FUN(eq,pre) (x,y)) \
    MK_ARRAY_CMP(t,pre,ge, !ARRAY_FUN(lt,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,gt, !ARRAY_FUN(le,pre) (x,y))                            \



#define MK_ARRAY_INDEX(t,pre)                                                   \
    static t       INLINE ARRAY_FUN(index,pre) (ARRAY_OF(t) x, iint_t ix)       \
    { return ARRAY_PAYLOAD(x,t)[ix]; }                                          \


#define MK_ARRAY_CREATE(t,pre)                                                  \
    static ARRAY_OF(t)  INLINE ARRAY_FUN(create,pre)                            \
                                        (iallocate_t alloc, iint_t sz)          \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(iarray_struct);      \
        ARRAY_OF(t)  ret = (ARRAY_OF(t))allocate(alloc, bytes);                 \
        ret->count = sz;                                                        \
        return ret;                                                             \
    }                                                                           \

#define MK_ARRAY_PUT(t,pre)                                                     \
    static iunit_t INLINE ARRAY_FUN(put,pre)   (ARRAY_OF(t) x, iint_t ix, t v)  \
    {                                                                           \
        ARRAY_PAYLOAD(x,t)[ix] = v;                                             \
        return iunit;                                                           \
    }                                                                           \

                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \



#define MAKE_ARRAY(t,pre)                                                       \
    MK_ARRAY_STRUCT (t)                                                         \
    MK_ARRAY_LENGTH (t,pre)                                                     \
    MK_ARRAY_CMPS   (t,pre)                                                     \
    MK_ARRAY_INDEX  (t,pre)                                                     \
    MK_ARRAY_CREATE (t,pre)                                                     \
    MK_ARRAY_PUT    (t,pre)                                                     \
    // MK_ARRAY_ZIP    (t,pre)                                                     \

// TEMPORARY
typedef void* iallocate_t;
void* allocate(iallocate_t t, iint_t sz);

MAKE_ARRAY(idouble_t,   idouble_)
MAKE_ARRAY(iint_t,      iint_)
MAKE_ARRAY(ierror_t,    ierror_)
MAKE_ARRAY(ibool_t,     ibool_)
MAKE_ARRAY(idate_t,     idate_)
MAKE_ARRAY(iunit_t,     iunit_)

// 04-buffer.h
#line 1 "04-buffer.h"
typedef struct
{
    iint_t max_size;
    iint_t cur_size;
    iint_t head;
} ibuf_struct;
/*
 Invariants
  0 <= cur_size <= max_size
  0 <= head     <  max_size

  read = ARRAY[ head..(head+cur_size) % max_size )

*/

#define BUF_OF(t)   ibuf_t__##t
#define BUF_FUN(f,pre) ibuf__##pre##f

#define MK_BUF_STRUCT(t) typedef ibuf_struct* BUF_OF(t);

#define BUF_PAYLOAD(x,t) ((t*)(x+1))

/*
Make
 Pre
  0 <= sz

 Post
  cur_size' = 0
  head'     = 0
  max_size' = sz
  ARRAY'    = [??...]

  read'     = ARRAY'[head'..head'+cur_size')
            = ARRAY'[0..0)
            = []

  (invariants hold)

*/
#define MK_BUF_MAKE(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(make,pre)                                   \
                     (iallocate_t alloc, iint_t sz)                             \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(ibuf_struct);                \
        BUF_OF(t) ret    = (BUF_OF(t))allocate(alloc, bytes);                   \
        ret->max_size = sz;                                                     \
        ret->cur_size = 0;                                                      \
        ret->head     = 0;                                                      \
        return ret;                                                             \
    }

/*
Push(buf, val)
 Pre
  (buf invariants hold)
 Post
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]

*/

/*
Push(buf, val)
  {buf invariants hold}
  ...
  {
  head'     = if cur_size < max_size
              then head
              else (head+1) % max_size

  cur_size' = min max_size (cur_size+1)

  ARRAY'    = ARRAY[update]:=val
  read'     = ARRAY[head'..(head'+cur_size') % max_size)
  update    = (head' + cur_size') % max_size
  }
  ==>
  {
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]
  }

*/

#define MK_BUF_PUSH(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(push,pre) (BUF_OF(t) buf, t val)            \
    {                                                                           \
        iint_t head_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->head                                            \
                        : (buf->head+1) % buf->max_size;                        \
                                                                                \
        iint_t size_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->cur_size + 1                                    \
                        :  buf->max_size;                                       \
                                                                                \
        iint_t update   = (head_new + buf->cur_size) % buf->max_size;           \
                                                                                \
        BUF_PAYLOAD(buf,t)[update] = val;                                       \
                                                                                \
        buf->head     = head_new;                                               \
        buf->cur_size = size_new;                                               \
        return buf;                                                             \
    }



                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \


/*
Read(buf)
 Pre
  (buf invariants hold)
 Post
  out       = read
*/

#define MK_BUF_READ(t,pre)                                                      \
    static ARRAY_OF(t) INLINE BUF_FUN(read,pre)                                 \
                       (iallocate_t alloc, BUF_OF(t) buf)                       \
    {                                                                           \
        ARRAY_OF(t) out = ARRAY_FUN(create,pre)(alloc, buf->cur_size);          \
                                                                                \
        for (iint_t ix = 0; ix != buf->cur_size; ++ix)                          \
        {                                                                       \
            iint_t in = (buf->head + ix) % buf->max_size;                       \
            ARRAY_PAYLOAD(out,t)[ix] = BUF_PAYLOAD(buf,t)[in];                  \
        }                                                                       \
                                                                                \
        return out;                                                             \
    }



#define MAKE_BUF(t,pre)                                                         \
    MK_BUF_STRUCT (t)                                                           \
    MK_BUF_MAKE   (t,pre)                                                       \
    MK_BUF_PUSH   (t,pre)                                                       \
    MK_BUF_READ   (t,pre)                                                       \

MAKE_BUF(idouble_t,   idouble_)
MAKE_BUF(iint_t,      iint_)
MAKE_BUF(ierror_t,    ierror_)
MAKE_BUF(ibool_t,     ibool_)
MAKE_BUF(idate_t,     idate_)
MAKE_BUF(iunit_t,     iunit_)

#line 1 "state definition"
typedef struct {
    /* inputs */
    idate_t    gen_date;
    iint_t     new_count;
    ibool_t    *new_gen_fact_simp_358_simp_360;
    ierror_t   *new_gen_fact_simp_358_simp_361;
    iint_t     *new_gen_fact_simp_358_simp_362;
    idate_t    *new_gen_fact_simp_359;

    /* outputs */
    ibool_t    repl_ix_0;
    ierror_t   repl_ix_1;
    idouble_t  repl_ix_2;

    /* resumables */
    ibool_t    has_acc_a_conv_105_simp_69;
    ibool_t    res_acc_a_conv_105_simp_69;
    ibool_t    has_acc_a_conv_105_simp_70;
    ierror_t   res_acc_a_conv_105_simp_70;
    ibool_t    has_acc_a_conv_105_simp_71_simp_73;
    idouble_t  res_acc_a_conv_105_simp_71_simp_73;
    ibool_t    has_acc_a_conv_105_simp_71_simp_72_simp_74;
    idouble_t  res_acc_a_conv_105_simp_71_simp_72_simp_74;
    ibool_t    has_acc_a_conv_105_simp_71_simp_72_simp_75;
    idouble_t  res_acc_a_conv_105_simp_71_simp_72_simp_75;
    ibool_t    has_acc_a_conv_12_simp_62;
    ibool_t    res_acc_a_conv_12_simp_62;
    ibool_t    has_acc_a_conv_12_simp_63;
    ierror_t   res_acc_a_conv_12_simp_63;
    ibool_t    has_acc_a_conv_12_simp_64_simp_66;
    idouble_t  res_acc_a_conv_12_simp_64_simp_66;
    ibool_t    has_acc_a_conv_12_simp_64_simp_65_simp_67;
    idouble_t  res_acc_a_conv_12_simp_64_simp_65_simp_67;
    ibool_t    has_acc_a_conv_12_simp_64_simp_65_simp_68;
    idouble_t  res_acc_a_conv_12_simp_64_simp_65_simp_68;
} icicle_state_t;

#line 1 "compute function"
void compute(icicle_state_t *s)
{
    ibool_t    a_conv_105_simp_315;
    ierror_t   a_conv_105_simp_316;
    idouble_t  a_conv_105_simp_317_simp_319;
    idouble_t  a_conv_105_simp_317_simp_318_simp_320;
    ibool_t    a_conv_12_simp_308;
    ierror_t   a_conv_12_simp_309;
    idouble_t  a_conv_12_simp_310_simp_312;
    idouble_t  a_conv_12_simp_310_simp_311_simp_313;
    ibool_t    acc_a_conv_105_simp_201;
    ierror_t   acc_a_conv_105_simp_202;
    ibool_t    acc_a_conv_105_simp_69;
    ierror_t   acc_a_conv_105_simp_70;
    idouble_t  acc_a_conv_105_simp_203_simp_205;
    idouble_t  acc_a_conv_105_simp_203_simp_204_simp_206;
    idouble_t  acc_a_conv_105_simp_203_simp_204_simp_207;
    idouble_t  acc_a_conv_105_simp_71_simp_73;
    idouble_t  acc_a_conv_105_simp_71_simp_72_simp_74;
    idouble_t  acc_a_conv_105_simp_71_simp_72_simp_75;
    ibool_t    acc_a_conv_12_simp_62;
    ierror_t   acc_a_conv_12_simp_63;
    ibool_t    acc_a_conv_12_simp_82;
    ierror_t   acc_a_conv_12_simp_83;
    idouble_t  acc_a_conv_12_simp_64_simp_66;
    idouble_t  acc_a_conv_12_simp_64_simp_65_simp_67;
    idouble_t  acc_a_conv_12_simp_64_simp_65_simp_68;
    idouble_t  acc_a_conv_12_simp_84_simp_86;
    idouble_t  acc_a_conv_12_simp_84_simp_85_simp_87;
    idouble_t  acc_a_conv_12_simp_84_simp_85_simp_88;
    ibool_t    flat_38;
    ibool_t    flat_0_simp_76;
    ierror_t   flat_0_simp_77;
    idouble_t  flat_0_simp_78;
    ibool_t    flat_0_simp_79;
    ierror_t   flat_0_simp_80;
    idouble_t  flat_0_simp_81;
    ibool_t    flat_1_simp_182;
    ierror_t   flat_1_simp_183;
    ibool_t    flat_1_simp_89;
    ierror_t   flat_1_simp_90;
    idouble_t  flat_1_simp_184_simp_186;
    idouble_t  flat_1_simp_184_simp_185_simp_187;
    idouble_t  flat_1_simp_184_simp_185_simp_188;
    idouble_t  flat_1_simp_91_simp_93;
    idouble_t  flat_1_simp_91_simp_92_simp_94;
    idouble_t  flat_1_simp_91_simp_92_simp_95;
    ibool_t    flat_10_simp_154;
    ierror_t   flat_10_simp_155;
    ibool_t    flat_10_simp_175;
    ierror_t   flat_10_simp_176;
    idouble_t  flat_10_simp_156_simp_158;
    idouble_t  flat_10_simp_156_simp_157_simp_159;
    idouble_t  flat_10_simp_156_simp_157_simp_160;
    idouble_t  flat_10_simp_177_simp_179;
    idouble_t  flat_10_simp_177_simp_178_simp_180;
    idouble_t  flat_10_simp_177_simp_178_simp_181;
    ibool_t    flat_13_simp_161;
    ierror_t   flat_13_simp_162;
    ibool_t    flat_13_simp_168;
    ierror_t   flat_13_simp_169;
    idouble_t  flat_13_simp_163_simp_165;
    idouble_t  flat_13_simp_163_simp_164_simp_166;
    idouble_t  flat_13_simp_163_simp_164_simp_167;
    idouble_t  flat_13_simp_170_simp_172;
    idouble_t  flat_13_simp_170_simp_171_simp_173;
    idouble_t  flat_13_simp_170_simp_171_simp_174;
    ibool_t    flat_22_simp_117;
    ierror_t   flat_22_simp_118;
    idouble_t  flat_22_simp_119;
    ibool_t    flat_22_simp_126;
    ierror_t   flat_22_simp_127;
    idouble_t  flat_22_simp_128;
    ibool_t    flat_23_simp_129;
    ierror_t   flat_23_simp_130;
    idouble_t  flat_23_simp_131;
    ibool_t    flat_23_simp_132;
    ierror_t   flat_23_simp_133;
    idouble_t  flat_23_simp_134;
    ibool_t    flat_28_simp_120;
    ierror_t   flat_28_simp_121;
    idouble_t  flat_28_simp_122;
    ibool_t    flat_28_simp_123;
    ierror_t   flat_28_simp_124;
    idouble_t  flat_28_simp_125;
    ibool_t    flat_37_simp_189;
    ibool_t    flat_37_simp_191;
    ibool_t    flat_37_simp_192;
    ibool_t    flat_37_simp_194;
    ibool_t    flat_39_simp_195;
    ierror_t   flat_39_simp_196;
    idouble_t  flat_39_simp_197;
    ibool_t    flat_39_simp_198;
    ierror_t   flat_39_simp_199;
    idouble_t  flat_39_simp_200;
    ierror_t   flat_4_simp_100;
    idouble_t  flat_4_simp_101;
    ibool_t    flat_4_simp_96;
    ierror_t   flat_4_simp_97;
    idouble_t  flat_4_simp_98;
    ibool_t    flat_4_simp_99;
    ibool_t    flat_40_simp_208;
    ierror_t   flat_40_simp_209;
    ibool_t    flat_40_simp_301;
    ierror_t   flat_40_simp_302;
    idouble_t  flat_40_simp_210_simp_212;
    idouble_t  flat_40_simp_210_simp_211_simp_213;
    idouble_t  flat_40_simp_210_simp_211_simp_214;
    idouble_t  flat_40_simp_303_simp_305;
    idouble_t  flat_40_simp_303_simp_304_simp_306;
    idouble_t  flat_40_simp_303_simp_304_simp_307;
    ibool_t    flat_43_simp_215;
    ierror_t   flat_43_simp_216;
    idouble_t  flat_43_simp_217;
    ibool_t    flat_43_simp_218;
    ierror_t   flat_43_simp_219;
    idouble_t  flat_43_simp_220;
    ibool_t    flat_44_simp_221;
    ierror_t   flat_44_simp_222;
    idouble_t  flat_44_simp_223;
    ibool_t    flat_44_simp_224;
    ierror_t   flat_44_simp_225;
    idouble_t  flat_44_simp_226;
    ibool_t    flat_45_simp_227;
    ierror_t   flat_45_simp_228;
    idouble_t  flat_45_simp_229;
    ibool_t    flat_45_simp_230;
    ierror_t   flat_45_simp_231;
    idouble_t  flat_45_simp_232;
    ibool_t    flat_46_simp_233;
    ierror_t   flat_46_simp_234;
    idouble_t  flat_46_simp_235;
    ibool_t    flat_46_simp_254;
    ierror_t   flat_46_simp_255;
    idouble_t  flat_46_simp_256;
    ibool_t    flat_47_simp_257;
    ierror_t   flat_47_simp_258;
    idouble_t  flat_47_simp_259;
    ibool_t    flat_47_simp_260;
    ierror_t   flat_47_simp_261;
    idouble_t  flat_47_simp_262;
    ibool_t    flat_48_simp_263;
    ierror_t   flat_48_simp_264;
    ibool_t    flat_48_simp_268;
    ierror_t   flat_48_simp_269;
    idouble_t  flat_48_simp_265_simp_266;
    idouble_t  flat_48_simp_265_simp_267;
    idouble_t  flat_48_simp_270_simp_271;
    idouble_t  flat_48_simp_270_simp_272;
    ibool_t    flat_49_simp_273;
    ierror_t   flat_49_simp_274;
    ibool_t    flat_49_simp_294;
    ierror_t   flat_49_simp_295;
    idouble_t  flat_49_simp_275_simp_277;
    idouble_t  flat_49_simp_275_simp_276_simp_278;
    idouble_t  flat_49_simp_275_simp_276_simp_279;
    idouble_t  flat_49_simp_296_simp_298;
    idouble_t  flat_49_simp_296_simp_297_simp_299;
    idouble_t  flat_49_simp_296_simp_297_simp_300;
    ibool_t    flat_5_simp_102;
    ierror_t   flat_5_simp_103;
    idouble_t  flat_5_simp_104;
    ibool_t    flat_5_simp_105;
    ierror_t   flat_5_simp_106;
    idouble_t  flat_5_simp_107;
    ibool_t    flat_52_simp_280;
    ierror_t   flat_52_simp_281;
    ibool_t    flat_52_simp_287;
    ierror_t   flat_52_simp_288;
    idouble_t  flat_52_simp_282_simp_284;
    idouble_t  flat_52_simp_282_simp_283_simp_285;
    idouble_t  flat_52_simp_282_simp_283_simp_286;
    idouble_t  flat_52_simp_289_simp_291;
    idouble_t  flat_52_simp_289_simp_290_simp_292;
    idouble_t  flat_52_simp_289_simp_290_simp_293;
    ibool_t    flat_6_simp_108;
    ierror_t   flat_6_simp_109;
    idouble_t  flat_6_simp_110;
    ibool_t    flat_6_simp_111;
    ierror_t   flat_6_simp_112;
    idouble_t  flat_6_simp_113;
    ibool_t    flat_61_simp_236;
    ierror_t   flat_61_simp_237;
    idouble_t  flat_61_simp_238;
    ibool_t    flat_61_simp_245;
    ierror_t   flat_61_simp_246;
    idouble_t  flat_61_simp_247;
    ibool_t    flat_62_simp_248;
    ierror_t   flat_62_simp_249;
    idouble_t  flat_62_simp_250;
    ibool_t    flat_62_simp_251;
    ierror_t   flat_62_simp_252;
    idouble_t  flat_62_simp_253;
    ibool_t    flat_67_simp_239;
    ierror_t   flat_67_simp_240;
    idouble_t  flat_67_simp_241;
    ibool_t    flat_67_simp_242;
    ierror_t   flat_67_simp_243;
    idouble_t  flat_67_simp_244;
    ibool_t    flat_7_simp_114;
    ierror_t   flat_7_simp_115;
    idouble_t  flat_7_simp_116;
    ibool_t    flat_7_simp_135;
    ierror_t   flat_7_simp_136;
    idouble_t  flat_7_simp_137;
    ibool_t    flat_8_simp_138;
    ierror_t   flat_8_simp_139;
    idouble_t  flat_8_simp_140;
    ibool_t    flat_8_simp_141;
    ierror_t   flat_8_simp_142;
    idouble_t  flat_8_simp_143;
    ibool_t    flat_84_simp_322;
    ierror_t   flat_84_simp_323;
    idouble_t  flat_84_simp_324;
    ibool_t    flat_84_simp_325;
    ierror_t   flat_84_simp_326;
    idouble_t  flat_84_simp_327;
    ibool_t    flat_85_simp_328;
    ierror_t   flat_85_simp_329;
    idouble_t  flat_85_simp_330;
    ibool_t    flat_85_simp_331;
    ierror_t   flat_85_simp_332;
    idouble_t  flat_85_simp_333;
    ibool_t    flat_86_simp_334;
    ierror_t   flat_86_simp_335;
    idouble_t  flat_86_simp_336;
    ibool_t    flat_86_simp_355;
    ierror_t   flat_86_simp_356;
    idouble_t  flat_86_simp_357;
    ibool_t    flat_89_simp_337;
    ierror_t   flat_89_simp_338;
    idouble_t  flat_89_simp_339;
    ibool_t    flat_89_simp_340;
    ierror_t   flat_89_simp_341;
    idouble_t  flat_89_simp_342;
    ibool_t    flat_9_simp_144;
    ierror_t   flat_9_simp_145;
    ibool_t    flat_9_simp_149;
    ierror_t   flat_9_simp_150;
    idouble_t  flat_9_simp_146_simp_147;
    idouble_t  flat_9_simp_146_simp_148;
    idouble_t  flat_9_simp_151_simp_152;
    idouble_t  flat_9_simp_151_simp_153;
    ibool_t    flat_90_simp_343;
    ierror_t   flat_90_simp_344;
    idouble_t  flat_90_simp_345;
    ibool_t    flat_90_simp_346;
    ierror_t   flat_90_simp_347;
    idouble_t  flat_90_simp_348;
    ibool_t    flat_91_simp_349;
    ierror_t   flat_91_simp_350;
    idouble_t  flat_91_simp_351;
    ibool_t    flat_91_simp_352;
    ierror_t   flat_91_simp_353;
    idouble_t  flat_91_simp_354;

    acc_a_conv_12_simp_62                = itrue;                                /* init */
    acc_a_conv_12_simp_63                = ierror_tombstone;                     /* init */
    acc_a_conv_12_simp_64_simp_65_simp_67 = 0.0;                                 /* init */
    acc_a_conv_12_simp_64_simp_65_simp_68 = 0.0;                                 /* init */
    acc_a_conv_12_simp_64_simp_66        = 0.0;                                  /* init */
    acc_a_conv_105_simp_69               = itrue;                                /* init */
    acc_a_conv_105_simp_70               = ierror_tombstone;                     /* init */
    acc_a_conv_105_simp_71_simp_72_simp_74 = 0.0;                                /* init */
    acc_a_conv_105_simp_71_simp_72_simp_75 = 0.0;                                /* init */
    acc_a_conv_105_simp_71_simp_73       = 0.0;                                  /* init */
    
    if (s->has_acc_a_conv_12_simp_62) {
        acc_a_conv_12_simp_62            = s->res_acc_a_conv_12_simp_62;         /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_63) {
        acc_a_conv_12_simp_63            = s->res_acc_a_conv_12_simp_63;         /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_64_simp_65_simp_67) {
        acc_a_conv_12_simp_64_simp_65_simp_67 = s->res_acc_a_conv_12_simp_64_simp_65_simp_67; /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_64_simp_65_simp_68) {
        acc_a_conv_12_simp_64_simp_65_simp_68 = s->res_acc_a_conv_12_simp_64_simp_65_simp_68; /* load */
    }
    
    if (s->has_acc_a_conv_12_simp_64_simp_66) {
        acc_a_conv_12_simp_64_simp_66    = s->res_acc_a_conv_12_simp_64_simp_66; /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_69) {
        acc_a_conv_105_simp_69           = s->res_acc_a_conv_105_simp_69;        /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_70) {
        acc_a_conv_105_simp_70           = s->res_acc_a_conv_105_simp_70;        /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_71_simp_72_simp_74) {
        acc_a_conv_105_simp_71_simp_72_simp_74 = s->res_acc_a_conv_105_simp_71_simp_72_simp_74; /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_71_simp_72_simp_75) {
        acc_a_conv_105_simp_71_simp_72_simp_75 = s->res_acc_a_conv_105_simp_71_simp_72_simp_75; /* load */
    }
    
    if (s->has_acc_a_conv_105_simp_71_simp_73) {
        acc_a_conv_105_simp_71_simp_73   = s->res_acc_a_conv_105_simp_71_simp_73; /* load */
    }
    
    const iint_t    new_count            = s->new_count;
    const ibool_t   *const new_gen_fact_simp_358_simp_360 = s->new_gen_fact_simp_358_simp_360;
    const ierror_t  *const new_gen_fact_simp_358_simp_361 = s->new_gen_fact_simp_358_simp_361;
    const iint_t    *const new_gen_fact_simp_358_simp_362 = s->new_gen_fact_simp_358_simp_362;
    const idate_t   *const new_gen_fact_simp_359 = s->new_gen_fact_simp_359;
    
    for (iint_t i = 0; i < new_count; i++) {
        ibool_t    gen_fact_simp_358_simp_360 = new_gen_fact_simp_358_simp_360[i];
        ierror_t   gen_fact_simp_358_simp_361 = new_gen_fact_simp_358_simp_361[i];
        iint_t     gen_fact_simp_358_simp_362 = new_gen_fact_simp_358_simp_362[i];
        idate_t    gen_fact_simp_359     = new_gen_fact_simp_359[i];
        flat_0_simp_76                   = ifalse;                               /* init */
        flat_0_simp_77                   = ierror_tombstone;                     /* init */
        flat_0_simp_78                   = 0.0;                                  /* init */
        
        if (gen_fact_simp_358_simp_360) {
            idouble_t  simp_1            = iint_extend (gen_fact_simp_358_simp_362); /* let */
            flat_0_simp_76               = itrue;                                /* write */
            flat_0_simp_77               = ierror_tombstone;                     /* write */
            flat_0_simp_78               = simp_1;                               /* write */
        } else {
            flat_0_simp_76               = ifalse;                               /* write */
            flat_0_simp_77               = gen_fact_simp_358_simp_361;           /* write */
            flat_0_simp_78               = 0.0;                                  /* write */
        }
        
        flat_0_simp_79                   = flat_0_simp_76;                       /* read */
        flat_0_simp_80                   = flat_0_simp_77;                       /* read */
        flat_0_simp_81                   = flat_0_simp_78;                       /* read */
        acc_a_conv_12_simp_82            = acc_a_conv_12_simp_62;                /* read */
        acc_a_conv_12_simp_83            = acc_a_conv_12_simp_63;                /* read */
        acc_a_conv_12_simp_84_simp_85_simp_87 = acc_a_conv_12_simp_64_simp_65_simp_67; /* read */
        acc_a_conv_12_simp_84_simp_85_simp_88 = acc_a_conv_12_simp_64_simp_65_simp_68; /* read */
        acc_a_conv_12_simp_84_simp_86    = acc_a_conv_12_simp_64_simp_66;        /* read */
        flat_1_simp_89                   = ifalse;                               /* init */
        flat_1_simp_90                   = ierror_tombstone;                     /* init */
        flat_1_simp_91_simp_92_simp_94   = 0.0;                                  /* init */
        flat_1_simp_91_simp_92_simp_95   = 0.0;                                  /* init */
        flat_1_simp_91_simp_93           = 0.0;                                  /* init */
        
        if (acc_a_conv_12_simp_82) {
            idouble_t  nn_conv_19        = idouble_add (acc_a_conv_12_simp_84_simp_85_simp_87, 1.0); /* let */
            flat_4_simp_96               = ifalse;                               /* init */
            flat_4_simp_97               = ierror_tombstone;                     /* init */
            flat_4_simp_98               = 0.0;                                  /* init */
            
            if (flat_0_simp_79) {
                idouble_t  simp_7        = idouble_sub (flat_0_simp_81, acc_a_conv_12_simp_84_simp_85_simp_88); /* let */
                flat_4_simp_96           = itrue;                                /* write */
                flat_4_simp_97           = ierror_tombstone;                     /* write */
                flat_4_simp_98           = simp_7;                               /* write */
            } else {
                flat_4_simp_96           = ifalse;                               /* write */
                flat_4_simp_97           = flat_0_simp_80;                       /* write */
                flat_4_simp_98           = 0.0;                                  /* write */
            }
            
            flat_4_simp_99               = flat_4_simp_96;                       /* read */
            flat_4_simp_100              = flat_4_simp_97;                       /* read */
            flat_4_simp_101              = flat_4_simp_98;                       /* read */
            flat_5_simp_102              = ifalse;                               /* init */
            flat_5_simp_103              = ierror_tombstone;                     /* init */
            flat_5_simp_104              = 0.0;                                  /* init */
            
            if (flat_4_simp_99) {
                idouble_t  simp_11       = idouble_div (flat_4_simp_101, nn_conv_19); /* let */
                flat_5_simp_102          = itrue;                                /* write */
                flat_5_simp_103          = ierror_tombstone;                     /* write */
                flat_5_simp_104          = simp_11;                              /* write */
            } else {
                flat_5_simp_102          = ifalse;                               /* write */
                flat_5_simp_103          = flat_4_simp_100;                      /* write */
                flat_5_simp_104          = 0.0;                                  /* write */
            }
            
            flat_5_simp_105              = flat_5_simp_102;                      /* read */
            flat_5_simp_106              = flat_5_simp_103;                      /* read */
            flat_5_simp_107              = flat_5_simp_104;                      /* read */
            flat_6_simp_108              = ifalse;                               /* init */
            flat_6_simp_109              = ierror_tombstone;                     /* init */
            flat_6_simp_110              = 0.0;                                  /* init */
            
            if (flat_5_simp_105) {
                idouble_t  simp_13       = idouble_add (acc_a_conv_12_simp_84_simp_85_simp_88, flat_5_simp_107); /* let */
                flat_6_simp_108          = itrue;                                /* write */
                flat_6_simp_109          = ierror_tombstone;                     /* write */
                flat_6_simp_110          = simp_13;                              /* write */
            } else {
                flat_6_simp_108          = ifalse;                               /* write */
                flat_6_simp_109          = flat_5_simp_106;                      /* write */
                flat_6_simp_110          = 0.0;                                  /* write */
            }
            
            flat_6_simp_111              = flat_6_simp_108;                      /* read */
            flat_6_simp_112              = flat_6_simp_109;                      /* read */
            flat_6_simp_113              = flat_6_simp_110;                      /* read */
            flat_7_simp_114              = ifalse;                               /* init */
            flat_7_simp_115              = ierror_tombstone;                     /* init */
            flat_7_simp_116              = 0.0;                                  /* init */
            
            if (flat_4_simp_99) {
                flat_22_simp_117         = ifalse;                               /* init */
                flat_22_simp_118         = ierror_tombstone;                     /* init */
                flat_22_simp_119         = 0.0;                                  /* init */
                
                if (flat_0_simp_79) {
                    flat_28_simp_120     = ifalse;                               /* init */
                    flat_28_simp_121     = ierror_tombstone;                     /* init */
                    flat_28_simp_122     = 0.0;                                  /* init */
                    
                    if (flat_6_simp_111) {
                        idouble_t  simp_19 = idouble_sub (flat_0_simp_81, flat_6_simp_113); /* let */
                        flat_28_simp_120 = itrue;                                /* write */
                        flat_28_simp_121 = ierror_tombstone;                     /* write */
                        flat_28_simp_122 = simp_19;                              /* write */
                    } else {
                        flat_28_simp_120 = ifalse;                               /* write */
                        flat_28_simp_121 = flat_6_simp_112;                      /* write */
                        flat_28_simp_122 = 0.0;                                  /* write */
                    }
                    
                    flat_28_simp_123     = flat_28_simp_120;                     /* read */
                    flat_28_simp_124     = flat_28_simp_121;                     /* read */
                    flat_28_simp_125     = flat_28_simp_122;                     /* read */
                    flat_22_simp_117     = flat_28_simp_123;                     /* write */
                    flat_22_simp_118     = flat_28_simp_124;                     /* write */
                    flat_22_simp_119     = flat_28_simp_125;                     /* write */
                } else {
                    flat_22_simp_117     = ifalse;                               /* write */
                    flat_22_simp_118     = flat_0_simp_80;                       /* write */
                    flat_22_simp_119     = 0.0;                                  /* write */
                }
                
                flat_22_simp_126         = flat_22_simp_117;                     /* read */
                flat_22_simp_127         = flat_22_simp_118;                     /* read */
                flat_22_simp_128         = flat_22_simp_119;                     /* read */
                flat_23_simp_129         = ifalse;                               /* init */
                flat_23_simp_130         = ierror_tombstone;                     /* init */
                flat_23_simp_131         = 0.0;                                  /* init */
                
                if (flat_22_simp_126) {
                    idouble_t  simp_23   = idouble_mul (flat_4_simp_101, flat_22_simp_128); /* let */
                    flat_23_simp_129     = itrue;                                /* write */
                    flat_23_simp_130     = ierror_tombstone;                     /* write */
                    flat_23_simp_131     = simp_23;                              /* write */
                } else {
                    flat_23_simp_129     = ifalse;                               /* write */
                    flat_23_simp_130     = flat_22_simp_127;                     /* write */
                    flat_23_simp_131     = 0.0;                                  /* write */
                }
                
                flat_23_simp_132         = flat_23_simp_129;                     /* read */
                flat_23_simp_133         = flat_23_simp_130;                     /* read */
                flat_23_simp_134         = flat_23_simp_131;                     /* read */
                flat_7_simp_114          = flat_23_simp_132;                     /* write */
                flat_7_simp_115          = flat_23_simp_133;                     /* write */
                flat_7_simp_116          = flat_23_simp_134;                     /* write */
            } else {
                flat_7_simp_114          = ifalse;                               /* write */
                flat_7_simp_115          = flat_4_simp_100;                      /* write */
                flat_7_simp_116          = 0.0;                                  /* write */
            }
            
            flat_7_simp_135              = flat_7_simp_114;                      /* read */
            flat_7_simp_136              = flat_7_simp_115;                      /* read */
            flat_7_simp_137              = flat_7_simp_116;                      /* read */
            flat_8_simp_138              = ifalse;                               /* init */
            flat_8_simp_139              = ierror_tombstone;                     /* init */
            flat_8_simp_140              = 0.0;                                  /* init */
            
            if (flat_7_simp_135) {
                idouble_t  simp_25       = idouble_add (acc_a_conv_12_simp_84_simp_86, flat_7_simp_137); /* let */
                flat_8_simp_138          = itrue;                                /* write */
                flat_8_simp_139          = ierror_tombstone;                     /* write */
                flat_8_simp_140          = simp_25;                              /* write */
            } else {
                flat_8_simp_138          = ifalse;                               /* write */
                flat_8_simp_139          = flat_7_simp_136;                      /* write */
                flat_8_simp_140          = 0.0;                                  /* write */
            }
            
            flat_8_simp_141              = flat_8_simp_138;                      /* read */
            flat_8_simp_142              = flat_8_simp_139;                      /* read */
            flat_8_simp_143              = flat_8_simp_140;                      /* read */
            flat_9_simp_144              = ifalse;                               /* init */
            flat_9_simp_145              = ierror_tombstone;                     /* init */
            flat_9_simp_146_simp_147     = 0.0;                                  /* init */
            flat_9_simp_146_simp_148     = 0.0;                                  /* init */
            
            if (flat_6_simp_111) {
                flat_9_simp_144          = itrue;                                /* write */
                flat_9_simp_145          = ierror_tombstone;                     /* write */
                flat_9_simp_146_simp_147 = nn_conv_19;                           /* write */
                flat_9_simp_146_simp_148 = flat_6_simp_113;                      /* write */
            } else {
                flat_9_simp_144          = ifalse;                               /* write */
                flat_9_simp_145          = flat_6_simp_112;                      /* write */
                flat_9_simp_146_simp_147 = 0.0;                                  /* write */
                flat_9_simp_146_simp_148 = 0.0;                                  /* write */
            }
            
            flat_9_simp_149              = flat_9_simp_144;                      /* read */
            flat_9_simp_150              = flat_9_simp_145;                      /* read */
            flat_9_simp_151_simp_152     = flat_9_simp_146_simp_147;             /* read */
            flat_9_simp_151_simp_153     = flat_9_simp_146_simp_148;             /* read */
            flat_10_simp_154             = ifalse;                               /* init */
            flat_10_simp_155             = ierror_tombstone;                     /* init */
            flat_10_simp_156_simp_157_simp_159 = 0.0;                            /* init */
            flat_10_simp_156_simp_157_simp_160 = 0.0;                            /* init */
            flat_10_simp_156_simp_158    = 0.0;                                  /* init */
            
            if (flat_9_simp_149) {
                flat_13_simp_161         = ifalse;                               /* init */
                flat_13_simp_162         = ierror_tombstone;                     /* init */
                flat_13_simp_163_simp_164_simp_166 = 0.0;                        /* init */
                flat_13_simp_163_simp_164_simp_167 = 0.0;                        /* init */
                flat_13_simp_163_simp_165 = 0.0;                                 /* init */
                
                if (flat_8_simp_141) {
                    flat_13_simp_161     = itrue;                                /* write */
                    flat_13_simp_162     = ierror_tombstone;                     /* write */
                    flat_13_simp_163_simp_164_simp_166 = flat_9_simp_151_simp_152; /* write */
                    flat_13_simp_163_simp_164_simp_167 = flat_9_simp_151_simp_153; /* write */
                    flat_13_simp_163_simp_165 = flat_8_simp_143;                 /* write */
                } else {
                    flat_13_simp_161     = ifalse;                               /* write */
                    flat_13_simp_162     = flat_8_simp_142;                      /* write */
                    flat_13_simp_163_simp_164_simp_166 = 0.0;                    /* write */
                    flat_13_simp_163_simp_164_simp_167 = 0.0;                    /* write */
                    flat_13_simp_163_simp_165 = 0.0;                             /* write */
                }
                
                flat_13_simp_168         = flat_13_simp_161;                     /* read */
                flat_13_simp_169         = flat_13_simp_162;                     /* read */
                flat_13_simp_170_simp_171_simp_173 = flat_13_simp_163_simp_164_simp_166; /* read */
                flat_13_simp_170_simp_171_simp_174 = flat_13_simp_163_simp_164_simp_167; /* read */
                flat_13_simp_170_simp_172 = flat_13_simp_163_simp_165;           /* read */
                flat_10_simp_154         = flat_13_simp_168;                     /* write */
                flat_10_simp_155         = flat_13_simp_169;                     /* write */
                flat_10_simp_156_simp_157_simp_159 = flat_13_simp_170_simp_171_simp_173; /* write */
                flat_10_simp_156_simp_157_simp_160 = flat_13_simp_170_simp_171_simp_174; /* write */
                flat_10_simp_156_simp_158 = flat_13_simp_170_simp_172;           /* write */
            } else {
                flat_10_simp_154         = ifalse;                               /* write */
                flat_10_simp_155         = flat_9_simp_150;                      /* write */
                flat_10_simp_156_simp_157_simp_159 = 0.0;                        /* write */
                flat_10_simp_156_simp_157_simp_160 = 0.0;                        /* write */
                flat_10_simp_156_simp_158 = 0.0;                                 /* write */
            }
            
            flat_10_simp_175             = flat_10_simp_154;                     /* read */
            flat_10_simp_176             = flat_10_simp_155;                     /* read */
            flat_10_simp_177_simp_178_simp_180 = flat_10_simp_156_simp_157_simp_159; /* read */
            flat_10_simp_177_simp_178_simp_181 = flat_10_simp_156_simp_157_simp_160; /* read */
            flat_10_simp_177_simp_179    = flat_10_simp_156_simp_158;            /* read */
            flat_1_simp_89               = flat_10_simp_175;                     /* write */
            flat_1_simp_90               = flat_10_simp_176;                     /* write */
            flat_1_simp_91_simp_92_simp_94 = flat_10_simp_177_simp_178_simp_180; /* write */
            flat_1_simp_91_simp_92_simp_95 = flat_10_simp_177_simp_178_simp_181; /* write */
            flat_1_simp_91_simp_93       = flat_10_simp_177_simp_179;            /* write */
        } else {
            flat_1_simp_89               = ifalse;                               /* write */
            flat_1_simp_90               = acc_a_conv_12_simp_83;                /* write */
            flat_1_simp_91_simp_92_simp_94 = 0.0;                                /* write */
            flat_1_simp_91_simp_92_simp_95 = 0.0;                                /* write */
            flat_1_simp_91_simp_93       = 0.0;                                  /* write */
        }
        
        flat_1_simp_182                  = flat_1_simp_89;                       /* read */
        flat_1_simp_183                  = flat_1_simp_90;                       /* read */
        flat_1_simp_184_simp_185_simp_187 = flat_1_simp_91_simp_92_simp_94;      /* read */
        flat_1_simp_184_simp_185_simp_188 = flat_1_simp_91_simp_92_simp_95;      /* read */
        flat_1_simp_184_simp_186         = flat_1_simp_91_simp_93;               /* read */
        acc_a_conv_12_simp_62            = flat_1_simp_182;                      /* write */
        acc_a_conv_12_simp_63            = flat_1_simp_183;                      /* write */
        acc_a_conv_12_simp_64_simp_65_simp_67 = flat_1_simp_184_simp_185_simp_187; /* write */
        acc_a_conv_12_simp_64_simp_65_simp_68 = flat_1_simp_184_simp_185_simp_188; /* write */
        acc_a_conv_12_simp_64_simp_66    = flat_1_simp_184_simp_186;             /* write */
        flat_37_simp_189                 = ifalse;                               /* init */
        flat_37_simp_191                 = ifalse;                               /* init */
        
        if (gen_fact_simp_358_simp_360) {
            ibool_t    simp_31           = iint_lt (gen_fact_simp_358_simp_362, 300); /* let */
            flat_37_simp_189             = itrue;                                /* write */
            flat_37_simp_191             = simp_31;                              /* write */
        } else {
            flat_37_simp_189             = ifalse;                               /* write */
            flat_37_simp_191             = ifalse;                               /* write */
        }
        
        flat_37_simp_192                 = flat_37_simp_189;                     /* read */
        flat_37_simp_194                 = flat_37_simp_191;                     /* read */
        flat_38                          = ifalse;                               /* init */
        
        if (flat_37_simp_192) {
            flat_38                      = flat_37_simp_194;                     /* write */
        } else {
            flat_38                      = itrue;                                /* write */
        }
        
        flat_38                          = flat_38;                              /* read */
        
        if (flat_38) {
            flat_39_simp_195             = ifalse;                               /* init */
            flat_39_simp_196             = ierror_tombstone;                     /* init */
            flat_39_simp_197             = 0.0;                                  /* init */
            
            if (gen_fact_simp_358_simp_360) {
                idouble_t  simp_33       = iint_extend (gen_fact_simp_358_simp_362); /* let */
                flat_39_simp_195         = itrue;                                /* write */
                flat_39_simp_196         = ierror_tombstone;                     /* write */
                flat_39_simp_197         = simp_33;                              /* write */
            } else {
                flat_39_simp_195         = ifalse;                               /* write */
                flat_39_simp_196         = gen_fact_simp_358_simp_361;           /* write */
                flat_39_simp_197         = 0.0;                                  /* write */
            }
            
            flat_39_simp_198             = flat_39_simp_195;                     /* read */
            flat_39_simp_199             = flat_39_simp_196;                     /* read */
            flat_39_simp_200             = flat_39_simp_197;                     /* read */
            acc_a_conv_105_simp_201      = acc_a_conv_105_simp_69;               /* read */
            acc_a_conv_105_simp_202      = acc_a_conv_105_simp_70;               /* read */
            acc_a_conv_105_simp_203_simp_204_simp_206 = acc_a_conv_105_simp_71_simp_72_simp_74; /* read */
            acc_a_conv_105_simp_203_simp_204_simp_207 = acc_a_conv_105_simp_71_simp_72_simp_75; /* read */
            acc_a_conv_105_simp_203_simp_205 = acc_a_conv_105_simp_71_simp_73;   /* read */
            flat_40_simp_208             = ifalse;                               /* init */
            flat_40_simp_209             = ierror_tombstone;                     /* init */
            flat_40_simp_210_simp_211_simp_213 = 0.0;                            /* init */
            flat_40_simp_210_simp_211_simp_214 = 0.0;                            /* init */
            flat_40_simp_210_simp_212    = 0.0;                                  /* init */
            
            if (acc_a_conv_105_simp_201) {
                idouble_t  nn_conv_112   = idouble_add (acc_a_conv_105_simp_203_simp_204_simp_206, 1.0); /* let */
                flat_43_simp_215         = ifalse;                               /* init */
                flat_43_simp_216         = ierror_tombstone;                     /* init */
                flat_43_simp_217         = 0.0;                                  /* init */
                
                if (flat_39_simp_198) {
                    idouble_t  simp_39   = idouble_sub (flat_39_simp_200, acc_a_conv_105_simp_203_simp_204_simp_207); /* let */
                    flat_43_simp_215     = itrue;                                /* write */
                    flat_43_simp_216     = ierror_tombstone;                     /* write */
                    flat_43_simp_217     = simp_39;                              /* write */
                } else {
                    flat_43_simp_215     = ifalse;                               /* write */
                    flat_43_simp_216     = flat_39_simp_199;                     /* write */
                    flat_43_simp_217     = 0.0;                                  /* write */
                }
                
                flat_43_simp_218         = flat_43_simp_215;                     /* read */
                flat_43_simp_219         = flat_43_simp_216;                     /* read */
                flat_43_simp_220         = flat_43_simp_217;                     /* read */
                flat_44_simp_221         = ifalse;                               /* init */
                flat_44_simp_222         = ierror_tombstone;                     /* init */
                flat_44_simp_223         = 0.0;                                  /* init */
                
                if (flat_43_simp_218) {
                    idouble_t  simp_43   = idouble_div (flat_43_simp_220, nn_conv_112); /* let */
                    flat_44_simp_221     = itrue;                                /* write */
                    flat_44_simp_222     = ierror_tombstone;                     /* write */
                    flat_44_simp_223     = simp_43;                              /* write */
                } else {
                    flat_44_simp_221     = ifalse;                               /* write */
                    flat_44_simp_222     = flat_43_simp_219;                     /* write */
                    flat_44_simp_223     = 0.0;                                  /* write */
                }
                
                flat_44_simp_224         = flat_44_simp_221;                     /* read */
                flat_44_simp_225         = flat_44_simp_222;                     /* read */
                flat_44_simp_226         = flat_44_simp_223;                     /* read */
                flat_45_simp_227         = ifalse;                               /* init */
                flat_45_simp_228         = ierror_tombstone;                     /* init */
                flat_45_simp_229         = 0.0;                                  /* init */
                
                if (flat_44_simp_224) {
                    idouble_t  simp_45   = idouble_add (acc_a_conv_105_simp_203_simp_204_simp_207, flat_44_simp_226); /* let */
                    flat_45_simp_227     = itrue;                                /* write */
                    flat_45_simp_228     = ierror_tombstone;                     /* write */
                    flat_45_simp_229     = simp_45;                              /* write */
                } else {
                    flat_45_simp_227     = ifalse;                               /* write */
                    flat_45_simp_228     = flat_44_simp_225;                     /* write */
                    flat_45_simp_229     = 0.0;                                  /* write */
                }
                
                flat_45_simp_230         = flat_45_simp_227;                     /* read */
                flat_45_simp_231         = flat_45_simp_228;                     /* read */
                flat_45_simp_232         = flat_45_simp_229;                     /* read */
                flat_46_simp_233         = ifalse;                               /* init */
                flat_46_simp_234         = ierror_tombstone;                     /* init */
                flat_46_simp_235         = 0.0;                                  /* init */
                
                if (flat_43_simp_218) {
                    flat_61_simp_236     = ifalse;                               /* init */
                    flat_61_simp_237     = ierror_tombstone;                     /* init */
                    flat_61_simp_238     = 0.0;                                  /* init */
                    
                    if (flat_39_simp_198) {
                        flat_67_simp_239 = ifalse;                               /* init */
                        flat_67_simp_240 = ierror_tombstone;                     /* init */
                        flat_67_simp_241 = 0.0;                                  /* init */
                        
                        if (flat_45_simp_230) {
                            idouble_t  simp_51 = idouble_sub (flat_39_simp_200, flat_45_simp_232); /* let */
                            flat_67_simp_239 = itrue;                            /* write */
                            flat_67_simp_240 = ierror_tombstone;                 /* write */
                            flat_67_simp_241 = simp_51;                          /* write */
                        } else {
                            flat_67_simp_239 = ifalse;                           /* write */
                            flat_67_simp_240 = flat_45_simp_231;                 /* write */
                            flat_67_simp_241 = 0.0;                              /* write */
                        }
                        
                        flat_67_simp_242 = flat_67_simp_239;                     /* read */
                        flat_67_simp_243 = flat_67_simp_240;                     /* read */
                        flat_67_simp_244 = flat_67_simp_241;                     /* read */
                        flat_61_simp_236 = flat_67_simp_242;                     /* write */
                        flat_61_simp_237 = flat_67_simp_243;                     /* write */
                        flat_61_simp_238 = flat_67_simp_244;                     /* write */
                    } else {
                        flat_61_simp_236 = ifalse;                               /* write */
                        flat_61_simp_237 = flat_39_simp_199;                     /* write */
                        flat_61_simp_238 = 0.0;                                  /* write */
                    }
                    
                    flat_61_simp_245     = flat_61_simp_236;                     /* read */
                    flat_61_simp_246     = flat_61_simp_237;                     /* read */
                    flat_61_simp_247     = flat_61_simp_238;                     /* read */
                    flat_62_simp_248     = ifalse;                               /* init */
                    flat_62_simp_249     = ierror_tombstone;                     /* init */
                    flat_62_simp_250     = 0.0;                                  /* init */
                    
                    if (flat_61_simp_245) {
                        idouble_t  simp_55 = idouble_mul (flat_43_simp_220, flat_61_simp_247); /* let */
                        flat_62_simp_248 = itrue;                                /* write */
                        flat_62_simp_249 = ierror_tombstone;                     /* write */
                        flat_62_simp_250 = simp_55;                              /* write */
                    } else {
                        flat_62_simp_248 = ifalse;                               /* write */
                        flat_62_simp_249 = flat_61_simp_246;                     /* write */
                        flat_62_simp_250 = 0.0;                                  /* write */
                    }
                    
                    flat_62_simp_251     = flat_62_simp_248;                     /* read */
                    flat_62_simp_252     = flat_62_simp_249;                     /* read */
                    flat_62_simp_253     = flat_62_simp_250;                     /* read */
                    flat_46_simp_233     = flat_62_simp_251;                     /* write */
                    flat_46_simp_234     = flat_62_simp_252;                     /* write */
                    flat_46_simp_235     = flat_62_simp_253;                     /* write */
                } else {
                    flat_46_simp_233     = ifalse;                               /* write */
                    flat_46_simp_234     = flat_43_simp_219;                     /* write */
                    flat_46_simp_235     = 0.0;                                  /* write */
                }
                
                flat_46_simp_254         = flat_46_simp_233;                     /* read */
                flat_46_simp_255         = flat_46_simp_234;                     /* read */
                flat_46_simp_256         = flat_46_simp_235;                     /* read */
                flat_47_simp_257         = ifalse;                               /* init */
                flat_47_simp_258         = ierror_tombstone;                     /* init */
                flat_47_simp_259         = 0.0;                                  /* init */
                
                if (flat_46_simp_254) {
                    idouble_t  simp_57   = idouble_add (acc_a_conv_105_simp_203_simp_205, flat_46_simp_256); /* let */
                    flat_47_simp_257     = itrue;                                /* write */
                    flat_47_simp_258     = ierror_tombstone;                     /* write */
                    flat_47_simp_259     = simp_57;                              /* write */
                } else {
                    flat_47_simp_257     = ifalse;                               /* write */
                    flat_47_simp_258     = flat_46_simp_255;                     /* write */
                    flat_47_simp_259     = 0.0;                                  /* write */
                }
                
                flat_47_simp_260         = flat_47_simp_257;                     /* read */
                flat_47_simp_261         = flat_47_simp_258;                     /* read */
                flat_47_simp_262         = flat_47_simp_259;                     /* read */
                flat_48_simp_263         = ifalse;                               /* init */
                flat_48_simp_264         = ierror_tombstone;                     /* init */
                flat_48_simp_265_simp_266 = 0.0;                                 /* init */
                flat_48_simp_265_simp_267 = 0.0;                                 /* init */
                
                if (flat_45_simp_230) {
                    flat_48_simp_263     = itrue;                                /* write */
                    flat_48_simp_264     = ierror_tombstone;                     /* write */
                    flat_48_simp_265_simp_266 = nn_conv_112;                     /* write */
                    flat_48_simp_265_simp_267 = flat_45_simp_232;                /* write */
                } else {
                    flat_48_simp_263     = ifalse;                               /* write */
                    flat_48_simp_264     = flat_45_simp_231;                     /* write */
                    flat_48_simp_265_simp_266 = 0.0;                             /* write */
                    flat_48_simp_265_simp_267 = 0.0;                             /* write */
                }
                
                flat_48_simp_268         = flat_48_simp_263;                     /* read */
                flat_48_simp_269         = flat_48_simp_264;                     /* read */
                flat_48_simp_270_simp_271 = flat_48_simp_265_simp_266;           /* read */
                flat_48_simp_270_simp_272 = flat_48_simp_265_simp_267;           /* read */
                flat_49_simp_273         = ifalse;                               /* init */
                flat_49_simp_274         = ierror_tombstone;                     /* init */
                flat_49_simp_275_simp_276_simp_278 = 0.0;                        /* init */
                flat_49_simp_275_simp_276_simp_279 = 0.0;                        /* init */
                flat_49_simp_275_simp_277 = 0.0;                                 /* init */
                
                if (flat_48_simp_268) {
                    flat_52_simp_280     = ifalse;                               /* init */
                    flat_52_simp_281     = ierror_tombstone;                     /* init */
                    flat_52_simp_282_simp_283_simp_285 = 0.0;                    /* init */
                    flat_52_simp_282_simp_283_simp_286 = 0.0;                    /* init */
                    flat_52_simp_282_simp_284 = 0.0;                             /* init */
                    
                    if (flat_47_simp_260) {
                        flat_52_simp_280 = itrue;                                /* write */
                        flat_52_simp_281 = ierror_tombstone;                     /* write */
                        flat_52_simp_282_simp_283_simp_285 = flat_48_simp_270_simp_271; /* write */
                        flat_52_simp_282_simp_283_simp_286 = flat_48_simp_270_simp_272; /* write */
                        flat_52_simp_282_simp_284 = flat_47_simp_262;            /* write */
                    } else {
                        flat_52_simp_280 = ifalse;                               /* write */
                        flat_52_simp_281 = flat_47_simp_261;                     /* write */
                        flat_52_simp_282_simp_283_simp_285 = 0.0;                /* write */
                        flat_52_simp_282_simp_283_simp_286 = 0.0;                /* write */
                        flat_52_simp_282_simp_284 = 0.0;                         /* write */
                    }
                    
                    flat_52_simp_287     = flat_52_simp_280;                     /* read */
                    flat_52_simp_288     = flat_52_simp_281;                     /* read */
                    flat_52_simp_289_simp_290_simp_292 = flat_52_simp_282_simp_283_simp_285; /* read */
                    flat_52_simp_289_simp_290_simp_293 = flat_52_simp_282_simp_283_simp_286; /* read */
                    flat_52_simp_289_simp_291 = flat_52_simp_282_simp_284;       /* read */
                    flat_49_simp_273     = flat_52_simp_287;                     /* write */
                    flat_49_simp_274     = flat_52_simp_288;                     /* write */
                    flat_49_simp_275_simp_276_simp_278 = flat_52_simp_289_simp_290_simp_292; /* write */
                    flat_49_simp_275_simp_276_simp_279 = flat_52_simp_289_simp_290_simp_293; /* write */
                    flat_49_simp_275_simp_277 = flat_52_simp_289_simp_291;       /* write */
                } else {
                    flat_49_simp_273     = ifalse;                               /* write */
                    flat_49_simp_274     = flat_48_simp_269;                     /* write */
                    flat_49_simp_275_simp_276_simp_278 = 0.0;                    /* write */
                    flat_49_simp_275_simp_276_simp_279 = 0.0;                    /* write */
                    flat_49_simp_275_simp_277 = 0.0;                             /* write */
                }
                
                flat_49_simp_294         = flat_49_simp_273;                     /* read */
                flat_49_simp_295         = flat_49_simp_274;                     /* read */
                flat_49_simp_296_simp_297_simp_299 = flat_49_simp_275_simp_276_simp_278; /* read */
                flat_49_simp_296_simp_297_simp_300 = flat_49_simp_275_simp_276_simp_279; /* read */
                flat_49_simp_296_simp_298 = flat_49_simp_275_simp_277;           /* read */
                flat_40_simp_208         = flat_49_simp_294;                     /* write */
                flat_40_simp_209         = flat_49_simp_295;                     /* write */
                flat_40_simp_210_simp_211_simp_213 = flat_49_simp_296_simp_297_simp_299; /* write */
                flat_40_simp_210_simp_211_simp_214 = flat_49_simp_296_simp_297_simp_300; /* write */
                flat_40_simp_210_simp_212 = flat_49_simp_296_simp_298;           /* write */
            } else {
                flat_40_simp_208         = ifalse;                               /* write */
                flat_40_simp_209         = acc_a_conv_105_simp_202;              /* write */
                flat_40_simp_210_simp_211_simp_213 = 0.0;                        /* write */
                flat_40_simp_210_simp_211_simp_214 = 0.0;                        /* write */
                flat_40_simp_210_simp_212 = 0.0;                                 /* write */
            }
            
            flat_40_simp_301             = flat_40_simp_208;                     /* read */
            flat_40_simp_302             = flat_40_simp_209;                     /* read */
            flat_40_simp_303_simp_304_simp_306 = flat_40_simp_210_simp_211_simp_213; /* read */
            flat_40_simp_303_simp_304_simp_307 = flat_40_simp_210_simp_211_simp_214; /* read */
            flat_40_simp_303_simp_305    = flat_40_simp_210_simp_212;            /* read */
            acc_a_conv_105_simp_69       = flat_40_simp_301;                     /* write */
            acc_a_conv_105_simp_70       = flat_40_simp_302;                     /* write */
            acc_a_conv_105_simp_71_simp_72_simp_74 = flat_40_simp_303_simp_304_simp_306; /* write */
            acc_a_conv_105_simp_71_simp_72_simp_75 = flat_40_simp_303_simp_304_simp_307; /* write */
            acc_a_conv_105_simp_71_simp_73 = flat_40_simp_303_simp_305;          /* write */
        }
        
    }
    
    s->has_acc_a_conv_12_simp_62         = itrue;                                /* save */
    s->res_acc_a_conv_12_simp_62         = acc_a_conv_12_simp_62;                /* save */
    
    s->has_acc_a_conv_12_simp_63         = itrue;                                /* save */
    s->res_acc_a_conv_12_simp_63         = acc_a_conv_12_simp_63;                /* save */
    
    s->has_acc_a_conv_12_simp_64_simp_65_simp_67 = itrue;                        /* save */
    s->res_acc_a_conv_12_simp_64_simp_65_simp_67 = acc_a_conv_12_simp_64_simp_65_simp_67; /* save */
    
    s->has_acc_a_conv_12_simp_64_simp_65_simp_68 = itrue;                        /* save */
    s->res_acc_a_conv_12_simp_64_simp_65_simp_68 = acc_a_conv_12_simp_64_simp_65_simp_68; /* save */
    
    s->has_acc_a_conv_12_simp_64_simp_66 = itrue;                                /* save */
    s->res_acc_a_conv_12_simp_64_simp_66 = acc_a_conv_12_simp_64_simp_66;        /* save */
    
    s->has_acc_a_conv_105_simp_69        = itrue;                                /* save */
    s->res_acc_a_conv_105_simp_69        = acc_a_conv_105_simp_69;               /* save */
    
    s->has_acc_a_conv_105_simp_70        = itrue;                                /* save */
    s->res_acc_a_conv_105_simp_70        = acc_a_conv_105_simp_70;               /* save */
    
    s->has_acc_a_conv_105_simp_71_simp_72_simp_74 = itrue;                       /* save */
    s->res_acc_a_conv_105_simp_71_simp_72_simp_74 = acc_a_conv_105_simp_71_simp_72_simp_74; /* save */
    
    s->has_acc_a_conv_105_simp_71_simp_72_simp_75 = itrue;                       /* save */
    s->res_acc_a_conv_105_simp_71_simp_72_simp_75 = acc_a_conv_105_simp_71_simp_72_simp_75; /* save */
    
    s->has_acc_a_conv_105_simp_71_simp_73 = itrue;                               /* save */
    s->res_acc_a_conv_105_simp_71_simp_73 = acc_a_conv_105_simp_71_simp_73;      /* save */
    
    a_conv_12_simp_308                   = acc_a_conv_12_simp_62;                /* read */
    a_conv_12_simp_309                   = acc_a_conv_12_simp_63;                /* read */
    a_conv_12_simp_310_simp_311_simp_313 = acc_a_conv_12_simp_64_simp_65_simp_67; /* read */
    a_conv_12_simp_310_simp_312          = acc_a_conv_12_simp_64_simp_66;        /* read */
    a_conv_105_simp_315                  = acc_a_conv_105_simp_69;               /* read */
    a_conv_105_simp_316                  = acc_a_conv_105_simp_70;               /* read */
    a_conv_105_simp_317_simp_318_simp_320 = acc_a_conv_105_simp_71_simp_72_simp_74; /* read */
    a_conv_105_simp_317_simp_319         = acc_a_conv_105_simp_71_simp_73;       /* read */
    flat_84_simp_322                     = ifalse;                               /* init */
    flat_84_simp_323                     = ierror_tombstone;                     /* init */
    flat_84_simp_324                     = 0.0;                                  /* init */
    
    if (a_conv_12_simp_308) {
        idouble_t  conv_67               = idouble_sub (a_conv_12_simp_310_simp_311_simp_313, 1.0); /* let */
        idouble_t  conv_68               = idouble_div (a_conv_12_simp_310_simp_312, conv_67); /* let */
        flat_84_simp_322                 = itrue;                                /* write */
        flat_84_simp_323                 = ierror_tombstone;                     /* write */
        flat_84_simp_324                 = conv_68;                              /* write */
    } else {
        flat_84_simp_322                 = ifalse;                               /* write */
        flat_84_simp_323                 = a_conv_12_simp_309;                   /* write */
        flat_84_simp_324                 = 0.0;                                  /* write */
    }
    
    flat_84_simp_325                     = flat_84_simp_322;                     /* read */
    flat_84_simp_326                     = flat_84_simp_323;                     /* read */
    flat_84_simp_327                     = flat_84_simp_324;                     /* read */
    flat_85_simp_328                     = ifalse;                               /* init */
    flat_85_simp_329                     = ierror_tombstone;                     /* init */
    flat_85_simp_330                     = 0.0;                                  /* init */
    
    if (flat_84_simp_325) {
        idouble_t  conv_80               = idouble_pow (flat_84_simp_327, 0.5);  /* let */
        flat_85_simp_328                 = itrue;                                /* write */
        flat_85_simp_329                 = ierror_tombstone;                     /* write */
        flat_85_simp_330                 = conv_80;                              /* write */
    } else {
        flat_85_simp_328                 = ifalse;                               /* write */
        flat_85_simp_329                 = flat_84_simp_326;                     /* write */
        flat_85_simp_330                 = 0.0;                                  /* write */
    }
    
    flat_85_simp_331                     = flat_85_simp_328;                     /* read */
    flat_85_simp_332                     = flat_85_simp_329;                     /* read */
    flat_85_simp_333                     = flat_85_simp_330;                     /* read */
    flat_86_simp_334                     = ifalse;                               /* init */
    flat_86_simp_335                     = ierror_tombstone;                     /* init */
    flat_86_simp_336                     = 0.0;                                  /* init */
    
    if (flat_85_simp_331) {
        flat_89_simp_337                 = ifalse;                               /* init */
        flat_89_simp_338                 = ierror_tombstone;                     /* init */
        flat_89_simp_339                 = 0.0;                                  /* init */
        
        if (a_conv_105_simp_315) {
            idouble_t  conv_160          = idouble_sub (a_conv_105_simp_317_simp_318_simp_320, 1.0); /* let */
            idouble_t  conv_161          = idouble_div (a_conv_105_simp_317_simp_319, conv_160); /* let */
            flat_89_simp_337             = itrue;                                /* write */
            flat_89_simp_338             = ierror_tombstone;                     /* write */
            flat_89_simp_339             = conv_161;                             /* write */
        } else {
            flat_89_simp_337             = ifalse;                               /* write */
            flat_89_simp_338             = a_conv_105_simp_316;                  /* write */
            flat_89_simp_339             = 0.0;                                  /* write */
        }
        
        flat_89_simp_340                 = flat_89_simp_337;                     /* read */
        flat_89_simp_341                 = flat_89_simp_338;                     /* read */
        flat_89_simp_342                 = flat_89_simp_339;                     /* read */
        flat_90_simp_343                 = ifalse;                               /* init */
        flat_90_simp_344                 = ierror_tombstone;                     /* init */
        flat_90_simp_345                 = 0.0;                                  /* init */
        
        if (flat_89_simp_340) {
            idouble_t  conv_173          = idouble_pow (flat_89_simp_342, 0.5);  /* let */
            flat_90_simp_343             = itrue;                                /* write */
            flat_90_simp_344             = ierror_tombstone;                     /* write */
            flat_90_simp_345             = conv_173;                             /* write */
        } else {
            flat_90_simp_343             = ifalse;                               /* write */
            flat_90_simp_344             = flat_89_simp_341;                     /* write */
            flat_90_simp_345             = 0.0;                                  /* write */
        }
        
        flat_90_simp_346                 = flat_90_simp_343;                     /* read */
        flat_90_simp_347                 = flat_90_simp_344;                     /* read */
        flat_90_simp_348                 = flat_90_simp_345;                     /* read */
        flat_91_simp_349                 = ifalse;                               /* init */
        flat_91_simp_350                 = ierror_tombstone;                     /* init */
        flat_91_simp_351                 = 0.0;                                  /* init */
        
        if (flat_90_simp_346) {
            idouble_t  conv_180          = idouble_mul (flat_85_simp_333, flat_90_simp_348); /* let */
            flat_91_simp_349             = itrue;                                /* write */
            flat_91_simp_350             = ierror_tombstone;                     /* write */
            flat_91_simp_351             = conv_180;                             /* write */
        } else {
            flat_91_simp_349             = ifalse;                               /* write */
            flat_91_simp_350             = flat_90_simp_347;                     /* write */
            flat_91_simp_351             = 0.0;                                  /* write */
        }
        
        flat_91_simp_352                 = flat_91_simp_349;                     /* read */
        flat_91_simp_353                 = flat_91_simp_350;                     /* read */
        flat_91_simp_354                 = flat_91_simp_351;                     /* read */
        flat_86_simp_334                 = flat_91_simp_352;                     /* write */
        flat_86_simp_335                 = flat_91_simp_353;                     /* write */
        flat_86_simp_336                 = flat_91_simp_354;                     /* write */
    } else {
        flat_86_simp_334                 = ifalse;                               /* write */
        flat_86_simp_335                 = flat_85_simp_332;                     /* write */
        flat_86_simp_336                 = 0.0;                                  /* write */
    }
    
    flat_86_simp_355                     = flat_86_simp_334;                     /* read */
    flat_86_simp_356                     = flat_86_simp_335;                     /* read */
    flat_86_simp_357                     = flat_86_simp_336;                     /* read */
    s->repl_ix_0                         = flat_86_simp_355;                     /* output */
    s->repl_ix_1                         = flat_86_simp_356;                     /* output */
    s->repl_ix_2                         = flat_86_simp_357;                     /* output */
}

- C evaluation:
[(homer,11180.33988749895)
,(marge,100.0)]

- Core evaluation:
[homer, 11180.33988749895
,marge, 100.0]

> > -- Structs
> - Flattened:
gen$date = DATE
{
  init acc$s$conv$13$simp$8@{Mutable Bool} = True@{Bool};
  init acc$s$conv$13$simp$9@{Mutable Error} = ExceptTombstone@{Error};
  init acc$s$conv$13$simp$10@{Mutable Double} = 0.0@{Double};
  init acc$c$conv$26$simp$11@{Mutable Bool} = True@{Bool};
  init acc$c$conv$26$simp$12@{Mutable Error} = ExceptTombstone@{Error};
  init acc$c$conv$26$simp$13@{Mutable Double} = 0.0@{Double};
  load_resumable@{Bool} acc$s$conv$13$simp$8;
  load_resumable@{Error} acc$s$conv$13$simp$9;
  load_resumable@{Double} acc$s$conv$13$simp$10;
  load_resumable@{Bool} acc$c$conv$26$simp$11;
  load_resumable@{Error} acc$c$conv$26$simp$12;
  load_resumable@{Double} acc$c$conv$26$simp$13;
  for_facts (gen$fact$simp$86$simp$88@{Bool},
             gen$fact$simp$86$simp$89@{Error},
             gen$fact$simp$86$simp$90$simp$91@{String},
             gen$fact$simp$86$simp$90$simp$92@{Int},
             gen$fact$simp$87@{DateTime}) in new {
    init flat$0$simp$14@{Mutable Bool} = False@{Bool};
    init flat$0$simp$15@{Mutable Error} = ExceptTombstone@{Error};
    init flat$0$simp$16@{Mutable Int} = 0@{Int};
    if (gen$fact$simp$86$simp$88) {
      write flat$0$simp$14 = True@{Bool};
      write flat$0$simp$15 = ExceptTombstone@{Error};
      write flat$0$simp$16 = gen$fact$simp$86$simp$90$simp$92;
    } else {
      write flat$0$simp$14 = False@{Bool};
      write flat$0$simp$15 = gen$fact$simp$86$simp$89;
      write flat$0$simp$16 = 0@{Int};
    }
    read@{Mutable Bool} flat$0$simp$17 = flat$0$simp$14;
    read@{Mutable Error} flat$0$simp$18 = flat$0$simp$15;
    read@{Mutable Int} flat$0$simp$19 = flat$0$simp$16;
    init flat$1$simp$20@{Mutable Bool} = False@{Bool};
    init flat$1$simp$21@{Mutable Error} = ExceptTombstone@{Error};
    init flat$1$simp$22@{Mutable Double} = 0.0@{Double};
    if (flat$0$simp$17) {
      let simp$3 = doubleOfInt#
                   flat$0$simp$19;
      write flat$1$simp$20 = True@{Bool};
      write flat$1$simp$21 = ExceptTombstone@{Error};
      write flat$1$simp$22 = simp$3;
    } else {
      write flat$1$simp$20 = False@{Bool};
      write flat$1$simp$21 = flat$0$simp$18;
      write flat$1$simp$22 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$1$simp$23 = flat$1$simp$20;
    read@{Mutable Error} flat$1$simp$24 = flat$1$simp$21;
    read@{Mutable Double} flat$1$simp$25 = flat$1$simp$22;
    init flat$2$simp$26@{Mutable Bool} = False@{Bool};
    init flat$2$simp$27@{Mutable Error} = ExceptTombstone@{Error};
    init flat$2$simp$28@{Mutable Double} = 0.0@{Double};
    if (flat$1$simp$23) {
      write flat$2$simp$26 = True@{Bool};
      write flat$2$simp$27 = ExceptTombstone@{Error};
      write flat$2$simp$28 = flat$1$simp$25;
    } else {
      write flat$2$simp$26 = False@{Bool};
      write flat$2$simp$27 = flat$1$simp$24;
      write flat$2$simp$28 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$2$simp$29 = flat$2$simp$26;
    read@{Mutable Error} flat$2$simp$30 = flat$2$simp$27;
    read@{Mutable Double} flat$2$simp$31 = flat$2$simp$28;
    read@{Mutable Bool} acc$s$conv$13$simp$32 = acc$s$conv$13$simp$8;
    read@{Mutable Error} acc$s$conv$13$simp$33 = acc$s$conv$13$simp$9;
    read@{Mutable Double} acc$s$conv$13$simp$34 = acc$s$conv$13$simp$10;
    init flat$3$simp$35@{Mutable Bool} = False@{Bool};
    init flat$3$simp$36@{Mutable Error} = ExceptTombstone@{Error};
    init flat$3$simp$37@{Mutable Double} = 0.0@{Double};
    if (flat$2$simp$29) {
      init flat$6$simp$38@{Mutable Bool} = False@{Bool};
      init flat$6$simp$39@{Mutable Error} = ExceptTombstone@{Error};
      init flat$6$simp$40@{Mutable Double} = 0.0@{Double};
      if (acc$s$conv$13$simp$32) {
        let simp$5 = add#@{Double}
                     flat$2$simp$31
                     acc$s$conv$13$simp$34;
        write flat$6$simp$38 = True@{Bool};
        write flat$6$simp$39 = ExceptTombstone@{Error};
        write flat$6$simp$40 = simp$5;
      } else {
        write flat$6$simp$38 = False@{Bool};
        write flat$6$simp$39 = acc$s$conv$13$simp$33;
        write flat$6$simp$40 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$6$simp$41 = flat$6$simp$38;
      read@{Mutable Error} flat$6$simp$42 = flat$6$simp$39;
      read@{Mutable Double} flat$6$simp$43 = flat$6$simp$40;
      write flat$3$simp$35 = flat$6$simp$41;
      write flat$3$simp$36 = flat$6$simp$42;
      write flat$3$simp$37 = flat$6$simp$43;
    } else {
      write flat$3$simp$35 = False@{Bool};
      write flat$3$simp$36 = flat$2$simp$30;
      write flat$3$simp$37 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$3$simp$44 = flat$3$simp$35;
    read@{Mutable Error} flat$3$simp$45 = flat$3$simp$36;
    read@{Mutable Double} flat$3$simp$46 = flat$3$simp$37;
    write acc$s$conv$13$simp$8 = flat$3$simp$44;
    write acc$s$conv$13$simp$9 = flat$3$simp$45;
    write acc$s$conv$13$simp$10 = flat$3$simp$46;
    read@{Mutable Bool} acc$c$conv$26$simp$47 = acc$c$conv$26$simp$11;
    read@{Mutable Error} acc$c$conv$26$simp$48 = acc$c$conv$26$simp$12;
    read@{Mutable Double} acc$c$conv$26$simp$49 = acc$c$conv$26$simp$13;
    init flat$9$simp$50@{Mutable Bool} = False@{Bool};
    init flat$9$simp$51@{Mutable Error} = ExceptTombstone@{Error};
    init flat$9$simp$52@{Mutable Double} = 0.0@{Double};
    if (flat$1$simp$23) {
      init flat$12$simp$53@{Mutable Bool} = False@{Bool};
      init flat$12$simp$54@{Mutable Error} = ExceptTombstone@{Error};
      init flat$12$simp$55@{Mutable Double} = 0.0@{Double};
      if (acc$c$conv$26$simp$47) {
        let simp$7 = add#@{Double}
                     acc$c$conv$26$simp$49 (1.0@{Double});
        write flat$12$simp$53 = True@{Bool};
        write flat$12$simp$54 = ExceptTombstone@{Error};
        write flat$12$simp$55 = simp$7;
      } else {
        write flat$12$simp$53 = False@{Bool};
        write flat$12$simp$54 = acc$c$conv$26$simp$48;
        write flat$12$simp$55 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$12$simp$56 = flat$12$simp$53;
      read@{Mutable Error} flat$12$simp$57 = flat$12$simp$54;
      read@{Mutable Double} flat$12$simp$58 = flat$12$simp$55;
      init flat$13$simp$59@{Mutable Bool} = False@{Bool};
      init flat$13$simp$60@{Mutable Error} = ExceptTombstone@{Error};
      init flat$13$simp$61@{Mutable Double} = 0.0@{Double};
      if (flat$12$simp$56) {
        write flat$13$simp$59 = True@{Bool};
        write flat$13$simp$60 = ExceptTombstone@{Error};
        write flat$13$simp$61 = flat$12$simp$58;
      } else {
        write flat$13$simp$59 = False@{Bool};
        write flat$13$simp$60 = flat$12$simp$57;
        write flat$13$simp$61 = 0.0@{Double};
      }
      read@{Mutable Bool} flat$13$simp$62 = flat$13$simp$59;
      read@{Mutable Error} flat$13$simp$63 = flat$13$simp$60;
      read@{Mutable Double} flat$13$simp$64 = flat$13$simp$61;
      write flat$9$simp$50 = flat$13$simp$62;
      write flat$9$simp$51 = flat$13$simp$63;
      write flat$9$simp$52 = flat$13$simp$64;
    } else {
      write flat$9$simp$50 = False@{Bool};
      write flat$9$simp$51 = flat$1$simp$24;
      write flat$9$simp$52 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$9$simp$65 = flat$9$simp$50;
    read@{Mutable Error} flat$9$simp$66 = flat$9$simp$51;
    read@{Mutable Double} flat$9$simp$67 = flat$9$simp$52;
    write acc$c$conv$26$simp$11 = flat$9$simp$65;
    write acc$c$conv$26$simp$12 = flat$9$simp$66;
    write acc$c$conv$26$simp$13 = flat$9$simp$67;
  }
  save_resumable@{Bool} acc$s$conv$13$simp$8;
  save_resumable@{Error} acc$s$conv$13$simp$9;
  save_resumable@{Double} acc$s$conv$13$simp$10;
  save_resumable@{Bool} acc$c$conv$26$simp$11;
  save_resumable@{Error} acc$c$conv$26$simp$12;
  save_resumable@{Double} acc$c$conv$26$simp$13;
  read@{Mutable Bool} s$conv$13$simp$68 = acc$s$conv$13$simp$8;
  read@{Mutable Error} s$conv$13$simp$69 = acc$s$conv$13$simp$9;
  read@{Mutable Double} s$conv$13$simp$70 = acc$s$conv$13$simp$10;
  read@{Mutable Bool} c$conv$26$simp$71 = acc$c$conv$26$simp$11;
  read@{Mutable Error} c$conv$26$simp$72 = acc$c$conv$26$simp$12;
  read@{Mutable Double} c$conv$26$simp$73 = acc$c$conv$26$simp$13;
  init flat$24$simp$74@{Mutable Bool} = False@{Bool};
  init flat$24$simp$75@{Mutable Error} = ExceptTombstone@{Error};
  init flat$24$simp$76@{Mutable Double} = 0.0@{Double};
  if (s$conv$13$simp$68) {
    init flat$27$simp$77@{Mutable Bool} = False@{Bool};
    init flat$27$simp$78@{Mutable Error} = ExceptTombstone@{Error};
    init flat$27$simp$79@{Mutable Double} = 0.0@{Double};
    if (c$conv$26$simp$71) {
      let conv$39 = div#
                    s$conv$13$simp$70
                    c$conv$26$simp$73;
      write flat$27$simp$77 = True@{Bool};
      write flat$27$simp$78 = ExceptTombstone@{Error};
      write flat$27$simp$79 = conv$39;
    } else {
      write flat$27$simp$77 = False@{Bool};
      write flat$27$simp$78 = c$conv$26$simp$72;
      write flat$27$simp$79 = 0.0@{Double};
    }
    read@{Mutable Bool} flat$27$simp$80 = flat$27$simp$77;
    read@{Mutable Error} flat$27$simp$81 = flat$27$simp$78;
    read@{Mutable Double} flat$27$simp$82 = flat$27$simp$79;
    write flat$24$simp$74 = flat$27$simp$80;
    write flat$24$simp$75 = flat$27$simp$81;
    write flat$24$simp$76 = flat$27$simp$82;
  } else {
    write flat$24$simp$74 = False@{Bool};
    write flat$24$simp$75 = s$conv$13$simp$69;
    write flat$24$simp$76 = 0.0@{Double};
  }
  read@{Mutable Bool} flat$24$simp$83 = flat$24$simp$74;
  read@{Mutable Error} flat$24$simp$84 = flat$24$simp$75;
  read@{Mutable Double} flat$24$simp$85 = flat$24$simp$76;
  output@{(Sum Error Double)} repl (flat$24$simp$83@{Bool},
               flat$24$simp$84@{Error},
               flat$24$simp$85@{Double});
}

- C:
// 01-includes.h
#line 1 "01-includes.h"
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

typedef uint64_t ierror_t;
typedef uint64_t iunit_t;
typedef uint64_t ibool_t;
typedef  int64_t iint_t;
typedef   double idouble_t;
typedef  int64_t idate_t;

typedef const char *istring_t;

static const ierror_t ierror_tombstone              = 0;
static const ierror_t ierror_fold1_no_value         = 1;
static const ierror_t ierror_variable_not_available = 2;

static const iunit_t iunit  = 0x13013;
static const ibool_t ifalse = 0;
static const ibool_t itrue  = 1;

#define INLINE __attribute__((always_inline))

// 02-numbers.h
#line 1 "02-numbers.h"
#define MK_SIMPLE_CMPS(t,pre)                                                   \
    static ibool_t   INLINE pre##eq   (t x, t y) { return x == y; }             \
    static ibool_t   INLINE pre##ne   (t x, t y) { return x != y; }             \
    static ibool_t   INLINE pre##gt   (t x, t y) { return x >  y; }             \
    static ibool_t   INLINE pre##ge   (t x, t y) { return x >= y; }             \
    static ibool_t   INLINE pre##lt   (t x, t y) { return x <  y; }             \
    static ibool_t   INLINE pre##le   (t x, t y) { return x <= y; }             \

MK_SIMPLE_CMPS(ierror_t, ierror_)
MK_SIMPLE_CMPS(ibool_t,  ibool_)
MK_SIMPLE_CMPS(idate_t,  idate_)
MK_SIMPLE_CMPS(iunit_t,  iunit_)

static idouble_t INLINE iint_extend   (iint_t    x)              { return x; }
static iint_t    INLINE iint_add      (iint_t    x, iint_t    y) { return x +  y; }
static iint_t    INLINE iint_sub      (iint_t    x, iint_t    y) { return x -  y; }
static iint_t    INLINE iint_mul      (iint_t    x, iint_t    y) { return x *  y; }

MK_SIMPLE_CMPS(iint_t, iint_)

static iint_t    INLINE idouble_trunc (idouble_t x)              { return (iint_t)x; }
static idouble_t INLINE idouble_add   (idouble_t x, idouble_t y) { return x + y; }
static idouble_t INLINE idouble_sub   (idouble_t x, idouble_t y) { return x - y; }
static idouble_t INLINE idouble_mul   (idouble_t x, idouble_t y) { return x * y; }
static idouble_t INLINE idouble_pow   (idouble_t x, idouble_t y) { return pow(x, y); }
static idouble_t INLINE idouble_div   (idouble_t x, idouble_t y) { return x / y; }
static idouble_t INLINE idouble_log   (idouble_t x)              { return log(x); }
static idouble_t INLINE idouble_exp   (idouble_t x)              { return exp(x); }

MK_SIMPLE_CMPS(idouble_t, idouble_)

static ibool_t   INLINE istring_gt    (istring_t x, istring_t y) { return strcmp(x, y) >  0; }
static ibool_t   INLINE istring_ge    (istring_t x, istring_t y) { return strcmp(x, y) >= 0; }
static ibool_t   INLINE istring_lt    (istring_t x, istring_t y) { return strcmp(x, y) <  0; }
static ibool_t   INLINE istring_le    (istring_t x, istring_t y) { return strcmp(x, y) <= 0; }
static ibool_t   INLINE istring_eq    (istring_t x, istring_t y) { return strcmp(x, y) == 0; }
static ibool_t   INLINE istring_ne    (istring_t x, istring_t y) { return strcmp(x, y) != 0; }

// 03-array.h
#line 1 "03-array.h"
typedef struct
{
    iint_t count;
} iarray_struct;
// payload goes straight after

#define ARRAY_OF(t) iarray_t__##t
#define ARRAY_FUN(f,pre) iarray__##pre##f

// I'm not certain there's a point having a different one for each type.
// It makes it look a little better, but I don't think it's any safer.
#define MK_ARRAY_STRUCT(t) typedef iarray_struct* ARRAY_OF(t);

// get payload by advancing pointer by size of struct
// (which should be equivalent to straight after struct fields)
// then casting to t*
#define ARRAY_PAYLOAD(x,t) ((t*)(x+1))


#define MK_ARRAY_LENGTH(t,pre)                                                  \
    static iint_t INLINE ARRAY_FUN(length,pre) (ARRAY_OF(t) arr)                \
    { return arr->count; }

#define MK_ARRAY_EQ(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(eq,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        if (x->count != y->count) return ifalse;                                \
        for (iint_t ix = 0; ix != x->count; ++ix) {                             \
            if (!pre##eq(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        return itrue;                                                           \
    }

#define MK_ARRAY_LT(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(lt,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        iint_t min = (x->count < y->count) ? x->count : y->count;               \
        for (iint_t ix = 0; ix != min; ++ix) {                                  \
            if (!pre##lt(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        if (x->count < y->count)                                                \
            return itrue;                                                       \
        else                                                                    \
            return ifalse;                                                      \
    }

#define MK_ARRAY_CMP(t,pre,op,ret)                                              \
    static ibool_t INLINE ARRAY_FUN(op,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    { return ret ; }                                                            \

#define MK_ARRAY_CMPS(t,pre)                                                    \
    MK_ARRAY_EQ(t,pre)                                                          \
    MK_ARRAY_LT(t,pre)                                                          \
    MK_ARRAY_CMP(t,pre,ne, !ARRAY_FUN(eq,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,le,  ARRAY_FUN(lt,pre) (x,y) || ARRAY_FUN(eq,pre) (x,y)) \
    MK_ARRAY_CMP(t,pre,ge, !ARRAY_FUN(lt,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,gt, !ARRAY_FUN(le,pre) (x,y))                            \



#define MK_ARRAY_INDEX(t,pre)                                                   \
    static t       INLINE ARRAY_FUN(index,pre) (ARRAY_OF(t) x, iint_t ix)       \
    { return ARRAY_PAYLOAD(x,t)[ix]; }                                          \


#define MK_ARRAY_CREATE(t,pre)                                                  \
    static ARRAY_OF(t)  INLINE ARRAY_FUN(create,pre)                            \
                                        (iallocate_t alloc, iint_t sz)          \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(iarray_struct);      \
        ARRAY_OF(t)  ret = (ARRAY_OF(t))allocate(alloc, bytes);                 \
        ret->count = sz;                                                        \
        return ret;                                                             \
    }                                                                           \

#define MK_ARRAY_PUT(t,pre)                                                     \
    static iunit_t INLINE ARRAY_FUN(put,pre)   (ARRAY_OF(t) x, iint_t ix, t v)  \
    {                                                                           \
        ARRAY_PAYLOAD(x,t)[ix] = v;                                             \
        return iunit;                                                           \
    }                                                                           \

                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \



#define MAKE_ARRAY(t,pre)                                                       \
    MK_ARRAY_STRUCT (t)                                                         \
    MK_ARRAY_LENGTH (t,pre)                                                     \
    MK_ARRAY_CMPS   (t,pre)                                                     \
    MK_ARRAY_INDEX  (t,pre)                                                     \
    MK_ARRAY_CREATE (t,pre)                                                     \
    MK_ARRAY_PUT    (t,pre)                                                     \
    // MK_ARRAY_ZIP    (t,pre)                                                     \

// TEMPORARY
typedef void* iallocate_t;
void* allocate(iallocate_t t, iint_t sz);

MAKE_ARRAY(idouble_t,   idouble_)
MAKE_ARRAY(iint_t,      iint_)
MAKE_ARRAY(ierror_t,    ierror_)
MAKE_ARRAY(ibool_t,     ibool_)
MAKE_ARRAY(idate_t,     idate_)
MAKE_ARRAY(iunit_t,     iunit_)

// 04-buffer.h
#line 1 "04-buffer.h"
typedef struct
{
    iint_t max_size;
    iint_t cur_size;
    iint_t head;
} ibuf_struct;
/*
 Invariants
  0 <= cur_size <= max_size
  0 <= head     <  max_size

  read = ARRAY[ head..(head+cur_size) % max_size )

*/

#define BUF_OF(t)   ibuf_t__##t
#define BUF_FUN(f,pre) ibuf__##pre##f

#define MK_BUF_STRUCT(t) typedef ibuf_struct* BUF_OF(t);

#define BUF_PAYLOAD(x,t) ((t*)(x+1))

/*
Make
 Pre
  0 <= sz

 Post
  cur_size' = 0
  head'     = 0
  max_size' = sz
  ARRAY'    = [??...]

  read'     = ARRAY'[head'..head'+cur_size')
            = ARRAY'[0..0)
            = []

  (invariants hold)

*/
#define MK_BUF_MAKE(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(make,pre)                                   \
                     (iallocate_t alloc, iint_t sz)                             \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(ibuf_struct);                \
        BUF_OF(t) ret    = (BUF_OF(t))allocate(alloc, bytes);                   \
        ret->max_size = sz;                                                     \
        ret->cur_size = 0;                                                      \
        ret->head     = 0;                                                      \
        return ret;                                                             \
    }

/*
Push(buf, val)
 Pre
  (buf invariants hold)
 Post
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]

*/

/*
Push(buf, val)
  {buf invariants hold}
  ...
  {
  head'     = if cur_size < max_size
              then head
              else (head+1) % max_size

  cur_size' = min max_size (cur_size+1)

  ARRAY'    = ARRAY[update]:=val
  read'     = ARRAY[head'..(head'+cur_size') % max_size)
  update    = (head' + cur_size') % max_size
  }
  ==>
  {
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]
  }

*/

#define MK_BUF_PUSH(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(push,pre) (BUF_OF(t) buf, t val)            \
    {                                                                           \
        iint_t head_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->head                                            \
                        : (buf->head+1) % buf->max_size;                        \
                                                                                \
        iint_t size_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->cur_size + 1                                    \
                        :  buf->max_size;                                       \
                                                                                \
        iint_t update   = (head_new + buf->cur_size) % buf->max_size;           \
                                                                                \
        BUF_PAYLOAD(buf,t)[update] = val;                                       \
                                                                                \
        buf->head     = head_new;                                               \
        buf->cur_size = size_new;                                               \
        return buf;                                                             \
    }



                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \


/*
Read(buf)
 Pre
  (buf invariants hold)
 Post
  out       = read
*/

#define MK_BUF_READ(t,pre)                                                      \
    static ARRAY_OF(t) INLINE BUF_FUN(read,pre)                                 \
                       (iallocate_t alloc, BUF_OF(t) buf)                       \
    {                                                                           \
        ARRAY_OF(t) out = ARRAY_FUN(create,pre)(alloc, buf->cur_size);          \
                                                                                \
        for (iint_t ix = 0; ix != buf->cur_size; ++ix)                          \
        {                                                                       \
            iint_t in = (buf->head + ix) % buf->max_size;                       \
            ARRAY_PAYLOAD(out,t)[ix] = BUF_PAYLOAD(buf,t)[in];                  \
        }                                                                       \
                                                                                \
        return out;                                                             \
    }



#define MAKE_BUF(t,pre)                                                         \
    MK_BUF_STRUCT (t)                                                           \
    MK_BUF_MAKE   (t,pre)                                                       \
    MK_BUF_PUSH   (t,pre)                                                       \
    MK_BUF_READ   (t,pre)                                                       \

MAKE_BUF(idouble_t,   idouble_)
MAKE_BUF(iint_t,      iint_)
MAKE_BUF(ierror_t,    ierror_)
MAKE_BUF(ibool_t,     ibool_)
MAKE_BUF(idate_t,     idate_)
MAKE_BUF(iunit_t,     iunit_)

#line 1 "state definition"
typedef struct {
    /* inputs */
    idate_t    gen_date;
    iint_t     new_count;
    ibool_t    *new_gen_fact_simp_86_simp_88;
    ierror_t   *new_gen_fact_simp_86_simp_89;
    istring_t  *new_gen_fact_simp_86_simp_90_simp_91;
    iint_t     *new_gen_fact_simp_86_simp_90_simp_92;
    idate_t    *new_gen_fact_simp_87;

    /* outputs */
    ibool_t    repl_ix_0;
    ierror_t   repl_ix_1;
    idouble_t  repl_ix_2;

    /* resumables */
    ibool_t    has_acc_c_conv_26_simp_11;
    ibool_t    res_acc_c_conv_26_simp_11;
    ibool_t    has_acc_c_conv_26_simp_12;
    ierror_t   res_acc_c_conv_26_simp_12;
    ibool_t    has_acc_c_conv_26_simp_13;
    idouble_t  res_acc_c_conv_26_simp_13;
    ibool_t    has_acc_s_conv_13_simp_10;
    idouble_t  res_acc_s_conv_13_simp_10;
    ibool_t    has_acc_s_conv_13_simp_8;
    ibool_t    res_acc_s_conv_13_simp_8;
    ibool_t    has_acc_s_conv_13_simp_9;
    ierror_t   res_acc_s_conv_13_simp_9;
} icicle_state_t;

#line 1 "compute function"
void compute(icicle_state_t *s)
{
    ibool_t    acc_c_conv_26_simp_11;
    ierror_t   acc_c_conv_26_simp_12;
    idouble_t  acc_c_conv_26_simp_13;
    ibool_t    acc_c_conv_26_simp_47;
    ierror_t   acc_c_conv_26_simp_48;
    idouble_t  acc_c_conv_26_simp_49;
    idouble_t  acc_s_conv_13_simp_10;
    ibool_t    acc_s_conv_13_simp_32;
    ierror_t   acc_s_conv_13_simp_33;
    idouble_t  acc_s_conv_13_simp_34;
    ibool_t    acc_s_conv_13_simp_8;
    ierror_t   acc_s_conv_13_simp_9;
    ibool_t    c_conv_26_simp_71;
    ierror_t   c_conv_26_simp_72;
    idouble_t  c_conv_26_simp_73;
    ibool_t    flat_0_simp_14;
    ierror_t   flat_0_simp_15;
    iint_t     flat_0_simp_16;
    ibool_t    flat_0_simp_17;
    ierror_t   flat_0_simp_18;
    iint_t     flat_0_simp_19;
    ibool_t    flat_1_simp_20;
    ierror_t   flat_1_simp_21;
    idouble_t  flat_1_simp_22;
    ibool_t    flat_1_simp_23;
    ierror_t   flat_1_simp_24;
    idouble_t  flat_1_simp_25;
    ibool_t    flat_12_simp_53;
    ierror_t   flat_12_simp_54;
    idouble_t  flat_12_simp_55;
    ibool_t    flat_12_simp_56;
    ierror_t   flat_12_simp_57;
    idouble_t  flat_12_simp_58;
    ibool_t    flat_13_simp_59;
    ierror_t   flat_13_simp_60;
    idouble_t  flat_13_simp_61;
    ibool_t    flat_13_simp_62;
    ierror_t   flat_13_simp_63;
    idouble_t  flat_13_simp_64;
    ibool_t    flat_2_simp_26;
    ierror_t   flat_2_simp_27;
    idouble_t  flat_2_simp_28;
    ibool_t    flat_2_simp_29;
    ierror_t   flat_2_simp_30;
    idouble_t  flat_2_simp_31;
    ibool_t    flat_24_simp_74;
    ierror_t   flat_24_simp_75;
    idouble_t  flat_24_simp_76;
    ibool_t    flat_24_simp_83;
    ierror_t   flat_24_simp_84;
    idouble_t  flat_24_simp_85;
    ibool_t    flat_27_simp_77;
    ierror_t   flat_27_simp_78;
    idouble_t  flat_27_simp_79;
    ibool_t    flat_27_simp_80;
    ierror_t   flat_27_simp_81;
    idouble_t  flat_27_simp_82;
    ibool_t    flat_3_simp_35;
    ierror_t   flat_3_simp_36;
    idouble_t  flat_3_simp_37;
    ibool_t    flat_3_simp_44;
    ierror_t   flat_3_simp_45;
    idouble_t  flat_3_simp_46;
    ibool_t    flat_6_simp_38;
    ierror_t   flat_6_simp_39;
    idouble_t  flat_6_simp_40;
    ibool_t    flat_6_simp_41;
    ierror_t   flat_6_simp_42;
    idouble_t  flat_6_simp_43;
    ibool_t    flat_9_simp_50;
    ierror_t   flat_9_simp_51;
    idouble_t  flat_9_simp_52;
    ibool_t    flat_9_simp_65;
    ierror_t   flat_9_simp_66;
    idouble_t  flat_9_simp_67;
    ibool_t    s_conv_13_simp_68;
    ierror_t   s_conv_13_simp_69;
    idouble_t  s_conv_13_simp_70;

    acc_s_conv_13_simp_8                 = itrue;                                /* init */
    acc_s_conv_13_simp_9                 = ierror_tombstone;                     /* init */
    acc_s_conv_13_simp_10                = 0.0;                                  /* init */
    acc_c_conv_26_simp_11                = itrue;                                /* init */
    acc_c_conv_26_simp_12                = ierror_tombstone;                     /* init */
    acc_c_conv_26_simp_13                = 0.0;                                  /* init */
    
    if (s->has_acc_s_conv_13_simp_8) {
        acc_s_conv_13_simp_8             = s->res_acc_s_conv_13_simp_8;          /* load */
    }
    
    if (s->has_acc_s_conv_13_simp_9) {
        acc_s_conv_13_simp_9             = s->res_acc_s_conv_13_simp_9;          /* load */
    }
    
    if (s->has_acc_s_conv_13_simp_10) {
        acc_s_conv_13_simp_10            = s->res_acc_s_conv_13_simp_10;         /* load */
    }
    
    if (s->has_acc_c_conv_26_simp_11) {
        acc_c_conv_26_simp_11            = s->res_acc_c_conv_26_simp_11;         /* load */
    }
    
    if (s->has_acc_c_conv_26_simp_12) {
        acc_c_conv_26_simp_12            = s->res_acc_c_conv_26_simp_12;         /* load */
    }
    
    if (s->has_acc_c_conv_26_simp_13) {
        acc_c_conv_26_simp_13            = s->res_acc_c_conv_26_simp_13;         /* load */
    }
    
    const iint_t    new_count            = s->new_count;
    const ibool_t   *const new_gen_fact_simp_86_simp_88 = s->new_gen_fact_simp_86_simp_88;
    const ierror_t  *const new_gen_fact_simp_86_simp_89 = s->new_gen_fact_simp_86_simp_89;
    const istring_t *const new_gen_fact_simp_86_simp_90_simp_91 = s->new_gen_fact_simp_86_simp_90_simp_91;
    const iint_t    *const new_gen_fact_simp_86_simp_90_simp_92 = s->new_gen_fact_simp_86_simp_90_simp_92;
    const idate_t   *const new_gen_fact_simp_87 = s->new_gen_fact_simp_87;
    
    for (iint_t i = 0; i < new_count; i++) {
        ibool_t    gen_fact_simp_86_simp_88 = new_gen_fact_simp_86_simp_88[i];
        ierror_t   gen_fact_simp_86_simp_89 = new_gen_fact_simp_86_simp_89[i];
        istring_t  gen_fact_simp_86_simp_90_simp_91 = new_gen_fact_simp_86_simp_90_simp_91[i];
        iint_t     gen_fact_simp_86_simp_90_simp_92 = new_gen_fact_simp_86_simp_90_simp_92[i];
        idate_t    gen_fact_simp_87      = new_gen_fact_simp_87[i];
        flat_0_simp_14                   = ifalse;                               /* init */
        flat_0_simp_15                   = ierror_tombstone;                     /* init */
        flat_0_simp_16                   = 0;                                    /* init */
        
        if (gen_fact_simp_86_simp_88) {
            flat_0_simp_14               = itrue;                                /* write */
            flat_0_simp_15               = ierror_tombstone;                     /* write */
            flat_0_simp_16               = gen_fact_simp_86_simp_90_simp_92;     /* write */
        } else {
            flat_0_simp_14               = ifalse;                               /* write */
            flat_0_simp_15               = gen_fact_simp_86_simp_89;             /* write */
            flat_0_simp_16               = 0;                                    /* write */
        }
        
        flat_0_simp_17                   = flat_0_simp_14;                       /* read */
        flat_0_simp_18                   = flat_0_simp_15;                       /* read */
        flat_0_simp_19                   = flat_0_simp_16;                       /* read */
        flat_1_simp_20                   = ifalse;                               /* init */
        flat_1_simp_21                   = ierror_tombstone;                     /* init */
        flat_1_simp_22                   = 0.0;                                  /* init */
        
        if (flat_0_simp_17) {
            idouble_t  simp_3            = iint_extend (flat_0_simp_19);         /* let */
            flat_1_simp_20               = itrue;                                /* write */
            flat_1_simp_21               = ierror_tombstone;                     /* write */
            flat_1_simp_22               = simp_3;                               /* write */
        } else {
            flat_1_simp_20               = ifalse;                               /* write */
            flat_1_simp_21               = flat_0_simp_18;                       /* write */
            flat_1_simp_22               = 0.0;                                  /* write */
        }
        
        flat_1_simp_23                   = flat_1_simp_20;                       /* read */
        flat_1_simp_24                   = flat_1_simp_21;                       /* read */
        flat_1_simp_25                   = flat_1_simp_22;                       /* read */
        flat_2_simp_26                   = ifalse;                               /* init */
        flat_2_simp_27                   = ierror_tombstone;                     /* init */
        flat_2_simp_28                   = 0.0;                                  /* init */
        
        if (flat_1_simp_23) {
            flat_2_simp_26               = itrue;                                /* write */
            flat_2_simp_27               = ierror_tombstone;                     /* write */
            flat_2_simp_28               = flat_1_simp_25;                       /* write */
        } else {
            flat_2_simp_26               = ifalse;                               /* write */
            flat_2_simp_27               = flat_1_simp_24;                       /* write */
            flat_2_simp_28               = 0.0;                                  /* write */
        }
        
        flat_2_simp_29                   = flat_2_simp_26;                       /* read */
        flat_2_simp_30                   = flat_2_simp_27;                       /* read */
        flat_2_simp_31                   = flat_2_simp_28;                       /* read */
        acc_s_conv_13_simp_32            = acc_s_conv_13_simp_8;                 /* read */
        acc_s_conv_13_simp_33            = acc_s_conv_13_simp_9;                 /* read */
        acc_s_conv_13_simp_34            = acc_s_conv_13_simp_10;                /* read */
        flat_3_simp_35                   = ifalse;                               /* init */
        flat_3_simp_36                   = ierror_tombstone;                     /* init */
        flat_3_simp_37                   = 0.0;                                  /* init */
        
        if (flat_2_simp_29) {
            flat_6_simp_38               = ifalse;                               /* init */
            flat_6_simp_39               = ierror_tombstone;                     /* init */
            flat_6_simp_40               = 0.0;                                  /* init */
            
            if (acc_s_conv_13_simp_32) {
                idouble_t  simp_5        = idouble_add (flat_2_simp_31, acc_s_conv_13_simp_34); /* let */
                flat_6_simp_38           = itrue;                                /* write */
                flat_6_simp_39           = ierror_tombstone;                     /* write */
                flat_6_simp_40           = simp_5;                               /* write */
            } else {
                flat_6_simp_38           = ifalse;                               /* write */
                flat_6_simp_39           = acc_s_conv_13_simp_33;                /* write */
                flat_6_simp_40           = 0.0;                                  /* write */
            }
            
            flat_6_simp_41               = flat_6_simp_38;                       /* read */
            flat_6_simp_42               = flat_6_simp_39;                       /* read */
            flat_6_simp_43               = flat_6_simp_40;                       /* read */
            flat_3_simp_35               = flat_6_simp_41;                       /* write */
            flat_3_simp_36               = flat_6_simp_42;                       /* write */
            flat_3_simp_37               = flat_6_simp_43;                       /* write */
        } else {
            flat_3_simp_35               = ifalse;                               /* write */
            flat_3_simp_36               = flat_2_simp_30;                       /* write */
            flat_3_simp_37               = 0.0;                                  /* write */
        }
        
        flat_3_simp_44                   = flat_3_simp_35;                       /* read */
        flat_3_simp_45                   = flat_3_simp_36;                       /* read */
        flat_3_simp_46                   = flat_3_simp_37;                       /* read */
        acc_s_conv_13_simp_8             = flat_3_simp_44;                       /* write */
        acc_s_conv_13_simp_9             = flat_3_simp_45;                       /* write */
        acc_s_conv_13_simp_10            = flat_3_simp_46;                       /* write */
        acc_c_conv_26_simp_47            = acc_c_conv_26_simp_11;                /* read */
        acc_c_conv_26_simp_48            = acc_c_conv_26_simp_12;                /* read */
        acc_c_conv_26_simp_49            = acc_c_conv_26_simp_13;                /* read */
        flat_9_simp_50                   = ifalse;                               /* init */
        flat_9_simp_51                   = ierror_tombstone;                     /* init */
        flat_9_simp_52                   = 0.0;                                  /* init */
        
        if (flat_1_simp_23) {
            flat_12_simp_53              = ifalse;                               /* init */
            flat_12_simp_54              = ierror_tombstone;                     /* init */
            flat_12_simp_55              = 0.0;                                  /* init */
            
            if (acc_c_conv_26_simp_47) {
                idouble_t  simp_7        = idouble_add (acc_c_conv_26_simp_49, 1.0); /* let */
                flat_12_simp_53          = itrue;                                /* write */
                flat_12_simp_54          = ierror_tombstone;                     /* write */
                flat_12_simp_55          = simp_7;                               /* write */
            } else {
                flat_12_simp_53          = ifalse;                               /* write */
                flat_12_simp_54          = acc_c_conv_26_simp_48;                /* write */
                flat_12_simp_55          = 0.0;                                  /* write */
            }
            
            flat_12_simp_56              = flat_12_simp_53;                      /* read */
            flat_12_simp_57              = flat_12_simp_54;                      /* read */
            flat_12_simp_58              = flat_12_simp_55;                      /* read */
            flat_13_simp_59              = ifalse;                               /* init */
            flat_13_simp_60              = ierror_tombstone;                     /* init */
            flat_13_simp_61              = 0.0;                                  /* init */
            
            if (flat_12_simp_56) {
                flat_13_simp_59          = itrue;                                /* write */
                flat_13_simp_60          = ierror_tombstone;                     /* write */
                flat_13_simp_61          = flat_12_simp_58;                      /* write */
            } else {
                flat_13_simp_59          = ifalse;                               /* write */
                flat_13_simp_60          = flat_12_simp_57;                      /* write */
                flat_13_simp_61          = 0.0;                                  /* write */
            }
            
            flat_13_simp_62              = flat_13_simp_59;                      /* read */
            flat_13_simp_63              = flat_13_simp_60;                      /* read */
            flat_13_simp_64              = flat_13_simp_61;                      /* read */
            flat_9_simp_50               = flat_13_simp_62;                      /* write */
            flat_9_simp_51               = flat_13_simp_63;                      /* write */
            flat_9_simp_52               = flat_13_simp_64;                      /* write */
        } else {
            flat_9_simp_50               = ifalse;                               /* write */
            flat_9_simp_51               = flat_1_simp_24;                       /* write */
            flat_9_simp_52               = 0.0;                                  /* write */
        }
        
        flat_9_simp_65                   = flat_9_simp_50;                       /* read */
        flat_9_simp_66                   = flat_9_simp_51;                       /* read */
        flat_9_simp_67                   = flat_9_simp_52;                       /* read */
        acc_c_conv_26_simp_11            = flat_9_simp_65;                       /* write */
        acc_c_conv_26_simp_12            = flat_9_simp_66;                       /* write */
        acc_c_conv_26_simp_13            = flat_9_simp_67;                       /* write */
    }
    
    s->has_acc_s_conv_13_simp_8          = itrue;                                /* save */
    s->res_acc_s_conv_13_simp_8          = acc_s_conv_13_simp_8;                 /* save */
    
    s->has_acc_s_conv_13_simp_9          = itrue;                                /* save */
    s->res_acc_s_conv_13_simp_9          = acc_s_conv_13_simp_9;                 /* save */
    
    s->has_acc_s_conv_13_simp_10         = itrue;                                /* save */
    s->res_acc_s_conv_13_simp_10         = acc_s_conv_13_simp_10;                /* save */
    
    s->has_acc_c_conv_26_simp_11         = itrue;                                /* save */
    s->res_acc_c_conv_26_simp_11         = acc_c_conv_26_simp_11;                /* save */
    
    s->has_acc_c_conv_26_simp_12         = itrue;                                /* save */
    s->res_acc_c_conv_26_simp_12         = acc_c_conv_26_simp_12;                /* save */
    
    s->has_acc_c_conv_26_simp_13         = itrue;                                /* save */
    s->res_acc_c_conv_26_simp_13         = acc_c_conv_26_simp_13;                /* save */
    
    s_conv_13_simp_68                    = acc_s_conv_13_simp_8;                 /* read */
    s_conv_13_simp_69                    = acc_s_conv_13_simp_9;                 /* read */
    s_conv_13_simp_70                    = acc_s_conv_13_simp_10;                /* read */
    c_conv_26_simp_71                    = acc_c_conv_26_simp_11;                /* read */
    c_conv_26_simp_72                    = acc_c_conv_26_simp_12;                /* read */
    c_conv_26_simp_73                    = acc_c_conv_26_simp_13;                /* read */
    flat_24_simp_74                      = ifalse;                               /* init */
    flat_24_simp_75                      = ierror_tombstone;                     /* init */
    flat_24_simp_76                      = 0.0;                                  /* init */
    
    if (s_conv_13_simp_68) {
        flat_27_simp_77                  = ifalse;                               /* init */
        flat_27_simp_78                  = ierror_tombstone;                     /* init */
        flat_27_simp_79                  = 0.0;                                  /* init */
        
        if (c_conv_26_simp_71) {
            idouble_t  conv_39           = idouble_div (s_conv_13_simp_70, c_conv_26_simp_73); /* let */
            flat_27_simp_77              = itrue;                                /* write */
            flat_27_simp_78              = ierror_tombstone;                     /* write */
            flat_27_simp_79              = conv_39;                              /* write */
        } else {
            flat_27_simp_77              = ifalse;                               /* write */
            flat_27_simp_78              = c_conv_26_simp_72;                    /* write */
            flat_27_simp_79              = 0.0;                                  /* write */
        }
        
        flat_27_simp_80                  = flat_27_simp_77;                      /* read */
        flat_27_simp_81                  = flat_27_simp_78;                      /* read */
        flat_27_simp_82                  = flat_27_simp_79;                      /* read */
        flat_24_simp_74                  = flat_27_simp_80;                      /* write */
        flat_24_simp_75                  = flat_27_simp_81;                      /* write */
        flat_24_simp_76                  = flat_27_simp_82;                      /* write */
    } else {
        flat_24_simp_74                  = ifalse;                               /* write */
        flat_24_simp_75                  = s_conv_13_simp_69;                    /* write */
        flat_24_simp_76                  = 0.0;                                  /* write */
    }
    
    flat_24_simp_83                      = flat_24_simp_74;                      /* read */
    flat_24_simp_84                      = flat_24_simp_75;                      /* read */
    flat_24_simp_85                      = flat_24_simp_76;                      /* read */
    s->repl_ix_0                         = flat_24_simp_83;                      /* output */
    s->repl_ix_1                         = flat_24_simp_84;                      /* output */
    s->repl_ix_2                         = flat_24_simp_85;                      /* output */
}

- C evaluation:
[(homer,2.2)]

- Core evaluation:
[homer, 2.2]

> > -- Strings
> - Flattened:
gen$date = DATE
{
  init acc$c$conv$13$simp$6@{Mutable Bool} = True@{Bool};
  init acc$c$conv$13$simp$7@{Mutable Error} = ExceptTombstone@{Error};
  init acc$c$conv$13$simp$8@{Mutable Int} = 0@{Int};
  load_resumable@{Bool} acc$c$conv$13$simp$6;
  load_resumable@{Error} acc$c$conv$13$simp$7;
  load_resumable@{Int} acc$c$conv$13$simp$8;
  for_facts (gen$fact$simp$45$simp$47@{Bool},
             gen$fact$simp$45$simp$48@{Error},
             gen$fact$simp$45$simp$49$simp$50@{String},
             gen$fact$simp$45$simp$49$simp$51@{Int},
             gen$fact$simp$46@{DateTime}) in new {
    init flat$0$simp$9@{Mutable Bool} = False@{Bool};
    init flat$0$simp$10@{Mutable Error} = ExceptTombstone@{Error};
    init flat$0$simp$11@{Mutable String} = ""@{String};
    if (gen$fact$simp$45$simp$47) {
      write flat$0$simp$9 = True@{Bool};
      write flat$0$simp$10 = ExceptTombstone@{Error};
      write flat$0$simp$11 = gen$fact$simp$45$simp$49$simp$50;
    } else {
      write flat$0$simp$9 = False@{Bool};
      write flat$0$simp$10 = gen$fact$simp$45$simp$48;
      write flat$0$simp$11 = ""@{String};
    }
    read@{Mutable Bool} flat$0$simp$12 = flat$0$simp$9;
    read@{Mutable Error} flat$0$simp$13 = flat$0$simp$10;
    read@{Mutable String} flat$0$simp$14 = flat$0$simp$11;
    init flat$1$simp$15@{Mutable Bool} = False@{Bool};
    init flat$1$simp$17@{Mutable Bool} = False@{Bool};
    if (flat$0$simp$12) {
      let simp$3 = eq#@{String}
                   flat$0$simp$14 ("head"@{String});
      write flat$1$simp$15 = True@{Bool};
      write flat$1$simp$17 = simp$3;
    } else {
      write flat$1$simp$15 = False@{Bool};
      write flat$1$simp$17 = False@{Bool};
    }
    read@{Mutable Bool} flat$1$simp$18 = flat$1$simp$15;
    read@{Mutable Bool} flat$1$simp$20 = flat$1$simp$17;
    init flat$2@{Mutable Bool} = False@{Bool};
    if (flat$1$simp$18) {
      write flat$2 = flat$1$simp$20;
    } 
     else {
      write flat$2 = True@{Bool};
    } 
    
    read@{Mutable Bool} flat$2 = flat$2;
    if (flat$2) {
      read@{Mutable Bool} acc$c$conv$13$simp$21 = acc$c$conv$13$simp$6;
      read@{Mutable Error} acc$c$conv$13$simp$22 = acc$c$conv$13$simp$7;
      read@{Mutable Int} acc$c$conv$13$simp$23 = acc$c$conv$13$simp$8;
      init flat$3$simp$24@{Mutable Bool} = False@{Bool};
      init flat$3$simp$25@{Mutable Error} = ExceptTombstone@{Error};
      init flat$3$simp$26@{Mutable Int} = 0@{Int};
      if (flat$0$simp$12) {
        init flat$6$simp$27@{Mutable Bool} = False@{Bool};
        init flat$6$simp$28@{Mutable Error} = ExceptTombstone@{Error};
        init flat$6$simp$29@{Mutable Int} = 0@{Int};
        if (acc$c$conv$13$simp$21) {
          let simp$5 = add#@{Int}
                       acc$c$conv$13$simp$23 (1@{Int});
          write flat$6$simp$27 = True@{Bool};
          write flat$6$simp$28 = ExceptTombstone@{Error};
          write flat$6$simp$29 = simp$5;
        } else {
          write flat$6$simp$27 = False@{Bool};
          write flat$6$simp$28 = acc$c$conv$13$simp$22;
          write flat$6$simp$29 = 0@{Int};
        }
        read@{Mutable Bool} flat$6$simp$30 = flat$6$simp$27;
        read@{Mutable Error} flat$6$simp$31 = flat$6$simp$28;
        read@{Mutable Int} flat$6$simp$32 = flat$6$simp$29;
        init flat$7$simp$33@{Mutable Bool} = False@{Bool};
        init flat$7$simp$34@{Mutable Error} = ExceptTombstone@{Error};
        init flat$7$simp$35@{Mutable Int} = 0@{Int};
        if (flat$6$simp$30) {
          write flat$7$simp$33 = True@{Bool};
          write flat$7$simp$34 = ExceptTombstone@{Error};
          write flat$7$simp$35 = flat$6$simp$32;
        } else {
          write flat$7$simp$33 = False@{Bool};
          write flat$7$simp$34 = flat$6$simp$31;
          write flat$7$simp$35 = 0@{Int};
        }
        read@{Mutable Bool} flat$7$simp$36 = flat$7$simp$33;
        read@{Mutable Error} flat$7$simp$37 = flat$7$simp$34;
        read@{Mutable Int} flat$7$simp$38 = flat$7$simp$35;
        write flat$3$simp$24 = flat$7$simp$36;
        write flat$3$simp$25 = flat$7$simp$37;
        write flat$3$simp$26 = flat$7$simp$38;
      } else {
        write flat$3$simp$24 = False@{Bool};
        write flat$3$simp$25 = flat$0$simp$13;
        write flat$3$simp$26 = 0@{Int};
      }
      read@{Mutable Bool} flat$3$simp$39 = flat$3$simp$24;
      read@{Mutable Error} flat$3$simp$40 = flat$3$simp$25;
      read@{Mutable Int} flat$3$simp$41 = flat$3$simp$26;
      write acc$c$conv$13$simp$6 = flat$3$simp$39;
      write acc$c$conv$13$simp$7 = flat$3$simp$40;
      write acc$c$conv$13$simp$8 = flat$3$simp$41;
    }
  }
  save_resumable@{Bool} acc$c$conv$13$simp$6;
  save_resumable@{Error} acc$c$conv$13$simp$7;
  save_resumable@{Int} acc$c$conv$13$simp$8;
  read@{Mutable Bool} c$conv$13$simp$42 = acc$c$conv$13$simp$6;
  read@{Mutable Error} c$conv$13$simp$43 = acc$c$conv$13$simp$7;
  read@{Mutable Int} c$conv$13$simp$44 = acc$c$conv$13$simp$8;
  output@{(Sum Error Int)} repl (c$conv$13$simp$42@{Bool},
               c$conv$13$simp$43@{Error},
               c$conv$13$simp$44@{Int});
}

- C:
// 01-includes.h
#line 1 "01-includes.h"
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

typedef uint64_t ierror_t;
typedef uint64_t iunit_t;
typedef uint64_t ibool_t;
typedef  int64_t iint_t;
typedef   double idouble_t;
typedef  int64_t idate_t;

typedef const char *istring_t;

static const ierror_t ierror_tombstone              = 0;
static const ierror_t ierror_fold1_no_value         = 1;
static const ierror_t ierror_variable_not_available = 2;

static const iunit_t iunit  = 0x13013;
static const ibool_t ifalse = 0;
static const ibool_t itrue  = 1;

#define INLINE __attribute__((always_inline))

// 02-numbers.h
#line 1 "02-numbers.h"
#define MK_SIMPLE_CMPS(t,pre)                                                   \
    static ibool_t   INLINE pre##eq   (t x, t y) { return x == y; }             \
    static ibool_t   INLINE pre##ne   (t x, t y) { return x != y; }             \
    static ibool_t   INLINE pre##gt   (t x, t y) { return x >  y; }             \
    static ibool_t   INLINE pre##ge   (t x, t y) { return x >= y; }             \
    static ibool_t   INLINE pre##lt   (t x, t y) { return x <  y; }             \
    static ibool_t   INLINE pre##le   (t x, t y) { return x <= y; }             \

MK_SIMPLE_CMPS(ierror_t, ierror_)
MK_SIMPLE_CMPS(ibool_t,  ibool_)
MK_SIMPLE_CMPS(idate_t,  idate_)
MK_SIMPLE_CMPS(iunit_t,  iunit_)

static idouble_t INLINE iint_extend   (iint_t    x)              { return x; }
static iint_t    INLINE iint_add      (iint_t    x, iint_t    y) { return x +  y; }
static iint_t    INLINE iint_sub      (iint_t    x, iint_t    y) { return x -  y; }
static iint_t    INLINE iint_mul      (iint_t    x, iint_t    y) { return x *  y; }

MK_SIMPLE_CMPS(iint_t, iint_)

static iint_t    INLINE idouble_trunc (idouble_t x)              { return (iint_t)x; }
static idouble_t INLINE idouble_add   (idouble_t x, idouble_t y) { return x + y; }
static idouble_t INLINE idouble_sub   (idouble_t x, idouble_t y) { return x - y; }
static idouble_t INLINE idouble_mul   (idouble_t x, idouble_t y) { return x * y; }
static idouble_t INLINE idouble_pow   (idouble_t x, idouble_t y) { return pow(x, y); }
static idouble_t INLINE idouble_div   (idouble_t x, idouble_t y) { return x / y; }
static idouble_t INLINE idouble_log   (idouble_t x)              { return log(x); }
static idouble_t INLINE idouble_exp   (idouble_t x)              { return exp(x); }

MK_SIMPLE_CMPS(idouble_t, idouble_)

static ibool_t   INLINE istring_gt    (istring_t x, istring_t y) { return strcmp(x, y) >  0; }
static ibool_t   INLINE istring_ge    (istring_t x, istring_t y) { return strcmp(x, y) >= 0; }
static ibool_t   INLINE istring_lt    (istring_t x, istring_t y) { return strcmp(x, y) <  0; }
static ibool_t   INLINE istring_le    (istring_t x, istring_t y) { return strcmp(x, y) <= 0; }
static ibool_t   INLINE istring_eq    (istring_t x, istring_t y) { return strcmp(x, y) == 0; }
static ibool_t   INLINE istring_ne    (istring_t x, istring_t y) { return strcmp(x, y) != 0; }

// 03-array.h
#line 1 "03-array.h"
typedef struct
{
    iint_t count;
} iarray_struct;
// payload goes straight after

#define ARRAY_OF(t) iarray_t__##t
#define ARRAY_FUN(f,pre) iarray__##pre##f

// I'm not certain there's a point having a different one for each type.
// It makes it look a little better, but I don't think it's any safer.
#define MK_ARRAY_STRUCT(t) typedef iarray_struct* ARRAY_OF(t);

// get payload by advancing pointer by size of struct
// (which should be equivalent to straight after struct fields)
// then casting to t*
#define ARRAY_PAYLOAD(x,t) ((t*)(x+1))


#define MK_ARRAY_LENGTH(t,pre)                                                  \
    static iint_t INLINE ARRAY_FUN(length,pre) (ARRAY_OF(t) arr)                \
    { return arr->count; }

#define MK_ARRAY_EQ(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(eq,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        if (x->count != y->count) return ifalse;                                \
        for (iint_t ix = 0; ix != x->count; ++ix) {                             \
            if (!pre##eq(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        return itrue;                                                           \
    }

#define MK_ARRAY_LT(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(lt,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        iint_t min = (x->count < y->count) ? x->count : y->count;               \
        for (iint_t ix = 0; ix != min; ++ix) {                                  \
            if (!pre##lt(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        if (x->count < y->count)                                                \
            return itrue;                                                       \
        else                                                                    \
            return ifalse;                                                      \
    }

#define MK_ARRAY_CMP(t,pre,op,ret)                                              \
    static ibool_t INLINE ARRAY_FUN(op,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    { return ret ; }                                                            \

#define MK_ARRAY_CMPS(t,pre)                                                    \
    MK_ARRAY_EQ(t,pre)                                                          \
    MK_ARRAY_LT(t,pre)                                                          \
    MK_ARRAY_CMP(t,pre,ne, !ARRAY_FUN(eq,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,le,  ARRAY_FUN(lt,pre) (x,y) || ARRAY_FUN(eq,pre) (x,y)) \
    MK_ARRAY_CMP(t,pre,ge, !ARRAY_FUN(lt,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,gt, !ARRAY_FUN(le,pre) (x,y))                            \



#define MK_ARRAY_INDEX(t,pre)                                                   \
    static t       INLINE ARRAY_FUN(index,pre) (ARRAY_OF(t) x, iint_t ix)       \
    { return ARRAY_PAYLOAD(x,t)[ix]; }                                          \


#define MK_ARRAY_CREATE(t,pre)                                                  \
    static ARRAY_OF(t)  INLINE ARRAY_FUN(create,pre)                            \
                                        (iallocate_t alloc, iint_t sz)          \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(iarray_struct);      \
        ARRAY_OF(t)  ret = (ARRAY_OF(t))allocate(alloc, bytes);                 \
        ret->count = sz;                                                        \
        return ret;                                                             \
    }                                                                           \

#define MK_ARRAY_PUT(t,pre)                                                     \
    static iunit_t INLINE ARRAY_FUN(put,pre)   (ARRAY_OF(t) x, iint_t ix, t v)  \
    {                                                                           \
        ARRAY_PAYLOAD(x,t)[ix] = v;                                             \
        return iunit;                                                           \
    }                                                                           \

                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \



#define MAKE_ARRAY(t,pre)                                                       \
    MK_ARRAY_STRUCT (t)                                                         \
    MK_ARRAY_LENGTH (t,pre)                                                     \
    MK_ARRAY_CMPS   (t,pre)                                                     \
    MK_ARRAY_INDEX  (t,pre)                                                     \
    MK_ARRAY_CREATE (t,pre)                                                     \
    MK_ARRAY_PUT    (t,pre)                                                     \
    // MK_ARRAY_ZIP    (t,pre)                                                     \

// TEMPORARY
typedef void* iallocate_t;
void* allocate(iallocate_t t, iint_t sz);

MAKE_ARRAY(idouble_t,   idouble_)
MAKE_ARRAY(iint_t,      iint_)
MAKE_ARRAY(ierror_t,    ierror_)
MAKE_ARRAY(ibool_t,     ibool_)
MAKE_ARRAY(idate_t,     idate_)
MAKE_ARRAY(iunit_t,     iunit_)

// 04-buffer.h
#line 1 "04-buffer.h"
typedef struct
{
    iint_t max_size;
    iint_t cur_size;
    iint_t head;
} ibuf_struct;
/*
 Invariants
  0 <= cur_size <= max_size
  0 <= head     <  max_size

  read = ARRAY[ head..(head+cur_size) % max_size )

*/

#define BUF_OF(t)   ibuf_t__##t
#define BUF_FUN(f,pre) ibuf__##pre##f

#define MK_BUF_STRUCT(t) typedef ibuf_struct* BUF_OF(t);

#define BUF_PAYLOAD(x,t) ((t*)(x+1))

/*
Make
 Pre
  0 <= sz

 Post
  cur_size' = 0
  head'     = 0
  max_size' = sz
  ARRAY'    = [??...]

  read'     = ARRAY'[head'..head'+cur_size')
            = ARRAY'[0..0)
            = []

  (invariants hold)

*/
#define MK_BUF_MAKE(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(make,pre)                                   \
                     (iallocate_t alloc, iint_t sz)                             \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(ibuf_struct);                \
        BUF_OF(t) ret    = (BUF_OF(t))allocate(alloc, bytes);                   \
        ret->max_size = sz;                                                     \
        ret->cur_size = 0;                                                      \
        ret->head     = 0;                                                      \
        return ret;                                                             \
    }

/*
Push(buf, val)
 Pre
  (buf invariants hold)
 Post
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]

*/

/*
Push(buf, val)
  {buf invariants hold}
  ...
  {
  head'     = if cur_size < max_size
              then head
              else (head+1) % max_size

  cur_size' = min max_size (cur_size+1)

  ARRAY'    = ARRAY[update]:=val
  read'     = ARRAY[head'..(head'+cur_size') % max_size)
  update    = (head' + cur_size') % max_size
  }
  ==>
  {
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]
  }

*/

#define MK_BUF_PUSH(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(push,pre) (BUF_OF(t) buf, t val)            \
    {                                                                           \
        iint_t head_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->head                                            \
                        : (buf->head+1) % buf->max_size;                        \
                                                                                \
        iint_t size_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->cur_size + 1                                    \
                        :  buf->max_size;                                       \
                                                                                \
        iint_t update   = (head_new + buf->cur_size) % buf->max_size;           \
                                                                                \
        BUF_PAYLOAD(buf,t)[update] = val;                                       \
                                                                                \
        buf->head     = head_new;                                               \
        buf->cur_size = size_new;                                               \
        return buf;                                                             \
    }



                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \


/*
Read(buf)
 Pre
  (buf invariants hold)
 Post
  out       = read
*/

#define MK_BUF_READ(t,pre)                                                      \
    static ARRAY_OF(t) INLINE BUF_FUN(read,pre)                                 \
                       (iallocate_t alloc, BUF_OF(t) buf)                       \
    {                                                                           \
        ARRAY_OF(t) out = ARRAY_FUN(create,pre)(alloc, buf->cur_size);          \
                                                                                \
        for (iint_t ix = 0; ix != buf->cur_size; ++ix)                          \
        {                                                                       \
            iint_t in = (buf->head + ix) % buf->max_size;                       \
            ARRAY_PAYLOAD(out,t)[ix] = BUF_PAYLOAD(buf,t)[in];                  \
        }                                                                       \
                                                                                \
        return out;                                                             \
    }



#define MAKE_BUF(t,pre)                                                         \
    MK_BUF_STRUCT (t)                                                           \
    MK_BUF_MAKE   (t,pre)                                                       \
    MK_BUF_PUSH   (t,pre)                                                       \
    MK_BUF_READ   (t,pre)                                                       \

MAKE_BUF(idouble_t,   idouble_)
MAKE_BUF(iint_t,      iint_)
MAKE_BUF(ierror_t,    ierror_)
MAKE_BUF(ibool_t,     ibool_)
MAKE_BUF(idate_t,     idate_)
MAKE_BUF(iunit_t,     iunit_)

#line 1 "state definition"
typedef struct {
    /* inputs */
    idate_t    gen_date;
    iint_t     new_count;
    ibool_t    *new_gen_fact_simp_45_simp_47;
    ierror_t   *new_gen_fact_simp_45_simp_48;
    istring_t  *new_gen_fact_simp_45_simp_49_simp_50;
    iint_t     *new_gen_fact_simp_45_simp_49_simp_51;
    idate_t    *new_gen_fact_simp_46;

    /* outputs */
    ibool_t    repl_ix_0;
    ierror_t   repl_ix_1;
    iint_t     repl_ix_2;

    /* resumables */
    ibool_t    has_acc_c_conv_13_simp_6;
    ibool_t    res_acc_c_conv_13_simp_6;
    ibool_t    has_acc_c_conv_13_simp_7;
    ierror_t   res_acc_c_conv_13_simp_7;
    ibool_t    has_acc_c_conv_13_simp_8;
    iint_t     res_acc_c_conv_13_simp_8;
} icicle_state_t;

#line 1 "compute function"
void compute(icicle_state_t *s)
{
    ibool_t    acc_c_conv_13_simp_21;
    ierror_t   acc_c_conv_13_simp_22;
    iint_t     acc_c_conv_13_simp_23;
    ibool_t    acc_c_conv_13_simp_6;
    ierror_t   acc_c_conv_13_simp_7;
    iint_t     acc_c_conv_13_simp_8;
    ibool_t    c_conv_13_simp_42;
    ierror_t   c_conv_13_simp_43;
    iint_t     c_conv_13_simp_44;
    ibool_t    flat_2;
    ierror_t   flat_0_simp_10;
    istring_t  flat_0_simp_11;
    ibool_t    flat_0_simp_12;
    ierror_t   flat_0_simp_13;
    istring_t  flat_0_simp_14;
    ibool_t    flat_0_simp_9;
    ibool_t    flat_1_simp_15;
    ibool_t    flat_1_simp_17;
    ibool_t    flat_1_simp_18;
    ibool_t    flat_1_simp_20;
    ibool_t    flat_3_simp_24;
    ierror_t   flat_3_simp_25;
    iint_t     flat_3_simp_26;
    ibool_t    flat_3_simp_39;
    ierror_t   flat_3_simp_40;
    iint_t     flat_3_simp_41;
    ibool_t    flat_6_simp_27;
    ierror_t   flat_6_simp_28;
    iint_t     flat_6_simp_29;
    ibool_t    flat_6_simp_30;
    ierror_t   flat_6_simp_31;
    iint_t     flat_6_simp_32;
    ibool_t    flat_7_simp_33;
    ierror_t   flat_7_simp_34;
    iint_t     flat_7_simp_35;
    ibool_t    flat_7_simp_36;
    ierror_t   flat_7_simp_37;
    iint_t     flat_7_simp_38;

    acc_c_conv_13_simp_6                 = itrue;                                /* init */
    acc_c_conv_13_simp_7                 = ierror_tombstone;                     /* init */
    acc_c_conv_13_simp_8                 = 0;                                    /* init */
    
    if (s->has_acc_c_conv_13_simp_6) {
        acc_c_conv_13_simp_6             = s->res_acc_c_conv_13_simp_6;          /* load */
    }
    
    if (s->has_acc_c_conv_13_simp_7) {
        acc_c_conv_13_simp_7             = s->res_acc_c_conv_13_simp_7;          /* load */
    }
    
    if (s->has_acc_c_conv_13_simp_8) {
        acc_c_conv_13_simp_8             = s->res_acc_c_conv_13_simp_8;          /* load */
    }
    
    const iint_t    new_count            = s->new_count;
    const ibool_t   *const new_gen_fact_simp_45_simp_47 = s->new_gen_fact_simp_45_simp_47;
    const ierror_t  *const new_gen_fact_simp_45_simp_48 = s->new_gen_fact_simp_45_simp_48;
    const istring_t *const new_gen_fact_simp_45_simp_49_simp_50 = s->new_gen_fact_simp_45_simp_49_simp_50;
    const iint_t    *const new_gen_fact_simp_45_simp_49_simp_51 = s->new_gen_fact_simp_45_simp_49_simp_51;
    const idate_t   *const new_gen_fact_simp_46 = s->new_gen_fact_simp_46;
    
    for (iint_t i = 0; i < new_count; i++) {
        ibool_t    gen_fact_simp_45_simp_47 = new_gen_fact_simp_45_simp_47[i];
        ierror_t   gen_fact_simp_45_simp_48 = new_gen_fact_simp_45_simp_48[i];
        istring_t  gen_fact_simp_45_simp_49_simp_50 = new_gen_fact_simp_45_simp_49_simp_50[i];
        iint_t     gen_fact_simp_45_simp_49_simp_51 = new_gen_fact_simp_45_simp_49_simp_51[i];
        idate_t    gen_fact_simp_46      = new_gen_fact_simp_46[i];
        flat_0_simp_9                    = ifalse;                               /* init */
        flat_0_simp_10                   = ierror_tombstone;                     /* init */
        flat_0_simp_11                   = "";                                   /* init */
        
        if (gen_fact_simp_45_simp_47) {
            flat_0_simp_9                = itrue;                                /* write */
            flat_0_simp_10               = ierror_tombstone;                     /* write */
            flat_0_simp_11               = gen_fact_simp_45_simp_49_simp_50;     /* write */
        } else {
            flat_0_simp_9                = ifalse;                               /* write */
            flat_0_simp_10               = gen_fact_simp_45_simp_48;             /* write */
            flat_0_simp_11               = "";                                   /* write */
        }
        
        flat_0_simp_12                   = flat_0_simp_9;                        /* read */
        flat_0_simp_13                   = flat_0_simp_10;                       /* read */
        flat_0_simp_14                   = flat_0_simp_11;                       /* read */
        flat_1_simp_15                   = ifalse;                               /* init */
        flat_1_simp_17                   = ifalse;                               /* init */
        
        if (flat_0_simp_12) {
            ibool_t    simp_3            = istring_eq (flat_0_simp_14, "head");  /* let */
            flat_1_simp_15               = itrue;                                /* write */
            flat_1_simp_17               = simp_3;                               /* write */
        } else {
            flat_1_simp_15               = ifalse;                               /* write */
            flat_1_simp_17               = ifalse;                               /* write */
        }
        
        flat_1_simp_18                   = flat_1_simp_15;                       /* read */
        flat_1_simp_20                   = flat_1_simp_17;                       /* read */
        flat_2                           = ifalse;                               /* init */
        
        if (flat_1_simp_18) {
            flat_2                       = flat_1_simp_20;                       /* write */
        } else {
            flat_2                       = itrue;                                /* write */
        }
        
        flat_2                           = flat_2;                               /* read */
        
        if (flat_2) {
            acc_c_conv_13_simp_21        = acc_c_conv_13_simp_6;                 /* read */
            acc_c_conv_13_simp_22        = acc_c_conv_13_simp_7;                 /* read */
            acc_c_conv_13_simp_23        = acc_c_conv_13_simp_8;                 /* read */
            flat_3_simp_24               = ifalse;                               /* init */
            flat_3_simp_25               = ierror_tombstone;                     /* init */
            flat_3_simp_26               = 0;                                    /* init */
            
            if (flat_0_simp_12) {
                flat_6_simp_27           = ifalse;                               /* init */
                flat_6_simp_28           = ierror_tombstone;                     /* init */
                flat_6_simp_29           = 0;                                    /* init */
                
                if (acc_c_conv_13_simp_21) {
                    iint_t     simp_5    = iint_add (acc_c_conv_13_simp_23, 1);  /* let */
                    flat_6_simp_27       = itrue;                                /* write */
                    flat_6_simp_28       = ierror_tombstone;                     /* write */
                    flat_6_simp_29       = simp_5;                               /* write */
                } else {
                    flat_6_simp_27       = ifalse;                               /* write */
                    flat_6_simp_28       = acc_c_conv_13_simp_22;                /* write */
                    flat_6_simp_29       = 0;                                    /* write */
                }
                
                flat_6_simp_30           = flat_6_simp_27;                       /* read */
                flat_6_simp_31           = flat_6_simp_28;                       /* read */
                flat_6_simp_32           = flat_6_simp_29;                       /* read */
                flat_7_simp_33           = ifalse;                               /* init */
                flat_7_simp_34           = ierror_tombstone;                     /* init */
                flat_7_simp_35           = 0;                                    /* init */
                
                if (flat_6_simp_30) {
                    flat_7_simp_33       = itrue;                                /* write */
                    flat_7_simp_34       = ierror_tombstone;                     /* write */
                    flat_7_simp_35       = flat_6_simp_32;                       /* write */
                } else {
                    flat_7_simp_33       = ifalse;                               /* write */
                    flat_7_simp_34       = flat_6_simp_31;                       /* write */
                    flat_7_simp_35       = 0;                                    /* write */
                }
                
                flat_7_simp_36           = flat_7_simp_33;                       /* read */
                flat_7_simp_37           = flat_7_simp_34;                       /* read */
                flat_7_simp_38           = flat_7_simp_35;                       /* read */
                flat_3_simp_24           = flat_7_simp_36;                       /* write */
                flat_3_simp_25           = flat_7_simp_37;                       /* write */
                flat_3_simp_26           = flat_7_simp_38;                       /* write */
            } else {
                flat_3_simp_24           = ifalse;                               /* write */
                flat_3_simp_25           = flat_0_simp_13;                       /* write */
                flat_3_simp_26           = 0;                                    /* write */
            }
            
            flat_3_simp_39               = flat_3_simp_24;                       /* read */
            flat_3_simp_40               = flat_3_simp_25;                       /* read */
            flat_3_simp_41               = flat_3_simp_26;                       /* read */
            acc_c_conv_13_simp_6         = flat_3_simp_39;                       /* write */
            acc_c_conv_13_simp_7         = flat_3_simp_40;                       /* write */
            acc_c_conv_13_simp_8         = flat_3_simp_41;                       /* write */
        }
        
    }
    
    s->has_acc_c_conv_13_simp_6          = itrue;                                /* save */
    s->res_acc_c_conv_13_simp_6          = acc_c_conv_13_simp_6;                 /* save */
    
    s->has_acc_c_conv_13_simp_7          = itrue;                                /* save */
    s->res_acc_c_conv_13_simp_7          = acc_c_conv_13_simp_7;                 /* save */
    
    s->has_acc_c_conv_13_simp_8          = itrue;                                /* save */
    s->res_acc_c_conv_13_simp_8          = acc_c_conv_13_simp_8;                 /* save */
    
    c_conv_13_simp_42                    = acc_c_conv_13_simp_6;                 /* read */
    c_conv_13_simp_43                    = acc_c_conv_13_simp_7;                 /* read */
    c_conv_13_simp_44                    = acc_c_conv_13_simp_8;                 /* read */
    s->repl_ix_0                         = c_conv_13_simp_42;                    /* output */
    s->repl_ix_1                         = c_conv_13_simp_43;                    /* output */
    s->repl_ix_2                         = c_conv_13_simp_44;                    /* output */
}

- C evaluation:
[(homer,2)]

- Core evaluation:
[homer, 2]

> > -- String outputs
> - Flattened:
gen$date = DATE
{
  init acc$s$reify$2$conv$5$simp$10@{Mutable Bool} = False@{Bool};
  init acc$s$reify$2$conv$5$simp$11@{Mutable Error} = ExceptFold1NoValue@{Error};
  init acc$s$reify$2$conv$5$simp$12@{Mutable String} = ""@{String};
  load_resumable@{Bool} acc$s$reify$2$conv$5$simp$10;
  load_resumable@{Error} acc$s$reify$2$conv$5$simp$11;
  load_resumable@{String} acc$s$reify$2$conv$5$simp$12;
  for_facts (gen$fact$simp$61$simp$63@{Bool},
             gen$fact$simp$61$simp$64@{Error},
             gen$fact$simp$61$simp$65$simp$66@{String},
             gen$fact$simp$61$simp$65$simp$67@{Int},
             gen$fact$simp$62@{DateTime}) in new {
    init flat$0$simp$13@{Mutable Bool} = False@{Bool};
    init flat$0$simp$14@{Mutable Error} = ExceptTombstone@{Error};
    init flat$0$simp$15@{Mutable String} = ""@{String};
    if (gen$fact$simp$61$simp$63) {
      write flat$0$simp$13 = True@{Bool};
      write flat$0$simp$14 = ExceptTombstone@{Error};
      write flat$0$simp$15 = gen$fact$simp$61$simp$65$simp$66;
    } else {
      write flat$0$simp$13 = False@{Bool};
      write flat$0$simp$14 = gen$fact$simp$61$simp$64;
      write flat$0$simp$15 = ""@{String};
    }
    read@{Mutable Bool} flat$0$simp$16 = flat$0$simp$13;
    read@{Mutable Error} flat$0$simp$17 = flat$0$simp$14;
    read@{Mutable String} flat$0$simp$18 = flat$0$simp$15;
    read@{Mutable Bool} acc$s$reify$2$conv$5$simp$19 = acc$s$reify$2$conv$5$simp$10;
    read@{Mutable Error} acc$s$reify$2$conv$5$simp$20 = acc$s$reify$2$conv$5$simp$11;
    read@{Mutable String} acc$s$reify$2$conv$5$simp$21 = acc$s$reify$2$conv$5$simp$12;
    init flat$1$simp$22@{Mutable Bool} = False@{Bool};
    init flat$1$simp$23@{Mutable Error} = ExceptTombstone@{Error};
    init flat$1$simp$24@{Mutable String} = ""@{String};
    if (acc$s$reify$2$conv$5$simp$19) {
      init flat$5$simp$25@{Mutable Bool} = False@{Bool};
      init flat$5$simp$26@{Mutable Error} = ExceptTombstone@{Error};
      init flat$5$simp$27@{Mutable Bool} = False@{Bool};
      if (flat$0$simp$16) {
        init flat$12$simp$28@{Mutable Bool} = False@{Bool};
        init flat$12$simp$29@{Mutable Error} = ExceptTombstone@{Error};
        init flat$12$simp$30@{Mutable Bool} = False@{Bool};
        if (acc$s$reify$2$conv$5$simp$19) {
          let simp$7 = gt#@{String}
                       flat$0$simp$18
                       acc$s$reify$2$conv$5$simp$21;
          write flat$12$simp$28 = True@{Bool};
          write flat$12$simp$29 = ExceptTombstone@{Error};
          write flat$12$simp$30 = simp$7;
        } else {
          write flat$12$simp$28 = False@{Bool};
          write flat$12$simp$29 = acc$s$reify$2$conv$5$simp$20;
          write flat$12$simp$30 = False@{Bool};
        }
        read@{Mutable Bool} flat$12$simp$31 = flat$12$simp$28;
        read@{Mutable Error} flat$12$simp$32 = flat$12$simp$29;
        read@{Mutable Bool} flat$12$simp$33 = flat$12$simp$30;
        write flat$5$simp$25 = flat$12$simp$31;
        write flat$5$simp$26 = flat$12$simp$32;
        write flat$5$simp$27 = flat$12$simp$33;
      } else {
        write flat$5$simp$25 = False@{Bool};
        write flat$5$simp$26 = flat$0$simp$17;
        write flat$5$simp$27 = False@{Bool};
      }
      read@{Mutable Bool} flat$5$simp$34 = flat$5$simp$25;
      read@{Mutable Error} flat$5$simp$35 = flat$5$simp$26;
      read@{Mutable Bool} flat$5$simp$36 = flat$5$simp$27;
      init flat$6$simp$37@{Mutable Bool} = False@{Bool};
      init flat$6$simp$38@{Mutable Error} = ExceptTombstone@{Error};
      init flat$6$simp$39@{Mutable String} = ""@{String};
      if (flat$5$simp$34) {
        init flat$9$simp$40@{Mutable Bool} = False@{Bool};
        init flat$9$simp$41@{Mutable Error} = ExceptTombstone@{Error};
        init flat$9$simp$42@{Mutable String} = ""@{String};
        if (flat$5$simp$36) {
          write flat$9$simp$40 = flat$0$simp$16;
          write flat$9$simp$41 = flat$0$simp$17;
          write flat$9$simp$42 = flat$0$simp$18;
        } else {
          write flat$9$simp$40 = acc$s$reify$2$conv$5$simp$19;
          write flat$9$simp$41 = acc$s$reify$2$conv$5$simp$20;
          write flat$9$simp$42 = acc$s$reify$2$conv$5$simp$21;
        }
        read@{Mutable Bool} flat$9$simp$43 = flat$9$simp$40;
        read@{Mutable Error} flat$9$simp$44 = flat$9$simp$41;
        read@{Mutable String} flat$9$simp$45 = flat$9$simp$42;
        write flat$6$simp$37 = flat$9$simp$43;
        write flat$6$simp$38 = flat$9$simp$44;
        write flat$6$simp$39 = flat$9$simp$45;
      } else {
        write flat$6$simp$37 = False@{Bool};
        write flat$6$simp$38 = flat$5$simp$35;
        write flat$6$simp$39 = ""@{String};
      }
      read@{Mutable Bool} flat$6$simp$46 = flat$6$simp$37;
      read@{Mutable Error} flat$6$simp$47 = flat$6$simp$38;
      read@{Mutable String} flat$6$simp$48 = flat$6$simp$39;
      write flat$1$simp$22 = flat$6$simp$46;
      write flat$1$simp$23 = flat$6$simp$47;
      write flat$1$simp$24 = flat$6$simp$48;
    } else {
      init flat$4$simp$49@{Mutable Bool} = False@{Bool};
      init flat$4$simp$50@{Mutable Error} = ExceptTombstone@{Error};
      init flat$4$simp$51@{Mutable String} = ""@{String};
      if (eq#@{Error} (ExceptFold1NoValue@{Error})
          acc$s$reify$2$conv$5$simp$20) {
        write flat$4$simp$49 = flat$0$simp$16;
        write flat$4$simp$50 = flat$0$simp$17;
        write flat$4$simp$51 = flat$0$simp$18;
      } else {
        write flat$4$simp$49 = False@{Bool};
        write flat$4$simp$50 = acc$s$reify$2$conv$5$simp$20;
        write flat$4$simp$51 = ""@{String};
      }
      read@{Mutable Bool} flat$4$simp$52 = flat$4$simp$49;
      read@{Mutable Error} flat$4$simp$53 = flat$4$simp$50;
      read@{Mutable String} flat$4$simp$54 = flat$4$simp$51;
      write flat$1$simp$22 = flat$4$simp$52;
      write flat$1$simp$23 = flat$4$simp$53;
      write flat$1$simp$24 = flat$4$simp$54;
    }
    read@{Mutable Bool} flat$1$simp$55 = flat$1$simp$22;
    read@{Mutable Error} flat$1$simp$56 = flat$1$simp$23;
    read@{Mutable String} flat$1$simp$57 = flat$1$simp$24;
    write acc$s$reify$2$conv$5$simp$10 = flat$1$simp$55;
    write acc$s$reify$2$conv$5$simp$11 = flat$1$simp$56;
    write acc$s$reify$2$conv$5$simp$12 = flat$1$simp$57;
  }
  save_resumable@{Bool} acc$s$reify$2$conv$5$simp$10;
  save_resumable@{Error} acc$s$reify$2$conv$5$simp$11;
  save_resumable@{String} acc$s$reify$2$conv$5$simp$12;
  read@{Mutable Bool} s$reify$2$conv$5$simp$58 = acc$s$reify$2$conv$5$simp$10;
  read@{Mutable Error} s$reify$2$conv$5$simp$59 = acc$s$reify$2$conv$5$simp$11;
  read@{Mutable String} s$reify$2$conv$5$simp$60 = acc$s$reify$2$conv$5$simp$12;
  output@{(Sum Error String)} repl (s$reify$2$conv$5$simp$58@{Bool},
               s$reify$2$conv$5$simp$59@{Error},
               s$reify$2$conv$5$simp$60@{String});
}

- C:
// 01-includes.h
#line 1 "01-includes.h"
#include <stdbool.h>
#include <stdint.h>
#include <math.h>

typedef uint64_t ierror_t;
typedef uint64_t iunit_t;
typedef uint64_t ibool_t;
typedef  int64_t iint_t;
typedef   double idouble_t;
typedef  int64_t idate_t;

typedef const char *istring_t;

static const ierror_t ierror_tombstone              = 0;
static const ierror_t ierror_fold1_no_value         = 1;
static const ierror_t ierror_variable_not_available = 2;

static const iunit_t iunit  = 0x13013;
static const ibool_t ifalse = 0;
static const ibool_t itrue  = 1;

#define INLINE __attribute__((always_inline))

// 02-numbers.h
#line 1 "02-numbers.h"
#define MK_SIMPLE_CMPS(t,pre)                                                   \
    static ibool_t   INLINE pre##eq   (t x, t y) { return x == y; }             \
    static ibool_t   INLINE pre##ne   (t x, t y) { return x != y; }             \
    static ibool_t   INLINE pre##gt   (t x, t y) { return x >  y; }             \
    static ibool_t   INLINE pre##ge   (t x, t y) { return x >= y; }             \
    static ibool_t   INLINE pre##lt   (t x, t y) { return x <  y; }             \
    static ibool_t   INLINE pre##le   (t x, t y) { return x <= y; }             \

MK_SIMPLE_CMPS(ierror_t, ierror_)
MK_SIMPLE_CMPS(ibool_t,  ibool_)
MK_SIMPLE_CMPS(idate_t,  idate_)
MK_SIMPLE_CMPS(iunit_t,  iunit_)

static idouble_t INLINE iint_extend   (iint_t    x)              { return x; }
static iint_t    INLINE iint_add      (iint_t    x, iint_t    y) { return x +  y; }
static iint_t    INLINE iint_sub      (iint_t    x, iint_t    y) { return x -  y; }
static iint_t    INLINE iint_mul      (iint_t    x, iint_t    y) { return x *  y; }

MK_SIMPLE_CMPS(iint_t, iint_)

static iint_t    INLINE idouble_trunc (idouble_t x)              { return (iint_t)x; }
static idouble_t INLINE idouble_add   (idouble_t x, idouble_t y) { return x + y; }
static idouble_t INLINE idouble_sub   (idouble_t x, idouble_t y) { return x - y; }
static idouble_t INLINE idouble_mul   (idouble_t x, idouble_t y) { return x * y; }
static idouble_t INLINE idouble_pow   (idouble_t x, idouble_t y) { return pow(x, y); }
static idouble_t INLINE idouble_div   (idouble_t x, idouble_t y) { return x / y; }
static idouble_t INLINE idouble_log   (idouble_t x)              { return log(x); }
static idouble_t INLINE idouble_exp   (idouble_t x)              { return exp(x); }

MK_SIMPLE_CMPS(idouble_t, idouble_)

static ibool_t   INLINE istring_gt    (istring_t x, istring_t y) { return strcmp(x, y) >  0; }
static ibool_t   INLINE istring_ge    (istring_t x, istring_t y) { return strcmp(x, y) >= 0; }
static ibool_t   INLINE istring_lt    (istring_t x, istring_t y) { return strcmp(x, y) <  0; }
static ibool_t   INLINE istring_le    (istring_t x, istring_t y) { return strcmp(x, y) <= 0; }
static ibool_t   INLINE istring_eq    (istring_t x, istring_t y) { return strcmp(x, y) == 0; }
static ibool_t   INLINE istring_ne    (istring_t x, istring_t y) { return strcmp(x, y) != 0; }

// 03-array.h
#line 1 "03-array.h"
typedef struct
{
    iint_t count;
} iarray_struct;
// payload goes straight after

#define ARRAY_OF(t) iarray_t__##t
#define ARRAY_FUN(f,pre) iarray__##pre##f

// I'm not certain there's a point having a different one for each type.
// It makes it look a little better, but I don't think it's any safer.
#define MK_ARRAY_STRUCT(t) typedef iarray_struct* ARRAY_OF(t);

// get payload by advancing pointer by size of struct
// (which should be equivalent to straight after struct fields)
// then casting to t*
#define ARRAY_PAYLOAD(x,t) ((t*)(x+1))


#define MK_ARRAY_LENGTH(t,pre)                                                  \
    static iint_t INLINE ARRAY_FUN(length,pre) (ARRAY_OF(t) arr)                \
    { return arr->count; }

#define MK_ARRAY_EQ(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(eq,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        if (x->count != y->count) return ifalse;                                \
        for (iint_t ix = 0; ix != x->count; ++ix) {                             \
            if (!pre##eq(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        return itrue;                                                           \
    }

#define MK_ARRAY_LT(t,pre)                                                      \
    static ibool_t INLINE ARRAY_FUN(lt,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    {                                                                           \
        iint_t min = (x->count < y->count) ? x->count : y->count;               \
        for (iint_t ix = 0; ix != min; ++ix) {                                  \
            if (!pre##lt(ARRAY_PAYLOAD(x,t)[ix], ARRAY_PAYLOAD(y,t)[ix]))       \
                return ifalse;                                                  \
        }                                                                       \
        if (x->count < y->count)                                                \
            return itrue;                                                       \
        else                                                                    \
            return ifalse;                                                      \
    }

#define MK_ARRAY_CMP(t,pre,op,ret)                                              \
    static ibool_t INLINE ARRAY_FUN(op,pre) (ARRAY_OF(t) x, ARRAY_OF(t) y)      \
    { return ret ; }                                                            \

#define MK_ARRAY_CMPS(t,pre)                                                    \
    MK_ARRAY_EQ(t,pre)                                                          \
    MK_ARRAY_LT(t,pre)                                                          \
    MK_ARRAY_CMP(t,pre,ne, !ARRAY_FUN(eq,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,le,  ARRAY_FUN(lt,pre) (x,y) || ARRAY_FUN(eq,pre) (x,y)) \
    MK_ARRAY_CMP(t,pre,ge, !ARRAY_FUN(lt,pre) (x,y))                            \
    MK_ARRAY_CMP(t,pre,gt, !ARRAY_FUN(le,pre) (x,y))                            \



#define MK_ARRAY_INDEX(t,pre)                                                   \
    static t       INLINE ARRAY_FUN(index,pre) (ARRAY_OF(t) x, iint_t ix)       \
    { return ARRAY_PAYLOAD(x,t)[ix]; }                                          \


#define MK_ARRAY_CREATE(t,pre)                                                  \
    static ARRAY_OF(t)  INLINE ARRAY_FUN(create,pre)                            \
                                        (iallocate_t alloc, iint_t sz)          \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(iarray_struct);      \
        ARRAY_OF(t)  ret = (ARRAY_OF(t))allocate(alloc, bytes);                 \
        ret->count = sz;                                                        \
        return ret;                                                             \
    }                                                                           \

#define MK_ARRAY_PUT(t,pre)                                                     \
    static iunit_t INLINE ARRAY_FUN(put,pre)   (ARRAY_OF(t) x, iint_t ix, t v)  \
    {                                                                           \
        ARRAY_PAYLOAD(x,t)[ix] = v;                                             \
        return iunit;                                                           \
    }                                                                           \

                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \



#define MAKE_ARRAY(t,pre)                                                       \
    MK_ARRAY_STRUCT (t)                                                         \
    MK_ARRAY_LENGTH (t,pre)                                                     \
    MK_ARRAY_CMPS   (t,pre)                                                     \
    MK_ARRAY_INDEX  (t,pre)                                                     \
    MK_ARRAY_CREATE (t,pre)                                                     \
    MK_ARRAY_PUT    (t,pre)                                                     \
    // MK_ARRAY_ZIP    (t,pre)                                                     \

// TEMPORARY
typedef void* iallocate_t;
void* allocate(iallocate_t t, iint_t sz);

MAKE_ARRAY(idouble_t,   idouble_)
MAKE_ARRAY(iint_t,      iint_)
MAKE_ARRAY(ierror_t,    ierror_)
MAKE_ARRAY(ibool_t,     ibool_)
MAKE_ARRAY(idate_t,     idate_)
MAKE_ARRAY(iunit_t,     iunit_)

// 04-buffer.h
#line 1 "04-buffer.h"
typedef struct
{
    iint_t max_size;
    iint_t cur_size;
    iint_t head;
} ibuf_struct;
/*
 Invariants
  0 <= cur_size <= max_size
  0 <= head     <  max_size

  read = ARRAY[ head..(head+cur_size) % max_size )

*/

#define BUF_OF(t)   ibuf_t__##t
#define BUF_FUN(f,pre) ibuf__##pre##f

#define MK_BUF_STRUCT(t) typedef ibuf_struct* BUF_OF(t);

#define BUF_PAYLOAD(x,t) ((t*)(x+1))

/*
Make
 Pre
  0 <= sz

 Post
  cur_size' = 0
  head'     = 0
  max_size' = sz
  ARRAY'    = [??...]

  read'     = ARRAY'[head'..head'+cur_size')
            = ARRAY'[0..0)
            = []

  (invariants hold)

*/
#define MK_BUF_MAKE(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(make,pre)                                   \
                     (iallocate_t alloc, iint_t sz)                             \
    {                                                                           \
        iint_t bytes     = sizeof(t) * sz + sizeof(ibuf_struct);                \
        BUF_OF(t) ret    = (BUF_OF(t))allocate(alloc, bytes);                   \
        ret->max_size = sz;                                                     \
        ret->cur_size = 0;                                                      \
        ret->head     = 0;                                                      \
        return ret;                                                             \
    }

/*
Push(buf, val)
 Pre
  (buf invariants hold)
 Post
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]

*/

/*
Push(buf, val)
  {buf invariants hold}
  ...
  {
  head'     = if cur_size < max_size
              then head
              else (head+1) % max_size

  cur_size' = min max_size (cur_size+1)

  ARRAY'    = ARRAY[update]:=val
  read'     = ARRAY[head'..(head'+cur_size') % max_size)
  update    = (head' + cur_size') % max_size
  }
  ==>
  {
  cur_size' = min max_size (cur_size+1)
  read'     = (take (max_size - 1) read) ++ [val]
  }

*/

#define MK_BUF_PUSH(t,pre)                                                      \
    static BUF_OF(t) INLINE BUF_FUN(push,pre) (BUF_OF(t) buf, t val)            \
    {                                                                           \
        iint_t head_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->head                                            \
                        : (buf->head+1) % buf->max_size;                        \
                                                                                \
        iint_t size_new = (buf->cur_size < buf->max_size)                       \
                        ?  buf->cur_size + 1                                    \
                        :  buf->max_size;                                       \
                                                                                \
        iint_t update   = (head_new + buf->cur_size) % buf->max_size;           \
                                                                                \
        BUF_PAYLOAD(buf,t)[update] = val;                                       \
                                                                                \
        buf->head     = head_new;                                               \
        buf->cur_size = size_new;                                               \
        return buf;                                                             \
    }



                                                                                \
                                                                                \
                                                                                \
                                                                                \
                                                                                \


/*
Read(buf)
 Pre
  (buf invariants hold)
 Post
  out       = read
*/

#define MK_BUF_READ(t,pre)                                                      \
    static ARRAY_OF(t) INLINE BUF_FUN(read,pre)                                 \
                       (iallocate_t alloc, BUF_OF(t) buf)                       \
    {                                                                           \
        ARRAY_OF(t) out = ARRAY_FUN(create,pre)(alloc, buf->cur_size);          \
                                                                                \
        for (iint_t ix = 0; ix != buf->cur_size; ++ix)                          \
        {                                                                       \
            iint_t in = (buf->head + ix) % buf->max_size;                       \
            ARRAY_PAYLOAD(out,t)[ix] = BUF_PAYLOAD(buf,t)[in];                  \
        }                                                                       \
                                                                                \
        return out;                                                             \
    }



#define MAKE_BUF(t,pre)                                                         \
    MK_BUF_STRUCT (t)                                                           \
    MK_BUF_MAKE   (t,pre)                                                       \
    MK_BUF_PUSH   (t,pre)                                                       \
    MK_BUF_READ   (t,pre)                                                       \

MAKE_BUF(idouble_t,   idouble_)
MAKE_BUF(iint_t,      iint_)
MAKE_BUF(ierror_t,    ierror_)
MAKE_BUF(ibool_t,     ibool_)
MAKE_BUF(idate_t,     idate_)
MAKE_BUF(iunit_t,     iunit_)

#line 1 "state definition"
typedef struct {
    /* inputs */
    idate_t    gen_date;
    iint_t     new_count;
    ibool_t    *new_gen_fact_simp_61_simp_63;
    ierror_t   *new_gen_fact_simp_61_simp_64;
    istring_t  *new_gen_fact_simp_61_simp_65_simp_66;
    iint_t     *new_gen_fact_simp_61_simp_65_simp_67;
    idate_t    *new_gen_fact_simp_62;

    /* outputs */
    ibool_t    repl_ix_0;
    ierror_t   repl_ix_1;
    istring_t  repl_ix_2;

    /* resumables */
    ibool_t    has_acc_s_reify_2_conv_5_simp_10;
    ibool_t    res_acc_s_reify_2_conv_5_simp_10;
    ibool_t    has_acc_s_reify_2_conv_5_simp_11;
    ierror_t   res_acc_s_reify_2_conv_5_simp_11;
    ibool_t    has_acc_s_reify_2_conv_5_simp_12;
    istring_t  res_acc_s_reify_2_conv_5_simp_12;
} icicle_state_t;

#line 1 "compute function"
void compute(icicle_state_t *s)
{
    ibool_t    acc_s_reify_2_conv_5_simp_10;
    ierror_t   acc_s_reify_2_conv_5_simp_11;
    istring_t  acc_s_reify_2_conv_5_simp_12;
    ibool_t    acc_s_reify_2_conv_5_simp_19;
    ierror_t   acc_s_reify_2_conv_5_simp_20;
    istring_t  acc_s_reify_2_conv_5_simp_21;
    ibool_t    flat_0_simp_13;
    ierror_t   flat_0_simp_14;
    istring_t  flat_0_simp_15;
    ibool_t    flat_0_simp_16;
    ierror_t   flat_0_simp_17;
    istring_t  flat_0_simp_18;
    ibool_t    flat_1_simp_22;
    ierror_t   flat_1_simp_23;
    istring_t  flat_1_simp_24;
    ibool_t    flat_1_simp_55;
    ierror_t   flat_1_simp_56;
    istring_t  flat_1_simp_57;
    ibool_t    flat_12_simp_28;
    ierror_t   flat_12_simp_29;
    ibool_t    flat_12_simp_30;
    ibool_t    flat_12_simp_31;
    ierror_t   flat_12_simp_32;
    ibool_t    flat_12_simp_33;
    ibool_t    flat_4_simp_49;
    ierror_t   flat_4_simp_50;
    istring_t  flat_4_simp_51;
    ibool_t    flat_4_simp_52;
    ierror_t   flat_4_simp_53;
    istring_t  flat_4_simp_54;
    ibool_t    flat_5_simp_25;
    ierror_t   flat_5_simp_26;
    ibool_t    flat_5_simp_27;
    ibool_t    flat_5_simp_34;
    ierror_t   flat_5_simp_35;
    ibool_t    flat_5_simp_36;
    ibool_t    flat_6_simp_37;
    ierror_t   flat_6_simp_38;
    istring_t  flat_6_simp_39;
    ibool_t    flat_6_simp_46;
    ierror_t   flat_6_simp_47;
    istring_t  flat_6_simp_48;
    ibool_t    flat_9_simp_40;
    ierror_t   flat_9_simp_41;
    istring_t  flat_9_simp_42;
    ibool_t    flat_9_simp_43;
    ierror_t   flat_9_simp_44;
    istring_t  flat_9_simp_45;
    ibool_t    s_reify_2_conv_5_simp_58;
    ierror_t   s_reify_2_conv_5_simp_59;
    istring_t  s_reify_2_conv_5_simp_60;

    acc_s_reify_2_conv_5_simp_10         = ifalse;                               /* init */
    acc_s_reify_2_conv_5_simp_11         = ierror_fold1_no_value;                /* init */
    acc_s_reify_2_conv_5_simp_12         = "";                                   /* init */
    
    if (s->has_acc_s_reify_2_conv_5_simp_10) {
        acc_s_reify_2_conv_5_simp_10     = s->res_acc_s_reify_2_conv_5_simp_10;  /* load */
    }
    
    if (s->has_acc_s_reify_2_conv_5_simp_11) {
        acc_s_reify_2_conv_5_simp_11     = s->res_acc_s_reify_2_conv_5_simp_11;  /* load */
    }
    
    if (s->has_acc_s_reify_2_conv_5_simp_12) {
        acc_s_reify_2_conv_5_simp_12     = s->res_acc_s_reify_2_conv_5_simp_12;  /* load */
    }
    
    const iint_t    new_count            = s->new_count;
    const ibool_t   *const new_gen_fact_simp_61_simp_63 = s->new_gen_fact_simp_61_simp_63;
    const ierror_t  *const new_gen_fact_simp_61_simp_64 = s->new_gen_fact_simp_61_simp_64;
    const istring_t *const new_gen_fact_simp_61_simp_65_simp_66 = s->new_gen_fact_simp_61_simp_65_simp_66;
    const iint_t    *const new_gen_fact_simp_61_simp_65_simp_67 = s->new_gen_fact_simp_61_simp_65_simp_67;
    const idate_t   *const new_gen_fact_simp_62 = s->new_gen_fact_simp_62;
    
    for (iint_t i = 0; i < new_count; i++) {
        ibool_t    gen_fact_simp_61_simp_63 = new_gen_fact_simp_61_simp_63[i];
        ierror_t   gen_fact_simp_61_simp_64 = new_gen_fact_simp_61_simp_64[i];
        istring_t  gen_fact_simp_61_simp_65_simp_66 = new_gen_fact_simp_61_simp_65_simp_66[i];
        iint_t     gen_fact_simp_61_simp_65_simp_67 = new_gen_fact_simp_61_simp_65_simp_67[i];
        idate_t    gen_fact_simp_62      = new_gen_fact_simp_62[i];
        flat_0_simp_13                   = ifalse;                               /* init */
        flat_0_simp_14                   = ierror_tombstone;                     /* init */
        flat_0_simp_15                   = "";                                   /* init */
        
        if (gen_fact_simp_61_simp_63) {
            flat_0_simp_13               = itrue;                                /* write */
            flat_0_simp_14               = ierror_tombstone;                     /* write */
            flat_0_simp_15               = gen_fact_simp_61_simp_65_simp_66;     /* write */
        } else {
            flat_0_simp_13               = ifalse;                               /* write */
            flat_0_simp_14               = gen_fact_simp_61_simp_64;             /* write */
            flat_0_simp_15               = "";                                   /* write */
        }
        
        flat_0_simp_16                   = flat_0_simp_13;                       /* read */
        flat_0_simp_17                   = flat_0_simp_14;                       /* read */
        flat_0_simp_18                   = flat_0_simp_15;                       /* read */
        acc_s_reify_2_conv_5_simp_19     = acc_s_reify_2_conv_5_simp_10;         /* read */
        acc_s_reify_2_conv_5_simp_20     = acc_s_reify_2_conv_5_simp_11;         /* read */
        acc_s_reify_2_conv_5_simp_21     = acc_s_reify_2_conv_5_simp_12;         /* read */
        flat_1_simp_22                   = ifalse;                               /* init */
        flat_1_simp_23                   = ierror_tombstone;                     /* init */
        flat_1_simp_24                   = "";                                   /* init */
        
        if (acc_s_reify_2_conv_5_simp_19) {
            flat_5_simp_25               = ifalse;                               /* init */
            flat_5_simp_26               = ierror_tombstone;                     /* init */
            flat_5_simp_27               = ifalse;                               /* init */
            
            if (flat_0_simp_16) {
                flat_12_simp_28          = ifalse;                               /* init */
                flat_12_simp_29          = ierror_tombstone;                     /* init */
                flat_12_simp_30          = ifalse;                               /* init */
                
                if (acc_s_reify_2_conv_5_simp_19) {
                    ibool_t    simp_7    = istring_gt (flat_0_simp_18, acc_s_reify_2_conv_5_simp_21); /* let */
                    flat_12_simp_28      = itrue;                                /* write */
                    flat_12_simp_29      = ierror_tombstone;                     /* write */
                    flat_12_simp_30      = simp_7;                               /* write */
                } else {
                    flat_12_simp_28      = ifalse;                               /* write */
                    flat_12_simp_29      = acc_s_reify_2_conv_5_simp_20;         /* write */
                    flat_12_simp_30      = ifalse;                               /* write */
                }
                
                flat_12_simp_31          = flat_12_simp_28;                      /* read */
                flat_12_simp_32          = flat_12_simp_29;                      /* read */
                flat_12_simp_33          = flat_12_simp_30;                      /* read */
                flat_5_simp_25           = flat_12_simp_31;                      /* write */
                flat_5_simp_26           = flat_12_simp_32;                      /* write */
                flat_5_simp_27           = flat_12_simp_33;                      /* write */
            } else {
                flat_5_simp_25           = ifalse;                               /* write */
                flat_5_simp_26           = flat_0_simp_17;                       /* write */
                flat_5_simp_27           = ifalse;                               /* write */
            }
            
            flat_5_simp_34               = flat_5_simp_25;                       /* read */
            flat_5_simp_35               = flat_5_simp_26;                       /* read */
            flat_5_simp_36               = flat_5_simp_27;                       /* read */
            flat_6_simp_37               = ifalse;                               /* init */
            flat_6_simp_38               = ierror_tombstone;                     /* init */
            flat_6_simp_39               = "";                                   /* init */
            
            if (flat_5_simp_34) {
                flat_9_simp_40           = ifalse;                               /* init */
                flat_9_simp_41           = ierror_tombstone;                     /* init */
                flat_9_simp_42           = "";                                   /* init */
                
                if (flat_5_simp_36) {
                    flat_9_simp_40       = flat_0_simp_16;                       /* write */
                    flat_9_simp_41       = flat_0_simp_17;                       /* write */
                    flat_9_simp_42       = flat_0_simp_18;                       /* write */
                } else {
                    flat_9_simp_40       = acc_s_reify_2_conv_5_simp_19;         /* write */
                    flat_9_simp_41       = acc_s_reify_2_conv_5_simp_20;         /* write */
                    flat_9_simp_42       = acc_s_reify_2_conv_5_simp_21;         /* write */
                }
                
                flat_9_simp_43           = flat_9_simp_40;                       /* read */
                flat_9_simp_44           = flat_9_simp_41;                       /* read */
                flat_9_simp_45           = flat_9_simp_42;                       /* read */
                flat_6_simp_37           = flat_9_simp_43;                       /* write */
                flat_6_simp_38           = flat_9_simp_44;                       /* write */
                flat_6_simp_39           = flat_9_simp_45;                       /* write */
            } else {
                flat_6_simp_37           = ifalse;                               /* write */
                flat_6_simp_38           = flat_5_simp_35;                       /* write */
                flat_6_simp_39           = "";                                   /* write */
            }
            
            flat_6_simp_46               = flat_6_simp_37;                       /* read */
            flat_6_simp_47               = flat_6_simp_38;                       /* read */
            flat_6_simp_48               = flat_6_simp_39;                       /* read */
            flat_1_simp_22               = flat_6_simp_46;                       /* write */
            flat_1_simp_23               = flat_6_simp_47;                       /* write */
            flat_1_simp_24               = flat_6_simp_48;                       /* write */
        } else {
            flat_4_simp_49               = ifalse;                               /* init */
            flat_4_simp_50               = ierror_tombstone;                     /* init */
            flat_4_simp_51               = "";                                   /* init */
            
            if (ierror_eq (ierror_fold1_no_value, acc_s_reify_2_conv_5_simp_20)) {
                flat_4_simp_49           = flat_0_simp_16;                       /* write */
                flat_4_simp_50           = flat_0_simp_17;                       /* write */
                flat_4_simp_51           = flat_0_simp_18;                       /* write */
            } else {
                flat_4_simp_49           = ifalse;                               /* write */
                flat_4_simp_50           = acc_s_reify_2_conv_5_simp_20;         /* write */
                flat_4_simp_51           = "";                                   /* write */
            }
            
            flat_4_simp_52               = flat_4_simp_49;                       /* read */
            flat_4_simp_53               = flat_4_simp_50;                       /* read */
            flat_4_simp_54               = flat_4_simp_51;                       /* read */
            flat_1_simp_22               = flat_4_simp_52;                       /* write */
            flat_1_simp_23               = flat_4_simp_53;                       /* write */
            flat_1_simp_24               = flat_4_simp_54;                       /* write */
        }
        
        flat_1_simp_55                   = flat_1_simp_22;                       /* read */
        flat_1_simp_56                   = flat_1_simp_23;                       /* read */
        flat_1_simp_57                   = flat_1_simp_24;                       /* read */
        acc_s_reify_2_conv_5_simp_10     = flat_1_simp_55;                       /* write */
        acc_s_reify_2_conv_5_simp_11     = flat_1_simp_56;                       /* write */
        acc_s_reify_2_conv_5_simp_12     = flat_1_simp_57;                       /* write */
    }
    
    s->has_acc_s_reify_2_conv_5_simp_10  = itrue;                                /* save */
    s->res_acc_s_reify_2_conv_5_simp_10  = acc_s_reify_2_conv_5_simp_10;         /* save */
    
    s->has_acc_s_reify_2_conv_5_simp_11  = itrue;                                /* save */
    s->res_acc_s_reify_2_conv_5_simp_11  = acc_s_reify_2_conv_5_simp_11;         /* save */
    
    s->has_acc_s_reify_2_conv_5_simp_12  = itrue;                                /* save */
    s->res_acc_s_reify_2_conv_5_simp_12  = acc_s_reify_2_conv_5_simp_12;         /* save */
    
    s_reify_2_conv_5_simp_58             = acc_s_reify_2_conv_5_simp_10;         /* read */
    s_reify_2_conv_5_simp_59             = acc_s_reify_2_conv_5_simp_11;         /* read */
    s_reify_2_conv_5_simp_60             = acc_s_reify_2_conv_5_simp_12;         /* read */
    s->repl_ix_0                         = s_reify_2_conv_5_simp_58;             /* output */
    s->repl_ix_1                         = s_reify_2_conv_5_simp_59;             /* output */
    s->repl_ix_2                         = s_reify_2_conv_5_simp_60;             /* output */
}

- C evaluation:
[(homer,"torso")]

- Core evaluation:
[homer, "torso"]

> 