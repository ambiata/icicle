welcome to iREPL
ok, loaded 10 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 8 rows
> -- Show everything
> ok, type is now on
ok, core is now on
ok, core-simp is now on
ok, core-type is now on
ok, avalanche is now on
ok, flatten is now on
> > -- A rather complicated feature to convert to Avalanche
> - Type:
Aggregate Possibly (Int, (Array Int))

- Core:
Program (source : Stream Int)
Precomputations:

Stream transformers:
conv$0 =
    source
conv$1 =
    sfilter [(Int, DateTime)] (
    \conv$2 : (Int, DateTime).  
    let simp$1 = fst# [Int] [DateTime]
                 conv$2
     in gt# [Int] simp$1 (10 : Int))
    conv$0
conv$6 =
    smap    [(Int, DateTime)] [Int]
    (
    \conv$7 : (Int, DateTime). 
    fst# [Int] [DateTime] conv$7)
    conv$0
Reductions:
c$conv$4 =
    rfold   [(Int, DateTime)]
    [Int] (
    \c$conv$4 : Int.  
    \conv$3 : (Int, DateTime). 
    add# [Int] c$conv$4 (1 : Int))
    (0 : Int) conv$1
conv$5 =
    rlatest [Int] (3 : Int)
    conv$6
Postcomputations:
conv$8 =
    pair# [Int] [Array Int]
    c$conv$4 conv$5
Returning:
repl =
    conv$8


- Core type:
[(repl,(Int, Array Int))]

- Avalanche:
gen$date = DATE
{
  init [Latest] [Int] acc$conv$5 = 3 : Int;
  for_facts (elem$gen$fact : Int, elem$gen$date : Date) in history {
    let gen$fact = pair# [Int] [DateTime]
                   elem$gen$fact elem$gen$date;
    let elem$conv$6 = fst# [Int] [DateTime]
                      gen$fact;
    push acc$conv$5(elem$conv$6);
  }
  init [Mutable] [Int] acc$c$conv$4 = 0 : Int;
  load_resumable [Int] acc$c$conv$4;
  for_facts (elem$gen$fact : Int, elem$gen$date : Date) in new {
    let gen$fact = pair# [Int] [DateTime]
                   elem$gen$fact elem$gen$date;
    let anf$1 = fst# [Int] [DateTime]
                gen$fact;
    if (gt# [Int] anf$1
        (10 : Int)) {
      read [Mutable] [Int] acc$c$conv$4 = acc$c$conv$4;
      write acc$c$conv$4 = add# [Int]
                           acc$c$conv$4 (1 : Int);
    }
    let elem$conv$6 = anf$1;
    push acc$conv$5(elem$conv$6);
  }
  save_resumable [Int] acc$c$conv$4;
  read [Mutable] [Int] c$conv$4 = acc$c$conv$4;
  read [Latest] [Int] conv$5 = acc$conv$5;
  let conv$8 = pair# [Int] [Array Int]
               c$conv$4 conv$5;
  output repl conv$8;
}

- Flattened:
gen$date = DATE
{
  init [Latest] [Int] acc$conv$5 = 3 : Int;
  for_facts (elem$gen$fact : Int, elem$gen$date : Date) in history {
    push acc$conv$5(elem$gen$fact);
  } 
  
  init [Mutable] [Int] acc$c$conv$4 = 0 : Int;
  load_resumable [Int] acc$c$conv$4;
  for_facts (elem$gen$fact : Int, elem$gen$date : Date) in new {
    if (gt# [Int] elem$gen$fact
        (10 : Int)) {
      read [Mutable] [Int] acc$c$conv$4 = acc$c$conv$4;
      write acc$c$conv$4 = add# [Int]
                           acc$c$conv$4 (1 : Int);
    }
    push acc$conv$5(elem$gen$fact);
  }
  save_resumable [Int] acc$c$conv$4;
  read [Mutable] [Int] c$conv$4 = acc$c$conv$4;
  read [Latest] [Int] conv$5 = acc$conv$5;
  let conv$8 = pair# [Int] [Array Int]
               c$conv$4 conv$5;
  output repl conv$8;
}

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > 