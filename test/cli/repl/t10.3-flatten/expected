welcome to iREPL
ok, loaded 38 functions from data/libs/prelude.icicle
ok, loaded test/cli/repl/data.psv, 13 rows
> -- Show everything
> ok, core-simp is now on
ok, flatten (simplified) is now on
> > -- A rather complicated feature to convert to Avalanche
> - Flattened (simplified), not typechecked:
conv$3 = TIME
init acc$conv$10$simpflat$8@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simpflat$13@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simpflat$14@{Int} = 0@{Int};
init acc$conv$26$simpflat$15@{Buf 3 FactIdentifier} = Buf_make#@{Buf 3 FactIdentifier} (()@{Unit});
init acc$conv$26$simpflat$16@{Buf 3 Error} = Buf_make#@{Buf 3 Error} (()@{Unit});
init acc$conv$26$simpflat$17@{Buf 3 Int} = Buf_make#@{Buf 3 Int} (()@{Unit});
load_resumable@{Buf 3 FactIdentifier} acc$conv$26$simpflat$15;
load_resumable@{Buf 3 Error} acc$conv$26$simpflat$16;
load_resumable@{Buf 3 Int} acc$conv$26$simpflat$17;
load_resumable@{Error} acc$c$conv$11$simpflat$13;
load_resumable@{Int} acc$c$conv$11$simpflat$14;
load_resumable@{Error} acc$conv$10$simpflat$8;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simpflat$60@{Error}, conv$0$simpflat$61@{Int}, conv$0$simpflat$62@{Time}) in new
{
  init flat$0$simpflat$18@{Error} = ExceptNotAnError@{Error};
  init flat$0$simpflat$19@{Bool} = False@{Bool};
  if (eq#@{Error} conv$0$simpflat$60 (ExceptNotAnError@{Error}))
  {
    write flat$0$simpflat$18 = ExceptNotAnError@{Error};
    write flat$0$simpflat$19 = gt#@{Int} conv$0$simpflat$61 (10@{Int});
  }
  else
  {
    write flat$0$simpflat$18 = conv$0$simpflat$60;
    write flat$0$simpflat$19 = False@{Bool};
  }
  read flat$0$simpflat$20 = flat$0$simpflat$18 [Error];
  read flat$0$simpflat$21 = flat$0$simpflat$19 [Bool];
  init flat$1@{Bool} = False@{Bool};
  if (eq#@{Error} flat$0$simpflat$20 (ExceptNotAnError@{Error}))
  {
    write flat$1 = flat$0$simpflat$21;
  }
  else
  {
    write flat$1 = True@{Bool};
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    write acc$conv$10$simpflat$8 = conv$0$simpflat$60;
    read conv$10$aval$1$simpflat$22 = acc$conv$10$simpflat$8 [Error];
    read c$conv$11$aval$0$simpflat$27 = acc$c$conv$11$simpflat$13 [Error];
    read c$conv$11$aval$0$simpflat$28 = acc$c$conv$11$simpflat$14 [Int];
    init flat$2$simpflat$29@{Error} = ExceptNotAnError@{Error};
    init flat$2$simpflat$30@{Int} = 0@{Int};
    if (eq#@{Error} conv$10$aval$1$simpflat$22 (ExceptNotAnError@{Error}))
    {
      init flat$5$simpflat$31@{Error} = ExceptNotAnError@{Error};
      init flat$5$simpflat$32@{Int} = 0@{Int};
      if (eq#@{Error} c$conv$11$aval$0$simpflat$27 (ExceptNotAnError@{Error}))
      {
        write flat$5$simpflat$31 = ExceptNotAnError@{Error};
        write flat$5$simpflat$32 = add#@{Int} c$conv$11$aval$0$simpflat$28 (1@{Int});
      }
      else
      {
        write flat$5$simpflat$31 = c$conv$11$aval$0$simpflat$27;
        write flat$5$simpflat$32 = 0@{Int};
      }
      read flat$5$simpflat$33 = flat$5$simpflat$31 [Error];
      read flat$5$simpflat$34 = flat$5$simpflat$32 [Int];
      init flat$6$simpflat$35@{Error} = ExceptNotAnError@{Error};
      init flat$6$simpflat$36@{Int} = 0@{Int};
      if (eq#@{Error} flat$5$simpflat$33 (ExceptNotAnError@{Error}))
      {
        write flat$6$simpflat$35 = ExceptNotAnError@{Error};
        write flat$6$simpflat$36 = flat$5$simpflat$34;
      }
      else
      {
        write flat$6$simpflat$35 = flat$5$simpflat$33;
        write flat$6$simpflat$36 = 0@{Int};
      }
      read flat$6$simpflat$37 = flat$6$simpflat$35 [Error];
      read flat$6$simpflat$38 = flat$6$simpflat$36 [Int];
      write flat$2$simpflat$29 = flat$6$simpflat$37;
      write flat$2$simpflat$30 = flat$6$simpflat$38;
    }
    else
    {
      write flat$2$simpflat$29 = conv$10$aval$1$simpflat$22;
      write flat$2$simpflat$30 = 0@{Int};
    }
    read flat$2$simpflat$39 = flat$2$simpflat$29 [Error];
    read flat$2$simpflat$40 = flat$2$simpflat$30 [Int];
    write acc$c$conv$11$simpflat$13 = flat$2$simpflat$39;
    write acc$c$conv$11$simpflat$14 = flat$2$simpflat$40;
  }
  read acc$conv$26$simpflat$15 = acc$conv$26$simpflat$15 [Buf 3 FactIdentifier];
  
  write acc$conv$26$simpflat$15 = Buf_push#@{Buf 3 FactIdentifier} acc$conv$26$simpflat$15 conv$1;
  read acc$conv$26$simpflat$16 = acc$conv$26$simpflat$16 [Buf 3 Error];
  
  
  write acc$conv$26$simpflat$16 = Buf_push#@{Buf 3 Error} acc$conv$26$simpflat$16 conv$0$simpflat$60;
  read acc$conv$26$simpflat$17 = acc$conv$26$simpflat$17 [Buf 3 Int];
  
  
  write acc$conv$26$simpflat$17 = Buf_push#@{Buf 3 Int} acc$conv$26$simpflat$17 conv$0$simpflat$61;
  
  
  
  
}
read acc$conv$26$flat$16$simpflat$44 = acc$conv$26$simpflat$15 [Buf 3 FactIdentifier];
let flat$17 = Buf_read#@{Array FactIdentifier} acc$conv$26$flat$16$simpflat$44;
foreach (flat$18 in 0@{Int} .. Array_length#@{FactIdentifier} flat$17)
{
  keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$17 flat$18;
}

save_resumable@{Buf 3 FactIdentifier} acc$conv$26$simpflat$15;
save_resumable@{Buf 3 Error} acc$conv$26$simpflat$16;
save_resumable@{Buf 3 Int} acc$conv$26$simpflat$17;
save_resumable@{Error} acc$c$conv$11$simpflat$13;
save_resumable@{Int} acc$c$conv$11$simpflat$14;
save_resumable@{Error} acc$conv$10$simpflat$8;
read conv$26$simpflat$48 = acc$conv$26$simpflat$16 [Buf 3 Error];
read conv$26$simpflat$49 = acc$conv$26$simpflat$17 [Buf 3 Int];
read c$conv$11$simpflat$50 = acc$c$conv$11$simpflat$13 [Error];
read c$conv$11$simpflat$51 = acc$c$conv$11$simpflat$14 [Int];
init flat$23$simpflat$52@{Error} = ExceptNotAnError@{Error};
init flat$23$simpflat$53@{Int} = 0@{Int};
init flat$23$simpflat$54@{Array Error} = unsafe_Array_create#@{Error} (0@{Int});
init flat$23$simpflat$55@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
if (eq#@{Error} c$conv$11$simpflat$50 (ExceptNotAnError@{Error}))
{
  write flat$23$simpflat$52 = ExceptNotAnError@{Error};
  write flat$23$simpflat$53 = c$conv$11$simpflat$51;
  write flat$23$simpflat$54 = Buf_read#@{Array Error} conv$26$simpflat$48;
  write flat$23$simpflat$55 = Buf_read#@{Array Int} conv$26$simpflat$49;
}
else
{
  write flat$23$simpflat$52 = c$conv$11$simpflat$50;
  write flat$23$simpflat$53 = 0@{Int};
  write flat$23$simpflat$54 = unsafe_Array_create#@{Error} (0@{Int});
  write flat$23$simpflat$55 = unsafe_Array_create#@{Int} (0@{Int});
}
read flat$23$simpflat$56 = flat$23$simpflat$52 [Error];
read flat$23$simpflat$57 = flat$23$simpflat$53 [Int];
read flat$23$simpflat$58 = flat$23$simpflat$54 [Array Error];
read flat$23$simpflat$59 = flat$23$simpflat$55 [Array Int];
output@{(Sum Error (Int, Array (Sum Error Int)))} repl (flat$23$simpflat$56@{Error}, flat$23$simpflat$57@{Int}, flat$23$simpflat$58@{Array Error}, flat$23$simpflat$59@{Array Int});

- Flattened Avalanche (simplified), typechecked:
conv$3 = TIME
init acc$conv$10$simpflat$8@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simpflat$13@{Error} = ExceptNotAnError@{Error};
init acc$c$conv$11$simpflat$14@{Int} = 0@{Int};
init acc$conv$26$simpflat$15@{Buf 3 FactIdentifier} = Buf_make#@{Buf 3 FactIdentifier} (()@{Unit});
init acc$conv$26$simpflat$16@{Buf 3 Error} = Buf_make#@{Buf 3 Error} (()@{Unit});
init acc$conv$26$simpflat$17@{Buf 3 Int} = Buf_make#@{Buf 3 Int} (()@{Unit});
load_resumable@{Buf 3 FactIdentifier} acc$conv$26$simpflat$15;
load_resumable@{Buf 3 Error} acc$conv$26$simpflat$16;
load_resumable@{Buf 3 Int} acc$conv$26$simpflat$17;
load_resumable@{Error} acc$c$conv$11$simpflat$13;
load_resumable@{Int} acc$c$conv$11$simpflat$14;
load_resumable@{Error} acc$conv$10$simpflat$8;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simpflat$60@{Error}, conv$0$simpflat$61@{Int}, conv$0$simpflat$62@{Time}) in new
{
  init flat$0$simpflat$18@{Error} = ExceptNotAnError@{Error};
  init flat$0$simpflat$19@{Bool} = False@{Bool};
  if (eq#@{Error} conv$0$simpflat$60 (ExceptNotAnError@{Error}))
  {
    write flat$0$simpflat$18 = ExceptNotAnError@{Error};
    write flat$0$simpflat$19 = gt#@{Int} conv$0$simpflat$61 (10@{Int});
  }
  else
  {
    write flat$0$simpflat$18 = conv$0$simpflat$60;
    write flat$0$simpflat$19 = False@{Bool};
  }
  read flat$0$simpflat$20 = flat$0$simpflat$18 [Error];
  read flat$0$simpflat$21 = flat$0$simpflat$19 [Bool];
  init flat$1@{Bool} = False@{Bool};
  if (eq#@{Error} flat$0$simpflat$20 (ExceptNotAnError@{Error}))
  {
    write flat$1 = flat$0$simpflat$21;
  }
  else
  {
    write flat$1 = True@{Bool};
  }
  read flat$1 = flat$1 [Bool];
  if (flat$1)
  {
    write acc$conv$10$simpflat$8 = conv$0$simpflat$60;
    read conv$10$aval$1$simpflat$22 = acc$conv$10$simpflat$8 [Error];
    read c$conv$11$aval$0$simpflat$27 = acc$c$conv$11$simpflat$13 [Error];
    read c$conv$11$aval$0$simpflat$28 = acc$c$conv$11$simpflat$14 [Int];
    init flat$2$simpflat$29@{Error} = ExceptNotAnError@{Error};
    init flat$2$simpflat$30@{Int} = 0@{Int};
    if (eq#@{Error} conv$10$aval$1$simpflat$22 (ExceptNotAnError@{Error}))
    {
      init flat$5$simpflat$31@{Error} = ExceptNotAnError@{Error};
      init flat$5$simpflat$32@{Int} = 0@{Int};
      if (eq#@{Error} c$conv$11$aval$0$simpflat$27 (ExceptNotAnError@{Error}))
      {
        write flat$5$simpflat$31 = ExceptNotAnError@{Error};
        write flat$5$simpflat$32 = add#@{Int} c$conv$11$aval$0$simpflat$28 (1@{Int});
      }
      else
      {
        write flat$5$simpflat$31 = c$conv$11$aval$0$simpflat$27;
        write flat$5$simpflat$32 = 0@{Int};
      }
      read flat$5$simpflat$33 = flat$5$simpflat$31 [Error];
      read flat$5$simpflat$34 = flat$5$simpflat$32 [Int];
      init flat$6$simpflat$35@{Error} = ExceptNotAnError@{Error};
      init flat$6$simpflat$36@{Int} = 0@{Int};
      if (eq#@{Error} flat$5$simpflat$33 (ExceptNotAnError@{Error}))
      {
        write flat$6$simpflat$35 = ExceptNotAnError@{Error};
        write flat$6$simpflat$36 = flat$5$simpflat$34;
      }
      else
      {
        write flat$6$simpflat$35 = flat$5$simpflat$33;
        write flat$6$simpflat$36 = 0@{Int};
      }
      read flat$6$simpflat$37 = flat$6$simpflat$35 [Error];
      read flat$6$simpflat$38 = flat$6$simpflat$36 [Int];
      write flat$2$simpflat$29 = flat$6$simpflat$37;
      write flat$2$simpflat$30 = flat$6$simpflat$38;
    }
    else
    {
      write flat$2$simpflat$29 = conv$10$aval$1$simpflat$22;
      write flat$2$simpflat$30 = 0@{Int};
    }
    read flat$2$simpflat$39 = flat$2$simpflat$29 [Error];
    read flat$2$simpflat$40 = flat$2$simpflat$30 [Int];
    write acc$c$conv$11$simpflat$13 = flat$2$simpflat$39;
    write acc$c$conv$11$simpflat$14 = flat$2$simpflat$40;
  }
  read acc$conv$26$simpflat$15 = acc$conv$26$simpflat$15 [Buf 3 FactIdentifier];
  
  write acc$conv$26$simpflat$15 = Buf_push#@{Buf 3 FactIdentifier} acc$conv$26$simpflat$15 conv$1;
  read acc$conv$26$simpflat$16 = acc$conv$26$simpflat$16 [Buf 3 Error];
  
  
  write acc$conv$26$simpflat$16 = Buf_push#@{Buf 3 Error} acc$conv$26$simpflat$16 conv$0$simpflat$60;
  read acc$conv$26$simpflat$17 = acc$conv$26$simpflat$17 [Buf 3 Int];
  
  
  write acc$conv$26$simpflat$17 = Buf_push#@{Buf 3 Int} acc$conv$26$simpflat$17 conv$0$simpflat$61;
  
  
  
  
}
read acc$conv$26$flat$16$simpflat$44 = acc$conv$26$simpflat$15 [Buf 3 FactIdentifier];
let flat$17 = Buf_read#@{Array FactIdentifier} acc$conv$26$flat$16$simpflat$44;
foreach (flat$18 in 0@{Int} .. Array_length#@{FactIdentifier} flat$17)
{
  keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$17 flat$18;
}

save_resumable@{Buf 3 FactIdentifier} acc$conv$26$simpflat$15;
save_resumable@{Buf 3 Error} acc$conv$26$simpflat$16;
save_resumable@{Buf 3 Int} acc$conv$26$simpflat$17;
save_resumable@{Error} acc$c$conv$11$simpflat$13;
save_resumable@{Int} acc$c$conv$11$simpflat$14;
save_resumable@{Error} acc$conv$10$simpflat$8;
read conv$26$simpflat$48 = acc$conv$26$simpflat$16 [Buf 3 Error];
read conv$26$simpflat$49 = acc$conv$26$simpflat$17 [Buf 3 Int];
read c$conv$11$simpflat$50 = acc$c$conv$11$simpflat$13 [Error];
read c$conv$11$simpflat$51 = acc$c$conv$11$simpflat$14 [Int];
init flat$23$simpflat$52@{Error} = ExceptNotAnError@{Error};
init flat$23$simpflat$53@{Int} = 0@{Int};
init flat$23$simpflat$54@{Array Error} = unsafe_Array_create#@{Error} (0@{Int});
init flat$23$simpflat$55@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
if (eq#@{Error} c$conv$11$simpflat$50 (ExceptNotAnError@{Error}))
{
  write flat$23$simpflat$52 = ExceptNotAnError@{Error};
  write flat$23$simpflat$53 = c$conv$11$simpflat$51;
  write flat$23$simpflat$54 = Buf_read#@{Array Error} conv$26$simpflat$48;
  write flat$23$simpflat$55 = Buf_read#@{Array Int} conv$26$simpflat$49;
}
else
{
  write flat$23$simpflat$52 = c$conv$11$simpflat$50;
  write flat$23$simpflat$53 = 0@{Int};
  write flat$23$simpflat$54 = unsafe_Array_create#@{Error} (0@{Int});
  write flat$23$simpflat$55 = unsafe_Array_create#@{Int} (0@{Int});
}
read flat$23$simpflat$56 = flat$23$simpflat$52 [Error];
read flat$23$simpflat$57 = flat$23$simpflat$53 [Int];
read flat$23$simpflat$58 = flat$23$simpflat$54 [Array Error];
read flat$23$simpflat$59 = flat$23$simpflat$55 [Array Int];
output@{(Sum Error (Int, Array (Sum Error Int)))} repl (flat$23$simpflat$56@{Error}, flat$23$simpflat$57@{Int}, flat$23$simpflat$58@{Array Error}, flat$23$simpflat$59@{Array Int});

- Core evaluation:
[homer, (5,[300,400,500])
,marge, (1,[0,10,20])]

> > -- Something involves the abstract buffer type
> - Flattened (simplified), not typechecked:
conv$3 = TIME
init acc$conv$4$simpflat$30@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
init acc$conv$4$simpflat$31@{Array (Buf 2 FactIdentifier)} = unsafe_Array_create#@{Buf 2 FactIdentifier} (0@{Int});
init acc$conv$4$simpflat$32@{Array (Buf 2 Error)} = unsafe_Array_create#@{Buf 2 Error} (0@{Int});
init acc$conv$4$simpflat$33@{Array (Buf 2 Int)} = unsafe_Array_create#@{Buf 2 Int} (0@{Int});
load_resumable@{Array Time} acc$conv$4$simpflat$30;
load_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simpflat$31;
load_resumable@{Array (Buf 2 Error)} acc$conv$4$simpflat$32;
load_resumable@{Array (Buf 2 Int)} acc$conv$4$simpflat$33;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simpflat$115@{Error}, conv$0$simpflat$116@{Int}, conv$0$simpflat$117@{Time}) in new
{
  read conv$4$aval$0$simpflat$35 = acc$conv$4$simpflat$30 [Array Time];
  read conv$4$aval$0$simpflat$36 = acc$conv$4$simpflat$31 [Array (Buf 2 FactIdentifier)];
  read conv$4$aval$0$simpflat$37 = acc$conv$4$simpflat$32 [Array (Buf 2 Error)];
  read conv$4$aval$0$simpflat$38 = acc$conv$4$simpflat$33 [Array (Buf 2 Int)];
  let simpflat$398 = Buf_make#@{Buf 2 FactIdentifier} (()@{Unit});
  let simpflat$232 = Buf_push#@{Buf 2 FactIdentifier} simpflat$398 conv$1;
  let simpflat$399 = Buf_make#@{Buf 2 Error} (()@{Unit});
  let simpflat$235 = Buf_push#@{Buf 2 Error} simpflat$399 conv$0$simpflat$115;
  let simpflat$400 = Buf_make#@{Buf 2 Int} (()@{Unit});
  let simpflat$238 = Buf_push#@{Buf 2 Int} simpflat$400 conv$0$simpflat$116;
  init map_insert_acc_keys$flat$1@{Array Time} = conv$4$aval$0$simpflat$35;
  init map_insert_acc_vals$flat$2$simpflat$40@{Array (Buf 2 FactIdentifier)} = conv$4$aval$0$simpflat$36;
  init map_insert_acc_vals$flat$2$simpflat$41@{Array (Buf 2 Error)} = conv$4$aval$0$simpflat$37;
  init map_insert_acc_vals$flat$2$simpflat$42@{Array (Buf 2 Int)} = conv$4$aval$0$simpflat$38;
  init map_insert_acc_bs_found$flat$4@{Bool} = False@{Bool};
  init map_insert_acc_bs_index$flat$3@{Int} = -1@{Int};
  read map_insert_loc_keys$flat$5 = map_insert_acc_keys$flat$1 [Array Time];
  read map_insert_loc_vals$flat$6$simpflat$44 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
  read map_insert_loc_vals$flat$6$simpflat$45 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
  read map_insert_loc_vals$flat$6$simpflat$46 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
  read map_insert_loc_bs_found$flat$8 = map_insert_acc_bs_found$flat$4 [Bool];
  read map_insert_loc_bs_index$flat$7 = map_insert_acc_bs_index$flat$3 [Int];
  let map_insert_size$flat$10 = Array_length#@{Time} map_insert_loc_keys$flat$5;
  init bs_acc_found$flat$18@{Bool} = False@{Bool};
  init bs_acc_mid$flat$15@{Int} = -1@{Int};
  init bs_acc_ins$flat$17@{Int} = -1@{Int};
  init bs_acc_low$flat$23@{Int} = 0@{Int};
  init bs_acc_high$flat$24@{Int} = sub#@{Int} map_insert_size$flat$10 (1@{Int});
  init bs_acc_end$flat$25@{Bool} = False@{Bool};
  while (bs_acc_end$flat$25 == False@{Bool}){
    read bs_loc_low$flat$21 = bs_acc_low$flat$23 [Int];
    read bs_loc_high$flat$22 = bs_acc_high$flat$24 [Int];
    if (gt#@{Int} bs_loc_low$flat$21 bs_loc_high$flat$22)
    {
      write bs_acc_end$flat$25 = True@{Bool};
      write bs_acc_ins$flat$17 = bs_loc_low$flat$21;
    }
    else
    {
      let simpflat$134 = add#@{Int} bs_loc_low$flat$21 bs_loc_high$flat$22;
      let simpflat$135 = doubleOfInt# simpflat$134;
      let simpflat$136 = div# simpflat$135 (2.0@{Double});
      write bs_acc_mid$flat$15 = floor# simpflat$136;
      read bs_loc_mid$flat$19 = bs_acc_mid$flat$15 [Int];
      let bs_loc_x$flat$20 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$5 bs_loc_mid$flat$19;
      if (eq#@{Time} bs_loc_x$flat$20 conv$0$simpflat$117)
      {
        write bs_acc_end$flat$25 = True@{Bool};
        write bs_acc_found$flat$18 = True@{Bool};
      }
      else
      {
        if (lt#@{Time} bs_loc_x$flat$20 conv$0$simpflat$117)
        {
          write bs_acc_low$flat$23 = add#@{Int} bs_loc_mid$flat$19 (1@{Int});
        }
        else
        {
          write bs_acc_high$flat$24 = sub#@{Int} bs_loc_mid$flat$19 (1@{Int});
        }
      }
    }
  }
  read bs_loc_found$flat$13 = bs_acc_found$flat$18 [Bool];
  read bs_loc_mid$flat$14 = bs_acc_mid$flat$15 [Int];
  read bs_loc_ins$flat$16 = bs_acc_ins$flat$17 [Int];
  if (eq#@{Bool} bs_loc_found$flat$13 (True@{Bool}))
  {
    write map_insert_acc_bs_found$flat$4 = True@{Bool};
    write map_insert_acc_bs_index$flat$3 = bs_loc_mid$flat$14;
  }
  else
  {
    write map_insert_acc_bs_found$flat$4 = False@{Bool};
    write map_insert_acc_bs_index$flat$3 = bs_loc_ins$flat$16;
  }
  read map_insert_loc_bs_found$flat$8 = map_insert_acc_bs_found$flat$4 [Bool];
  read map_insert_loc_bs_index$flat$7 = map_insert_acc_bs_index$flat$3 [Int];
  if (eq#@{Bool} map_insert_loc_bs_found$flat$8 (True@{Bool}))
  {
    let simpflat$245 = unsafe_Array_index#@{Buf 2 FactIdentifier} map_insert_loc_vals$flat$6$simpflat$44 map_insert_loc_bs_index$flat$7;
    let simpflat$247 = unsafe_Array_index#@{Buf 2 Error} map_insert_loc_vals$flat$6$simpflat$45 map_insert_loc_bs_index$flat$7;
    let simpflat$249 = unsafe_Array_index#@{Buf 2 Int} map_insert_loc_vals$flat$6$simpflat$46 map_insert_loc_bs_index$flat$7;
    let simpflat$256 = Buf_push#@{Buf 2 FactIdentifier} simpflat$245 conv$1;
    let simpflat$259 = Buf_push#@{Buf 2 Error} simpflat$247 conv$0$simpflat$115;
    let simpflat$262 = Buf_push#@{Buf 2 Int} simpflat$249 conv$0$simpflat$116;
    read map_insert_acc_vals$flat$2$simpflat$40 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
    
    write map_insert_acc_vals$flat$2$simpflat$40 = Array_put_mutable#@{Buf 2 FactIdentifier} map_insert_acc_vals$flat$2$simpflat$40 map_insert_loc_bs_index$flat$7 simpflat$256;
    read map_insert_acc_vals$flat$2$simpflat$41 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$41 = Array_put_mutable#@{Buf 2 Error} map_insert_acc_vals$flat$2$simpflat$41 map_insert_loc_bs_index$flat$7 simpflat$259;
    read map_insert_acc_vals$flat$2$simpflat$42 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$42 = Array_put_mutable#@{Buf 2 Int} map_insert_acc_vals$flat$2$simpflat$42 map_insert_loc_bs_index$flat$7 simpflat$262;
    
    
    
    
  }
  else
  {
    foreach (for_counter$flat$29 in map_insert_size$flat$10 .. map_insert_loc_bs_index$flat$7)
    {
      read update_acc$flat$30 = map_insert_acc_keys$flat$1 [Array Time];
      let simpflat$151 = sub#@{Int} for_counter$flat$29 (1@{Int});
      let simpflat$152 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$5 simpflat$151;
      write map_insert_acc_keys$flat$1 = Array_put_mutable#@{Time} update_acc$flat$30 for_counter$flat$29 simpflat$152;
      read update_acc$flat$31$simpflat$52 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
      read update_acc$flat$31$simpflat$53 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
      read update_acc$flat$31$simpflat$54 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
      let simpflat$275 = unsafe_Array_index#@{Buf 2 FactIdentifier} map_insert_loc_vals$flat$6$simpflat$44 simpflat$151;
      write map_insert_acc_vals$flat$2$simpflat$40 = Array_put_mutable#@{Buf 2 FactIdentifier} update_acc$flat$31$simpflat$52 for_counter$flat$29 simpflat$275;
      let simpflat$287 = unsafe_Array_index#@{Buf 2 Error} map_insert_loc_vals$flat$6$simpflat$45 simpflat$151;
      write map_insert_acc_vals$flat$2$simpflat$41 = Array_put_mutable#@{Buf 2 Error} update_acc$flat$31$simpflat$53 for_counter$flat$29 simpflat$287;
      let simpflat$299 = unsafe_Array_index#@{Buf 2 Int} map_insert_loc_vals$flat$6$simpflat$46 simpflat$151;
      write map_insert_acc_vals$flat$2$simpflat$42 = Array_put_mutable#@{Buf 2 Int} update_acc$flat$31$simpflat$54 for_counter$flat$29 simpflat$299;
    }
    read map_insert_acc_keys$flat$1 = map_insert_acc_keys$flat$1 [Array Time];
    
    write map_insert_acc_keys$flat$1 = Array_put_mutable#@{Time} map_insert_acc_keys$flat$1 map_insert_loc_bs_index$flat$7 conv$0$simpflat$117;
    
    read map_insert_acc_vals$flat$2$simpflat$40 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
    
    write map_insert_acc_vals$flat$2$simpflat$40 = Array_put_mutable#@{Buf 2 FactIdentifier} map_insert_acc_vals$flat$2$simpflat$40 map_insert_loc_bs_index$flat$7 simpflat$232;
    read map_insert_acc_vals$flat$2$simpflat$41 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$41 = Array_put_mutable#@{Buf 2 Error} map_insert_acc_vals$flat$2$simpflat$41 map_insert_loc_bs_index$flat$7 simpflat$235;
    read map_insert_acc_vals$flat$2$simpflat$42 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$42 = Array_put_mutable#@{Buf 2 Int} map_insert_acc_vals$flat$2$simpflat$42 map_insert_loc_bs_index$flat$7 simpflat$238;
    
    
    
    
  }
  read map_insert_loc_keys$flat$5 = map_insert_acc_keys$flat$1 [Array Time];
  read map_insert_loc_vals$flat$6$simpflat$60 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
  read map_insert_loc_vals$flat$6$simpflat$61 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
  read map_insert_loc_vals$flat$6$simpflat$62 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
  write acc$conv$4$simpflat$30 = map_insert_loc_keys$flat$5;
  write acc$conv$4$simpflat$31 = map_insert_loc_vals$flat$6$simpflat$60;
  write acc$conv$4$simpflat$32 = map_insert_loc_vals$flat$6$simpflat$61;
  write acc$conv$4$simpflat$33 = map_insert_loc_vals$flat$6$simpflat$62;
}
read acc$conv$4$flat$34$simpflat$65 = acc$conv$4$simpflat$31 [Array (Buf 2 FactIdentifier)];
foreach (flat$36 in 0@{Int} .. Array_length#@{Buf 2 FactIdentifier} acc$conv$4$flat$34$simpflat$65)
{
  let simpflat$332 = unsafe_Array_index#@{Buf 2 FactIdentifier} acc$conv$4$flat$34$simpflat$65 flat$36;
  let flat$37 = Buf_read#@{Array FactIdentifier} simpflat$332;
  foreach (flat$38 in 0@{Int} .. Array_length#@{FactIdentifier} flat$37)
  {
    keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$37 flat$38;
  }
}
save_resumable@{Array Time} acc$conv$4$simpflat$30;
save_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simpflat$31;
save_resumable@{Array (Buf 2 Error)} acc$conv$4$simpflat$32;
save_resumable@{Array (Buf 2 Int)} acc$conv$4$simpflat$33;
read conv$4$simpflat$69 = acc$conv$4$simpflat$30 [Array Time];
read conv$4$simpflat$71 = acc$conv$4$simpflat$32 [Array (Buf 2 Error)];
read conv$4$simpflat$72 = acc$conv$4$simpflat$33 [Array (Buf 2 Int)];
init flat$46$simpflat$74@{Error} = ExceptNotAnError@{Error};
init flat$46$simpflat$75@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
init flat$46$simpflat$76@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
foreach (for_counter$flat$47 in 0@{Int} .. Array_length#@{Time} conv$4$simpflat$69)
{
  read flat$46$simpflat$77 = flat$46$simpflat$74 [Error];
  read flat$46$simpflat$78 = flat$46$simpflat$75 [Array Time];
  read flat$46$simpflat$79 = flat$46$simpflat$76 [Array Int];
  let simpflat$347 = unsafe_Array_index#@{Time} conv$4$simpflat$69 for_counter$flat$47;
  let simpflat$351 = unsafe_Array_index#@{Buf 2 Error} conv$4$simpflat$71 for_counter$flat$47;
  let simpflat$353 = unsafe_Array_index#@{Buf 2 Int} conv$4$simpflat$72 for_counter$flat$47;
  init flat$49$simpflat$80@{Error} = ExceptNotAnError@{Error};
  init flat$49$simpflat$81@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
  init flat$49$simpflat$82@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
  if (eq#@{Error} flat$46$simpflat$77 (ExceptNotAnError@{Error}))
  {
    let simpflat$369 = Buf_read#@{Array Error} simpflat$351;
    let simpflat$371 = Buf_read#@{Array Int} simpflat$353;
    init flat$53$simpflat$85@{Error} = ExceptNotAnError@{Error};
    init flat$53$simpflat$86@{Int} = 0@{Int};
    foreach (for_counter$flat$89 in 0@{Int} .. Array_length#@{Error} simpflat$369)
    {
      read flat$53$simpflat$89 = flat$53$simpflat$85 [Error];
      read flat$53$simpflat$90 = flat$53$simpflat$86 [Int];
      let simpflat$376 = unsafe_Array_index#@{Error} simpflat$369 for_counter$flat$89;
      let simpflat$378 = unsafe_Array_index#@{Int} simpflat$371 for_counter$flat$89;
      init flat$91$simpflat$91@{Error} = ExceptNotAnError@{Error};
      init flat$91$simpflat$92@{Int} = 0@{Int};
      if (eq#@{Error} simpflat$376 (ExceptNotAnError@{Error}))
      {
        init flat$94$simpflat$93@{Error} = ExceptNotAnError@{Error};
        init flat$94$simpflat$94@{Int} = 0@{Int};
        if (eq#@{Error} flat$53$simpflat$89 (ExceptNotAnError@{Error}))
        {
          write flat$94$simpflat$93 = ExceptNotAnError@{Error};
          write flat$94$simpflat$94 = add#@{Int} simpflat$378 flat$53$simpflat$90;
        }
        else
        {
          write flat$94$simpflat$93 = flat$53$simpflat$89;
          write flat$94$simpflat$94 = 0@{Int};
        }
        read flat$94$simpflat$95 = flat$94$simpflat$93 [Error];
        read flat$94$simpflat$96 = flat$94$simpflat$94 [Int];
        write flat$91$simpflat$91 = flat$94$simpflat$95;
        write flat$91$simpflat$92 = flat$94$simpflat$96;
      }
      else
      {
        write flat$91$simpflat$91 = simpflat$376;
        write flat$91$simpflat$92 = 0@{Int};
      }
      read flat$91$simpflat$97 = flat$91$simpflat$91 [Error];
      read flat$91$simpflat$98 = flat$91$simpflat$92 [Int];
      write flat$53$simpflat$85 = flat$91$simpflat$97;
      write flat$53$simpflat$86 = flat$91$simpflat$98;
    }
    read flat$53$simpflat$101 = flat$53$simpflat$85 [Error];
    read flat$53$simpflat$102 = flat$53$simpflat$86 [Int];
    init flat$54$simpflat$103@{Error} = ExceptNotAnError@{Error};
    init flat$54$simpflat$104@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
    init flat$54$simpflat$105@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
    if (eq#@{Error} flat$53$simpflat$101 (ExceptNotAnError@{Error}))
    {
      init map_insert_acc_keys$flat$57@{Array Time} = flat$46$simpflat$78;
      init map_insert_acc_vals$flat$58@{Array Int} = flat$46$simpflat$79;
      init map_insert_acc_bs_found$flat$60@{Bool} = False@{Bool};
      init map_insert_acc_bs_index$flat$59@{Int} = -1@{Int};
      read map_insert_loc_keys$flat$61 = map_insert_acc_keys$flat$57 [Array Time];
      read map_insert_loc_vals$flat$62 = map_insert_acc_vals$flat$58 [Array Int];
      read map_insert_loc_bs_found$flat$64 = map_insert_acc_bs_found$flat$60 [Bool];
      read map_insert_loc_bs_index$flat$63 = map_insert_acc_bs_index$flat$59 [Int];
      let map_insert_size$flat$66 = Array_length#@{Time} map_insert_loc_keys$flat$61;
      init bs_acc_found$flat$74@{Bool} = False@{Bool};
      init bs_acc_mid$flat$71@{Int} = -1@{Int};
      init bs_acc_ins$flat$73@{Int} = -1@{Int};
      init bs_acc_low$flat$79@{Int} = 0@{Int};
      init bs_acc_high$flat$80@{Int} = sub#@{Int} map_insert_size$flat$66 (1@{Int});
      init bs_acc_end$flat$81@{Bool} = False@{Bool};
      while (bs_acc_end$flat$81 == False@{Bool}){
        read bs_loc_low$flat$77 = bs_acc_low$flat$79 [Int];
        read bs_loc_high$flat$78 = bs_acc_high$flat$80 [Int];
        if (gt#@{Int} bs_loc_low$flat$77 bs_loc_high$flat$78)
        {
          write bs_acc_end$flat$81 = True@{Bool};
          write bs_acc_ins$flat$73 = bs_loc_low$flat$77;
        }
        else
        {
          let simpflat$209 = add#@{Int} bs_loc_low$flat$77 bs_loc_high$flat$78;
          let simpflat$210 = doubleOfInt# simpflat$209;
          let simpflat$211 = div# simpflat$210 (2.0@{Double});
          write bs_acc_mid$flat$71 = floor# simpflat$211;
          read bs_loc_mid$flat$75 = bs_acc_mid$flat$71 [Int];
          let bs_loc_x$flat$76 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$61 bs_loc_mid$flat$75;
          if (eq#@{Time} bs_loc_x$flat$76 simpflat$347)
          {
            write bs_acc_end$flat$81 = True@{Bool};
            write bs_acc_found$flat$74 = True@{Bool};
          }
          else
          {
            if (lt#@{Time} bs_loc_x$flat$76 simpflat$347)
            {
              write bs_acc_low$flat$79 = add#@{Int} bs_loc_mid$flat$75 (1@{Int});
            }
            else
            {
              write bs_acc_high$flat$80 = sub#@{Int} bs_loc_mid$flat$75 (1@{Int});
            }
          }
        }
      }
      read bs_loc_found$flat$69 = bs_acc_found$flat$74 [Bool];
      read bs_loc_mid$flat$70 = bs_acc_mid$flat$71 [Int];
      read bs_loc_ins$flat$72 = bs_acc_ins$flat$73 [Int];
      if (eq#@{Bool} bs_loc_found$flat$69 (True@{Bool}))
      {
        write map_insert_acc_bs_found$flat$60 = True@{Bool};
        write map_insert_acc_bs_index$flat$59 = bs_loc_mid$flat$70;
      }
      else
      {
        write map_insert_acc_bs_found$flat$60 = False@{Bool};
        write map_insert_acc_bs_index$flat$59 = bs_loc_ins$flat$72;
      }
      read map_insert_loc_bs_found$flat$64 = map_insert_acc_bs_found$flat$60 [Bool];
      read map_insert_loc_bs_index$flat$63 = map_insert_acc_bs_index$flat$59 [Int];
      if (eq#@{Bool} map_insert_loc_bs_found$flat$64 (True@{Bool}))
      {
        let map_insert_loc_old$flat$82 = unsafe_Array_index#@{Int} map_insert_loc_vals$flat$62 map_insert_loc_bs_index$flat$63;
        read map_insert_acc_vals$flat$58 = map_insert_acc_vals$flat$58 [Array Int];
        
        write map_insert_acc_vals$flat$58 = Array_put_mutable#@{Int} map_insert_acc_vals$flat$58 map_insert_loc_bs_index$flat$63 map_insert_loc_old$flat$82;
        
      }
      else
      {
        foreach (for_counter$flat$84 in map_insert_size$flat$66 .. map_insert_loc_bs_index$flat$63)
        {
          read update_acc$flat$85 = map_insert_acc_keys$flat$57 [Array Time];
          let simpflat$212 = sub#@{Int} for_counter$flat$84 (1@{Int});
          let simpflat$213 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$61 simpflat$212;
          write map_insert_acc_keys$flat$57 = Array_put_mutable#@{Time} update_acc$flat$85 for_counter$flat$84 simpflat$213;
          read update_acc$flat$86 = map_insert_acc_vals$flat$58 [Array Int];
          let simpflat$215 = unsafe_Array_index#@{Int} map_insert_loc_vals$flat$62 simpflat$212;
          write map_insert_acc_vals$flat$58 = Array_put_mutable#@{Int} update_acc$flat$86 for_counter$flat$84 simpflat$215;
        }
        read map_insert_acc_keys$flat$57 = map_insert_acc_keys$flat$57 [Array Time];
        
        write map_insert_acc_keys$flat$57 = Array_put_mutable#@{Time} map_insert_acc_keys$flat$57 map_insert_loc_bs_index$flat$63 simpflat$347;
        
        read map_insert_acc_vals$flat$58 = map_insert_acc_vals$flat$58 [Array Int];
        
        write map_insert_acc_vals$flat$58 = Array_put_mutable#@{Int} map_insert_acc_vals$flat$58 map_insert_loc_bs_index$flat$63 flat$53$simpflat$102;
        
      }
      read map_insert_loc_keys$flat$61 = map_insert_acc_keys$flat$57 [Array Time];
      read map_insert_loc_vals$flat$62 = map_insert_acc_vals$flat$58 [Array Int];
      write flat$54$simpflat$103 = ExceptNotAnError@{Error};
      write flat$54$simpflat$104 = map_insert_loc_keys$flat$61;
      write flat$54$simpflat$105 = map_insert_loc_vals$flat$62;
    }
    else
    {
      write flat$54$simpflat$103 = flat$53$simpflat$101;
      write flat$54$simpflat$104 = unsafe_Array_create#@{Time} (0@{Int});
      write flat$54$simpflat$105 = unsafe_Array_create#@{Int} (0@{Int});
    }
    read flat$54$simpflat$106 = flat$54$simpflat$103 [Error];
    read flat$54$simpflat$107 = flat$54$simpflat$104 [Array Time];
    read flat$54$simpflat$108 = flat$54$simpflat$105 [Array Int];
    write flat$49$simpflat$80 = flat$54$simpflat$106;
    write flat$49$simpflat$81 = flat$54$simpflat$107;
    write flat$49$simpflat$82 = flat$54$simpflat$108;
  }
  else
  {
    write flat$49$simpflat$80 = flat$46$simpflat$77;
    write flat$49$simpflat$81 = unsafe_Array_create#@{Time} (0@{Int});
    write flat$49$simpflat$82 = unsafe_Array_create#@{Int} (0@{Int});
  }
  read flat$49$simpflat$109 = flat$49$simpflat$80 [Error];
  read flat$49$simpflat$110 = flat$49$simpflat$81 [Array Time];
  read flat$49$simpflat$111 = flat$49$simpflat$82 [Array Int];
  write flat$46$simpflat$74 = flat$49$simpflat$109;
  write flat$46$simpflat$75 = flat$49$simpflat$110;
  write flat$46$simpflat$76 = flat$49$simpflat$111;
}
read flat$46$simpflat$112 = flat$46$simpflat$74 [Error];
read flat$46$simpflat$113 = flat$46$simpflat$75 [Array Time];
read flat$46$simpflat$114 = flat$46$simpflat$76 [Array Int];
output@{(Sum Error (Map Time Int))} repl (flat$46$simpflat$112@{Error}, flat$46$simpflat$113@{Array Time}, flat$46$simpflat$114@{Array Int});

- Flattened Avalanche (simplified), typechecked:
conv$3 = TIME
init acc$conv$4$simpflat$30@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
init acc$conv$4$simpflat$31@{Array (Buf 2 FactIdentifier)} = unsafe_Array_create#@{Buf 2 FactIdentifier} (0@{Int});
init acc$conv$4$simpflat$32@{Array (Buf 2 Error)} = unsafe_Array_create#@{Buf 2 Error} (0@{Int});
init acc$conv$4$simpflat$33@{Array (Buf 2 Int)} = unsafe_Array_create#@{Buf 2 Int} (0@{Int});
load_resumable@{Array Time} acc$conv$4$simpflat$30;
load_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simpflat$31;
load_resumable@{Array (Buf 2 Error)} acc$conv$4$simpflat$32;
load_resumable@{Array (Buf 2 Int)} acc$conv$4$simpflat$33;
for_facts (conv$2@{Time}, conv$1@{FactIdentifier}, conv$0$simpflat$115@{Error}, conv$0$simpflat$116@{Int}, conv$0$simpflat$117@{Time}) in new
{
  read conv$4$aval$0$simpflat$35 = acc$conv$4$simpflat$30 [Array Time];
  read conv$4$aval$0$simpflat$36 = acc$conv$4$simpflat$31 [Array (Buf 2 FactIdentifier)];
  read conv$4$aval$0$simpflat$37 = acc$conv$4$simpflat$32 [Array (Buf 2 Error)];
  read conv$4$aval$0$simpflat$38 = acc$conv$4$simpflat$33 [Array (Buf 2 Int)];
  let simpflat$398 = Buf_make#@{Buf 2 FactIdentifier} (()@{Unit});
  let simpflat$232 = Buf_push#@{Buf 2 FactIdentifier} simpflat$398 conv$1;
  let simpflat$399 = Buf_make#@{Buf 2 Error} (()@{Unit});
  let simpflat$235 = Buf_push#@{Buf 2 Error} simpflat$399 conv$0$simpflat$115;
  let simpflat$400 = Buf_make#@{Buf 2 Int} (()@{Unit});
  let simpflat$238 = Buf_push#@{Buf 2 Int} simpflat$400 conv$0$simpflat$116;
  init map_insert_acc_keys$flat$1@{Array Time} = conv$4$aval$0$simpflat$35;
  init map_insert_acc_vals$flat$2$simpflat$40@{Array (Buf 2 FactIdentifier)} = conv$4$aval$0$simpflat$36;
  init map_insert_acc_vals$flat$2$simpflat$41@{Array (Buf 2 Error)} = conv$4$aval$0$simpflat$37;
  init map_insert_acc_vals$flat$2$simpflat$42@{Array (Buf 2 Int)} = conv$4$aval$0$simpflat$38;
  init map_insert_acc_bs_found$flat$4@{Bool} = False@{Bool};
  init map_insert_acc_bs_index$flat$3@{Int} = -1@{Int};
  read map_insert_loc_keys$flat$5 = map_insert_acc_keys$flat$1 [Array Time];
  read map_insert_loc_vals$flat$6$simpflat$44 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
  read map_insert_loc_vals$flat$6$simpflat$45 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
  read map_insert_loc_vals$flat$6$simpflat$46 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
  read map_insert_loc_bs_found$flat$8 = map_insert_acc_bs_found$flat$4 [Bool];
  read map_insert_loc_bs_index$flat$7 = map_insert_acc_bs_index$flat$3 [Int];
  let map_insert_size$flat$10 = Array_length#@{Time} map_insert_loc_keys$flat$5;
  init bs_acc_found$flat$18@{Bool} = False@{Bool};
  init bs_acc_mid$flat$15@{Int} = -1@{Int};
  init bs_acc_ins$flat$17@{Int} = -1@{Int};
  init bs_acc_low$flat$23@{Int} = 0@{Int};
  init bs_acc_high$flat$24@{Int} = sub#@{Int} map_insert_size$flat$10 (1@{Int});
  init bs_acc_end$flat$25@{Bool} = False@{Bool};
  while (bs_acc_end$flat$25 == False@{Bool}){
    read bs_loc_low$flat$21 = bs_acc_low$flat$23 [Int];
    read bs_loc_high$flat$22 = bs_acc_high$flat$24 [Int];
    if (gt#@{Int} bs_loc_low$flat$21 bs_loc_high$flat$22)
    {
      write bs_acc_end$flat$25 = True@{Bool};
      write bs_acc_ins$flat$17 = bs_loc_low$flat$21;
    }
    else
    {
      let simpflat$134 = add#@{Int} bs_loc_low$flat$21 bs_loc_high$flat$22;
      let simpflat$135 = doubleOfInt# simpflat$134;
      let simpflat$136 = div# simpflat$135 (2.0@{Double});
      write bs_acc_mid$flat$15 = floor# simpflat$136;
      read bs_loc_mid$flat$19 = bs_acc_mid$flat$15 [Int];
      let bs_loc_x$flat$20 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$5 bs_loc_mid$flat$19;
      if (eq#@{Time} bs_loc_x$flat$20 conv$0$simpflat$117)
      {
        write bs_acc_end$flat$25 = True@{Bool};
        write bs_acc_found$flat$18 = True@{Bool};
      }
      else
      {
        if (lt#@{Time} bs_loc_x$flat$20 conv$0$simpflat$117)
        {
          write bs_acc_low$flat$23 = add#@{Int} bs_loc_mid$flat$19 (1@{Int});
        }
        else
        {
          write bs_acc_high$flat$24 = sub#@{Int} bs_loc_mid$flat$19 (1@{Int});
        }
      }
    }
  }
  read bs_loc_found$flat$13 = bs_acc_found$flat$18 [Bool];
  read bs_loc_mid$flat$14 = bs_acc_mid$flat$15 [Int];
  read bs_loc_ins$flat$16 = bs_acc_ins$flat$17 [Int];
  if (eq#@{Bool} bs_loc_found$flat$13 (True@{Bool}))
  {
    write map_insert_acc_bs_found$flat$4 = True@{Bool};
    write map_insert_acc_bs_index$flat$3 = bs_loc_mid$flat$14;
  }
  else
  {
    write map_insert_acc_bs_found$flat$4 = False@{Bool};
    write map_insert_acc_bs_index$flat$3 = bs_loc_ins$flat$16;
  }
  read map_insert_loc_bs_found$flat$8 = map_insert_acc_bs_found$flat$4 [Bool];
  read map_insert_loc_bs_index$flat$7 = map_insert_acc_bs_index$flat$3 [Int];
  if (eq#@{Bool} map_insert_loc_bs_found$flat$8 (True@{Bool}))
  {
    let simpflat$245 = unsafe_Array_index#@{Buf 2 FactIdentifier} map_insert_loc_vals$flat$6$simpflat$44 map_insert_loc_bs_index$flat$7;
    let simpflat$247 = unsafe_Array_index#@{Buf 2 Error} map_insert_loc_vals$flat$6$simpflat$45 map_insert_loc_bs_index$flat$7;
    let simpflat$249 = unsafe_Array_index#@{Buf 2 Int} map_insert_loc_vals$flat$6$simpflat$46 map_insert_loc_bs_index$flat$7;
    let simpflat$256 = Buf_push#@{Buf 2 FactIdentifier} simpflat$245 conv$1;
    let simpflat$259 = Buf_push#@{Buf 2 Error} simpflat$247 conv$0$simpflat$115;
    let simpflat$262 = Buf_push#@{Buf 2 Int} simpflat$249 conv$0$simpflat$116;
    read map_insert_acc_vals$flat$2$simpflat$40 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
    
    write map_insert_acc_vals$flat$2$simpflat$40 = Array_put_mutable#@{Buf 2 FactIdentifier} map_insert_acc_vals$flat$2$simpflat$40 map_insert_loc_bs_index$flat$7 simpflat$256;
    read map_insert_acc_vals$flat$2$simpflat$41 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$41 = Array_put_mutable#@{Buf 2 Error} map_insert_acc_vals$flat$2$simpflat$41 map_insert_loc_bs_index$flat$7 simpflat$259;
    read map_insert_acc_vals$flat$2$simpflat$42 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$42 = Array_put_mutable#@{Buf 2 Int} map_insert_acc_vals$flat$2$simpflat$42 map_insert_loc_bs_index$flat$7 simpflat$262;
    
    
    
    
  }
  else
  {
    foreach (for_counter$flat$29 in map_insert_size$flat$10 .. map_insert_loc_bs_index$flat$7)
    {
      read update_acc$flat$30 = map_insert_acc_keys$flat$1 [Array Time];
      let simpflat$151 = sub#@{Int} for_counter$flat$29 (1@{Int});
      let simpflat$152 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$5 simpflat$151;
      write map_insert_acc_keys$flat$1 = Array_put_mutable#@{Time} update_acc$flat$30 for_counter$flat$29 simpflat$152;
      read update_acc$flat$31$simpflat$52 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
      read update_acc$flat$31$simpflat$53 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
      read update_acc$flat$31$simpflat$54 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
      let simpflat$275 = unsafe_Array_index#@{Buf 2 FactIdentifier} map_insert_loc_vals$flat$6$simpflat$44 simpflat$151;
      write map_insert_acc_vals$flat$2$simpflat$40 = Array_put_mutable#@{Buf 2 FactIdentifier} update_acc$flat$31$simpflat$52 for_counter$flat$29 simpflat$275;
      let simpflat$287 = unsafe_Array_index#@{Buf 2 Error} map_insert_loc_vals$flat$6$simpflat$45 simpflat$151;
      write map_insert_acc_vals$flat$2$simpflat$41 = Array_put_mutable#@{Buf 2 Error} update_acc$flat$31$simpflat$53 for_counter$flat$29 simpflat$287;
      let simpflat$299 = unsafe_Array_index#@{Buf 2 Int} map_insert_loc_vals$flat$6$simpflat$46 simpflat$151;
      write map_insert_acc_vals$flat$2$simpflat$42 = Array_put_mutable#@{Buf 2 Int} update_acc$flat$31$simpflat$54 for_counter$flat$29 simpflat$299;
    }
    read map_insert_acc_keys$flat$1 = map_insert_acc_keys$flat$1 [Array Time];
    
    write map_insert_acc_keys$flat$1 = Array_put_mutable#@{Time} map_insert_acc_keys$flat$1 map_insert_loc_bs_index$flat$7 conv$0$simpflat$117;
    
    read map_insert_acc_vals$flat$2$simpflat$40 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
    
    write map_insert_acc_vals$flat$2$simpflat$40 = Array_put_mutable#@{Buf 2 FactIdentifier} map_insert_acc_vals$flat$2$simpflat$40 map_insert_loc_bs_index$flat$7 simpflat$232;
    read map_insert_acc_vals$flat$2$simpflat$41 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$41 = Array_put_mutable#@{Buf 2 Error} map_insert_acc_vals$flat$2$simpflat$41 map_insert_loc_bs_index$flat$7 simpflat$235;
    read map_insert_acc_vals$flat$2$simpflat$42 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
    
    
    write map_insert_acc_vals$flat$2$simpflat$42 = Array_put_mutable#@{Buf 2 Int} map_insert_acc_vals$flat$2$simpflat$42 map_insert_loc_bs_index$flat$7 simpflat$238;
    
    
    
    
  }
  read map_insert_loc_keys$flat$5 = map_insert_acc_keys$flat$1 [Array Time];
  read map_insert_loc_vals$flat$6$simpflat$60 = map_insert_acc_vals$flat$2$simpflat$40 [Array (Buf 2 FactIdentifier)];
  read map_insert_loc_vals$flat$6$simpflat$61 = map_insert_acc_vals$flat$2$simpflat$41 [Array (Buf 2 Error)];
  read map_insert_loc_vals$flat$6$simpflat$62 = map_insert_acc_vals$flat$2$simpflat$42 [Array (Buf 2 Int)];
  write acc$conv$4$simpflat$30 = map_insert_loc_keys$flat$5;
  write acc$conv$4$simpflat$31 = map_insert_loc_vals$flat$6$simpflat$60;
  write acc$conv$4$simpflat$32 = map_insert_loc_vals$flat$6$simpflat$61;
  write acc$conv$4$simpflat$33 = map_insert_loc_vals$flat$6$simpflat$62;
}
read acc$conv$4$flat$34$simpflat$65 = acc$conv$4$simpflat$31 [Array (Buf 2 FactIdentifier)];
foreach (flat$36 in 0@{Int} .. Array_length#@{Buf 2 FactIdentifier} acc$conv$4$flat$34$simpflat$65)
{
  let simpflat$332 = unsafe_Array_index#@{Buf 2 FactIdentifier} acc$conv$4$flat$34$simpflat$65 flat$36;
  let flat$37 = Buf_read#@{Array FactIdentifier} simpflat$332;
  foreach (flat$38 in 0@{Int} .. Array_length#@{FactIdentifier} flat$37)
  {
    keep_fact_in_history unsafe_Array_index#@{FactIdentifier} flat$37 flat$38;
  }
}
save_resumable@{Array Time} acc$conv$4$simpflat$30;
save_resumable@{Array (Buf 2 FactIdentifier)} acc$conv$4$simpflat$31;
save_resumable@{Array (Buf 2 Error)} acc$conv$4$simpflat$32;
save_resumable@{Array (Buf 2 Int)} acc$conv$4$simpflat$33;
read conv$4$simpflat$69 = acc$conv$4$simpflat$30 [Array Time];
read conv$4$simpflat$71 = acc$conv$4$simpflat$32 [Array (Buf 2 Error)];
read conv$4$simpflat$72 = acc$conv$4$simpflat$33 [Array (Buf 2 Int)];
init flat$46$simpflat$74@{Error} = ExceptNotAnError@{Error};
init flat$46$simpflat$75@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
init flat$46$simpflat$76@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
foreach (for_counter$flat$47 in 0@{Int} .. Array_length#@{Time} conv$4$simpflat$69)
{
  read flat$46$simpflat$77 = flat$46$simpflat$74 [Error];
  read flat$46$simpflat$78 = flat$46$simpflat$75 [Array Time];
  read flat$46$simpflat$79 = flat$46$simpflat$76 [Array Int];
  let simpflat$347 = unsafe_Array_index#@{Time} conv$4$simpflat$69 for_counter$flat$47;
  let simpflat$351 = unsafe_Array_index#@{Buf 2 Error} conv$4$simpflat$71 for_counter$flat$47;
  let simpflat$353 = unsafe_Array_index#@{Buf 2 Int} conv$4$simpflat$72 for_counter$flat$47;
  init flat$49$simpflat$80@{Error} = ExceptNotAnError@{Error};
  init flat$49$simpflat$81@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
  init flat$49$simpflat$82@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
  if (eq#@{Error} flat$46$simpflat$77 (ExceptNotAnError@{Error}))
  {
    let simpflat$369 = Buf_read#@{Array Error} simpflat$351;
    let simpflat$371 = Buf_read#@{Array Int} simpflat$353;
    init flat$53$simpflat$85@{Error} = ExceptNotAnError@{Error};
    init flat$53$simpflat$86@{Int} = 0@{Int};
    foreach (for_counter$flat$89 in 0@{Int} .. Array_length#@{Error} simpflat$369)
    {
      read flat$53$simpflat$89 = flat$53$simpflat$85 [Error];
      read flat$53$simpflat$90 = flat$53$simpflat$86 [Int];
      let simpflat$376 = unsafe_Array_index#@{Error} simpflat$369 for_counter$flat$89;
      let simpflat$378 = unsafe_Array_index#@{Int} simpflat$371 for_counter$flat$89;
      init flat$91$simpflat$91@{Error} = ExceptNotAnError@{Error};
      init flat$91$simpflat$92@{Int} = 0@{Int};
      if (eq#@{Error} simpflat$376 (ExceptNotAnError@{Error}))
      {
        init flat$94$simpflat$93@{Error} = ExceptNotAnError@{Error};
        init flat$94$simpflat$94@{Int} = 0@{Int};
        if (eq#@{Error} flat$53$simpflat$89 (ExceptNotAnError@{Error}))
        {
          write flat$94$simpflat$93 = ExceptNotAnError@{Error};
          write flat$94$simpflat$94 = add#@{Int} simpflat$378 flat$53$simpflat$90;
        }
        else
        {
          write flat$94$simpflat$93 = flat$53$simpflat$89;
          write flat$94$simpflat$94 = 0@{Int};
        }
        read flat$94$simpflat$95 = flat$94$simpflat$93 [Error];
        read flat$94$simpflat$96 = flat$94$simpflat$94 [Int];
        write flat$91$simpflat$91 = flat$94$simpflat$95;
        write flat$91$simpflat$92 = flat$94$simpflat$96;
      }
      else
      {
        write flat$91$simpflat$91 = simpflat$376;
        write flat$91$simpflat$92 = 0@{Int};
      }
      read flat$91$simpflat$97 = flat$91$simpflat$91 [Error];
      read flat$91$simpflat$98 = flat$91$simpflat$92 [Int];
      write flat$53$simpflat$85 = flat$91$simpflat$97;
      write flat$53$simpflat$86 = flat$91$simpflat$98;
    }
    read flat$53$simpflat$101 = flat$53$simpflat$85 [Error];
    read flat$53$simpflat$102 = flat$53$simpflat$86 [Int];
    init flat$54$simpflat$103@{Error} = ExceptNotAnError@{Error};
    init flat$54$simpflat$104@{Array Time} = unsafe_Array_create#@{Time} (0@{Int});
    init flat$54$simpflat$105@{Array Int} = unsafe_Array_create#@{Int} (0@{Int});
    if (eq#@{Error} flat$53$simpflat$101 (ExceptNotAnError@{Error}))
    {
      init map_insert_acc_keys$flat$57@{Array Time} = flat$46$simpflat$78;
      init map_insert_acc_vals$flat$58@{Array Int} = flat$46$simpflat$79;
      init map_insert_acc_bs_found$flat$60@{Bool} = False@{Bool};
      init map_insert_acc_bs_index$flat$59@{Int} = -1@{Int};
      read map_insert_loc_keys$flat$61 = map_insert_acc_keys$flat$57 [Array Time];
      read map_insert_loc_vals$flat$62 = map_insert_acc_vals$flat$58 [Array Int];
      read map_insert_loc_bs_found$flat$64 = map_insert_acc_bs_found$flat$60 [Bool];
      read map_insert_loc_bs_index$flat$63 = map_insert_acc_bs_index$flat$59 [Int];
      let map_insert_size$flat$66 = Array_length#@{Time} map_insert_loc_keys$flat$61;
      init bs_acc_found$flat$74@{Bool} = False@{Bool};
      init bs_acc_mid$flat$71@{Int} = -1@{Int};
      init bs_acc_ins$flat$73@{Int} = -1@{Int};
      init bs_acc_low$flat$79@{Int} = 0@{Int};
      init bs_acc_high$flat$80@{Int} = sub#@{Int} map_insert_size$flat$66 (1@{Int});
      init bs_acc_end$flat$81@{Bool} = False@{Bool};
      while (bs_acc_end$flat$81 == False@{Bool}){
        read bs_loc_low$flat$77 = bs_acc_low$flat$79 [Int];
        read bs_loc_high$flat$78 = bs_acc_high$flat$80 [Int];
        if (gt#@{Int} bs_loc_low$flat$77 bs_loc_high$flat$78)
        {
          write bs_acc_end$flat$81 = True@{Bool};
          write bs_acc_ins$flat$73 = bs_loc_low$flat$77;
        }
        else
        {
          let simpflat$209 = add#@{Int} bs_loc_low$flat$77 bs_loc_high$flat$78;
          let simpflat$210 = doubleOfInt# simpflat$209;
          let simpflat$211 = div# simpflat$210 (2.0@{Double});
          write bs_acc_mid$flat$71 = floor# simpflat$211;
          read bs_loc_mid$flat$75 = bs_acc_mid$flat$71 [Int];
          let bs_loc_x$flat$76 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$61 bs_loc_mid$flat$75;
          if (eq#@{Time} bs_loc_x$flat$76 simpflat$347)
          {
            write bs_acc_end$flat$81 = True@{Bool};
            write bs_acc_found$flat$74 = True@{Bool};
          }
          else
          {
            if (lt#@{Time} bs_loc_x$flat$76 simpflat$347)
            {
              write bs_acc_low$flat$79 = add#@{Int} bs_loc_mid$flat$75 (1@{Int});
            }
            else
            {
              write bs_acc_high$flat$80 = sub#@{Int} bs_loc_mid$flat$75 (1@{Int});
            }
          }
        }
      }
      read bs_loc_found$flat$69 = bs_acc_found$flat$74 [Bool];
      read bs_loc_mid$flat$70 = bs_acc_mid$flat$71 [Int];
      read bs_loc_ins$flat$72 = bs_acc_ins$flat$73 [Int];
      if (eq#@{Bool} bs_loc_found$flat$69 (True@{Bool}))
      {
        write map_insert_acc_bs_found$flat$60 = True@{Bool};
        write map_insert_acc_bs_index$flat$59 = bs_loc_mid$flat$70;
      }
      else
      {
        write map_insert_acc_bs_found$flat$60 = False@{Bool};
        write map_insert_acc_bs_index$flat$59 = bs_loc_ins$flat$72;
      }
      read map_insert_loc_bs_found$flat$64 = map_insert_acc_bs_found$flat$60 [Bool];
      read map_insert_loc_bs_index$flat$63 = map_insert_acc_bs_index$flat$59 [Int];
      if (eq#@{Bool} map_insert_loc_bs_found$flat$64 (True@{Bool}))
      {
        let map_insert_loc_old$flat$82 = unsafe_Array_index#@{Int} map_insert_loc_vals$flat$62 map_insert_loc_bs_index$flat$63;
        read map_insert_acc_vals$flat$58 = map_insert_acc_vals$flat$58 [Array Int];
        
        write map_insert_acc_vals$flat$58 = Array_put_mutable#@{Int} map_insert_acc_vals$flat$58 map_insert_loc_bs_index$flat$63 map_insert_loc_old$flat$82;
        
      }
      else
      {
        foreach (for_counter$flat$84 in map_insert_size$flat$66 .. map_insert_loc_bs_index$flat$63)
        {
          read update_acc$flat$85 = map_insert_acc_keys$flat$57 [Array Time];
          let simpflat$212 = sub#@{Int} for_counter$flat$84 (1@{Int});
          let simpflat$213 = unsafe_Array_index#@{Time} map_insert_loc_keys$flat$61 simpflat$212;
          write map_insert_acc_keys$flat$57 = Array_put_mutable#@{Time} update_acc$flat$85 for_counter$flat$84 simpflat$213;
          read update_acc$flat$86 = map_insert_acc_vals$flat$58 [Array Int];
          let simpflat$215 = unsafe_Array_index#@{Int} map_insert_loc_vals$flat$62 simpflat$212;
          write map_insert_acc_vals$flat$58 = Array_put_mutable#@{Int} update_acc$flat$86 for_counter$flat$84 simpflat$215;
        }
        read map_insert_acc_keys$flat$57 = map_insert_acc_keys$flat$57 [Array Time];
        
        write map_insert_acc_keys$flat$57 = Array_put_mutable#@{Time} map_insert_acc_keys$flat$57 map_insert_loc_bs_index$flat$63 simpflat$347;
        
        read map_insert_acc_vals$flat$58 = map_insert_acc_vals$flat$58 [Array Int];
        
        write map_insert_acc_vals$flat$58 = Array_put_mutable#@{Int} map_insert_acc_vals$flat$58 map_insert_loc_bs_index$flat$63 flat$53$simpflat$102;
        
      }
      read map_insert_loc_keys$flat$61 = map_insert_acc_keys$flat$57 [Array Time];
      read map_insert_loc_vals$flat$62 = map_insert_acc_vals$flat$58 [Array Int];
      write flat$54$simpflat$103 = ExceptNotAnError@{Error};
      write flat$54$simpflat$104 = map_insert_loc_keys$flat$61;
      write flat$54$simpflat$105 = map_insert_loc_vals$flat$62;
    }
    else
    {
      write flat$54$simpflat$103 = flat$53$simpflat$101;
      write flat$54$simpflat$104 = unsafe_Array_create#@{Time} (0@{Int});
      write flat$54$simpflat$105 = unsafe_Array_create#@{Int} (0@{Int});
    }
    read flat$54$simpflat$106 = flat$54$simpflat$103 [Error];
    read flat$54$simpflat$107 = flat$54$simpflat$104 [Array Time];
    read flat$54$simpflat$108 = flat$54$simpflat$105 [Array Int];
    write flat$49$simpflat$80 = flat$54$simpflat$106;
    write flat$49$simpflat$81 = flat$54$simpflat$107;
    write flat$49$simpflat$82 = flat$54$simpflat$108;
  }
  else
  {
    write flat$49$simpflat$80 = flat$46$simpflat$77;
    write flat$49$simpflat$81 = unsafe_Array_create#@{Time} (0@{Int});
    write flat$49$simpflat$82 = unsafe_Array_create#@{Int} (0@{Int});
  }
  read flat$49$simpflat$109 = flat$49$simpflat$80 [Error];
  read flat$49$simpflat$110 = flat$49$simpflat$81 [Array Time];
  read flat$49$simpflat$111 = flat$49$simpflat$82 [Array Int];
  write flat$46$simpflat$74 = flat$49$simpflat$109;
  write flat$46$simpflat$75 = flat$49$simpflat$110;
  write flat$46$simpflat$76 = flat$49$simpflat$111;
}
read flat$46$simpflat$112 = flat$46$simpflat$74 [Error];
read flat$46$simpflat$113 = flat$46$simpflat$75 [Array Time];
read flat$46$simpflat$114 = flat$46$simpflat$76 [Array Int];
output@{(Sum Error (Map Time Int))} repl (flat$46$simpflat$112@{Error}, flat$46$simpflat$113@{Array Time}, flat$46$simpflat$114@{Array Int});

- Core evaluation:
[homer, [(1989-12-17,100)
        ,(1990-01-01,200)
        ,(1994-01-01,300)
        ,(1999-01-01,400)
        ,(2010-01-01,500)]
,marge, [(1989-12-17,30)]]

> > > 